// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_labeler_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_log_5flabeler_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_log_5flabeler_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "messages_robocup_ssl_wrapper.pb.h"
#include "ssl_referee.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_log_5flabeler_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_log_5flabeler_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_5flabeler_5fdata_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_log_5flabeler_5fdata_2eproto_metadata_getter(int index);
class LabelerFrame;
struct LabelerFrameDefaultTypeInternal;
extern LabelerFrameDefaultTypeInternal _LabelerFrame_default_instance_;
class LabelerFrameGroup;
struct LabelerFrameGroupDefaultTypeInternal;
extern LabelerFrameGroupDefaultTypeInternal _LabelerFrameGroup_default_instance_;
class LabelerMetadata;
struct LabelerMetadataDefaultTypeInternal;
extern LabelerMetadataDefaultTypeInternal _LabelerMetadata_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LabelerFrame* Arena::CreateMaybeMessage<::LabelerFrame>(Arena*);
template<> ::LabelerFrameGroup* Arena::CreateMaybeMessage<::LabelerFrameGroup>(Arena*);
template<> ::LabelerMetadata* Arena::CreateMaybeMessage<::LabelerMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LabelerMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelerMetadata) */ {
 public:
  inline LabelerMetadata() : LabelerMetadata(nullptr) {}
  virtual ~LabelerMetadata();
  explicit constexpr LabelerMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabelerMetadata(const LabelerMetadata& from);
  LabelerMetadata(LabelerMetadata&& from) noexcept
    : LabelerMetadata() {
    *this = ::std::move(from);
  }

  inline LabelerMetadata& operator=(const LabelerMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelerMetadata& operator=(LabelerMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelerMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelerMetadata* internal_default_instance() {
    return reinterpret_cast<const LabelerMetadata*>(
               &_LabelerMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LabelerMetadata& a, LabelerMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelerMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelerMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelerMetadata* New() const final {
    return CreateMaybeMessage<LabelerMetadata>(nullptr);
  }

  LabelerMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelerMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelerMetadata& from);
  void MergeFrom(const LabelerMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelerMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelerMetadata";
  }
  protected:
  explicit LabelerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_log_5flabeler_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageOffsetsFieldNumber = 2,
    kNumCamerasFieldNumber = 1,
  };
  // repeated uint64 message_offsets = 2;
  int message_offsets_size() const;
  private:
  int _internal_message_offsets_size() const;
  public:
  void clear_message_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_message_offsets() const;
  void _internal_add_message_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_message_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 message_offsets(int index) const;
  void set_message_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_message_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      message_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_message_offsets();

  // uint32 num_cameras = 1;
  void clear_num_cameras();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_cameras() const;
  void set_num_cameras(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_cameras() const;
  void _internal_set_num_cameras(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabelerMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > message_offsets_;
  mutable std::atomic<int> _message_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_cameras_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_5flabeler_5fdata_2eproto;
};
// -------------------------------------------------------------------

class LabelerFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelerFrame) */ {
 public:
  inline LabelerFrame() : LabelerFrame(nullptr) {}
  virtual ~LabelerFrame();
  explicit constexpr LabelerFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabelerFrame(const LabelerFrame& from);
  LabelerFrame(LabelerFrame&& from) noexcept
    : LabelerFrame() {
    *this = ::std::move(from);
  }

  inline LabelerFrame& operator=(const LabelerFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelerFrame& operator=(LabelerFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelerFrame& default_instance() {
    return *internal_default_instance();
  }
  enum FrameCase {
    kVisionFrame = 2,
    kRefereeFrame = 3,
    FRAME_NOT_SET = 0,
  };

  static inline const LabelerFrame* internal_default_instance() {
    return reinterpret_cast<const LabelerFrame*>(
               &_LabelerFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LabelerFrame& a, LabelerFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelerFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelerFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelerFrame* New() const final {
    return CreateMaybeMessage<LabelerFrame>(nullptr);
  }

  LabelerFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelerFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelerFrame& from);
  void MergeFrom(const LabelerFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelerFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelerFrame";
  }
  protected:
  explicit LabelerFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_log_5flabeler_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kVisionFrameFieldNumber = 2,
    kRefereeFrameFieldNumber = 3,
  };
  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .SSL_WrapperPacket vision_frame = 2;
  bool has_vision_frame() const;
  private:
  bool _internal_has_vision_frame() const;
  public:
  void clear_vision_frame();
  const ::SSL_WrapperPacket& vision_frame() const;
  ::SSL_WrapperPacket* release_vision_frame();
  ::SSL_WrapperPacket* mutable_vision_frame();
  void set_allocated_vision_frame(::SSL_WrapperPacket* vision_frame);
  private:
  const ::SSL_WrapperPacket& _internal_vision_frame() const;
  ::SSL_WrapperPacket* _internal_mutable_vision_frame();
  public:
  void unsafe_arena_set_allocated_vision_frame(
      ::SSL_WrapperPacket* vision_frame);
  ::SSL_WrapperPacket* unsafe_arena_release_vision_frame();

  // .Referee referee_frame = 3;
  bool has_referee_frame() const;
  private:
  bool _internal_has_referee_frame() const;
  public:
  void clear_referee_frame();
  const ::Referee& referee_frame() const;
  ::Referee* release_referee_frame();
  ::Referee* mutable_referee_frame();
  void set_allocated_referee_frame(::Referee* referee_frame);
  private:
  const ::Referee& _internal_referee_frame() const;
  ::Referee* _internal_mutable_referee_frame();
  public:
  void unsafe_arena_set_allocated_referee_frame(
      ::Referee* referee_frame);
  ::Referee* unsafe_arena_release_referee_frame();

  void clear_frame();
  FrameCase frame_case() const;
  // @@protoc_insertion_point(class_scope:LabelerFrame)
 private:
  class _Internal;
  void set_has_vision_frame();
  void set_has_referee_frame();

  inline bool has_frame() const;
  inline void clear_has_frame();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  union FrameUnion {
    constexpr FrameUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::SSL_WrapperPacket* vision_frame_;
    ::Referee* referee_frame_;
  } frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_log_5flabeler_5fdata_2eproto;
};
// -------------------------------------------------------------------

class LabelerFrameGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabelerFrameGroup) */ {
 public:
  inline LabelerFrameGroup() : LabelerFrameGroup(nullptr) {}
  virtual ~LabelerFrameGroup();
  explicit constexpr LabelerFrameGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabelerFrameGroup(const LabelerFrameGroup& from);
  LabelerFrameGroup(LabelerFrameGroup&& from) noexcept
    : LabelerFrameGroup() {
    *this = ::std::move(from);
  }

  inline LabelerFrameGroup& operator=(const LabelerFrameGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelerFrameGroup& operator=(LabelerFrameGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelerFrameGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelerFrameGroup* internal_default_instance() {
    return reinterpret_cast<const LabelerFrameGroup*>(
               &_LabelerFrameGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LabelerFrameGroup& a, LabelerFrameGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelerFrameGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelerFrameGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelerFrameGroup* New() const final {
    return CreateMaybeMessage<LabelerFrameGroup>(nullptr);
  }

  LabelerFrameGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelerFrameGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelerFrameGroup& from);
  void MergeFrom(const LabelerFrameGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelerFrameGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabelerFrameGroup";
  }
  protected:
  explicit LabelerFrameGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_log_5flabeler_5fdata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .LabelerFrame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::LabelerFrame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelerFrame >*
      mutable_frames();
  private:
  const ::LabelerFrame& _internal_frames(int index) const;
  ::LabelerFrame* _internal_add_frames();
  public:
  const ::LabelerFrame& frames(int index) const;
  ::LabelerFrame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelerFrame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:LabelerFrameGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelerFrame > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_5flabeler_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LabelerMetadata

// uint32 num_cameras = 1;
inline void LabelerMetadata::clear_num_cameras() {
  num_cameras_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelerMetadata::_internal_num_cameras() const {
  return num_cameras_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabelerMetadata::num_cameras() const {
  // @@protoc_insertion_point(field_get:LabelerMetadata.num_cameras)
  return _internal_num_cameras();
}
inline void LabelerMetadata::_internal_set_num_cameras(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_cameras_ = value;
}
inline void LabelerMetadata::set_num_cameras(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_cameras(value);
  // @@protoc_insertion_point(field_set:LabelerMetadata.num_cameras)
}

// repeated uint64 message_offsets = 2;
inline int LabelerMetadata::_internal_message_offsets_size() const {
  return message_offsets_.size();
}
inline int LabelerMetadata::message_offsets_size() const {
  return _internal_message_offsets_size();
}
inline void LabelerMetadata::clear_message_offsets() {
  message_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LabelerMetadata::_internal_message_offsets(int index) const {
  return message_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LabelerMetadata::message_offsets(int index) const {
  // @@protoc_insertion_point(field_get:LabelerMetadata.message_offsets)
  return _internal_message_offsets(index);
}
inline void LabelerMetadata::set_message_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  message_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:LabelerMetadata.message_offsets)
}
inline void LabelerMetadata::_internal_add_message_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  message_offsets_.Add(value);
}
inline void LabelerMetadata::add_message_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_message_offsets(value);
  // @@protoc_insertion_point(field_add:LabelerMetadata.message_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LabelerMetadata::_internal_message_offsets() const {
  return message_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LabelerMetadata::message_offsets() const {
  // @@protoc_insertion_point(field_list:LabelerMetadata.message_offsets)
  return _internal_message_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LabelerMetadata::_internal_mutable_message_offsets() {
  return &message_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LabelerMetadata::mutable_message_offsets() {
  // @@protoc_insertion_point(field_mutable_list:LabelerMetadata.message_offsets)
  return _internal_mutable_message_offsets();
}

// -------------------------------------------------------------------

// LabelerFrame

// uint64 timestamp = 1;
inline void LabelerFrame::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LabelerFrame::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LabelerFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:LabelerFrame.timestamp)
  return _internal_timestamp();
}
inline void LabelerFrame::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void LabelerFrame::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:LabelerFrame.timestamp)
}

// .SSL_WrapperPacket vision_frame = 2;
inline bool LabelerFrame::_internal_has_vision_frame() const {
  return frame_case() == kVisionFrame;
}
inline bool LabelerFrame::has_vision_frame() const {
  return _internal_has_vision_frame();
}
inline void LabelerFrame::set_has_vision_frame() {
  _oneof_case_[0] = kVisionFrame;
}
inline ::SSL_WrapperPacket* LabelerFrame::release_vision_frame() {
  // @@protoc_insertion_point(field_release:LabelerFrame.vision_frame)
  if (_internal_has_vision_frame()) {
    clear_has_frame();
      ::SSL_WrapperPacket* temp = frame_.vision_frame_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_.vision_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SSL_WrapperPacket& LabelerFrame::_internal_vision_frame() const {
  return _internal_has_vision_frame()
      ? *frame_.vision_frame_
      : reinterpret_cast< ::SSL_WrapperPacket&>(::_SSL_WrapperPacket_default_instance_);
}
inline const ::SSL_WrapperPacket& LabelerFrame::vision_frame() const {
  // @@protoc_insertion_point(field_get:LabelerFrame.vision_frame)
  return _internal_vision_frame();
}
inline ::SSL_WrapperPacket* LabelerFrame::unsafe_arena_release_vision_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabelerFrame.vision_frame)
  if (_internal_has_vision_frame()) {
    clear_has_frame();
    ::SSL_WrapperPacket* temp = frame_.vision_frame_;
    frame_.vision_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LabelerFrame::unsafe_arena_set_allocated_vision_frame(::SSL_WrapperPacket* vision_frame) {
  clear_frame();
  if (vision_frame) {
    set_has_vision_frame();
    frame_.vision_frame_ = vision_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabelerFrame.vision_frame)
}
inline ::SSL_WrapperPacket* LabelerFrame::_internal_mutable_vision_frame() {
  if (!_internal_has_vision_frame()) {
    clear_frame();
    set_has_vision_frame();
    frame_.vision_frame_ = CreateMaybeMessage< ::SSL_WrapperPacket >(GetArena());
  }
  return frame_.vision_frame_;
}
inline ::SSL_WrapperPacket* LabelerFrame::mutable_vision_frame() {
  // @@protoc_insertion_point(field_mutable:LabelerFrame.vision_frame)
  return _internal_mutable_vision_frame();
}

// .Referee referee_frame = 3;
inline bool LabelerFrame::_internal_has_referee_frame() const {
  return frame_case() == kRefereeFrame;
}
inline bool LabelerFrame::has_referee_frame() const {
  return _internal_has_referee_frame();
}
inline void LabelerFrame::set_has_referee_frame() {
  _oneof_case_[0] = kRefereeFrame;
}
inline ::Referee* LabelerFrame::release_referee_frame() {
  // @@protoc_insertion_point(field_release:LabelerFrame.referee_frame)
  if (_internal_has_referee_frame()) {
    clear_has_frame();
      ::Referee* temp = frame_.referee_frame_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frame_.referee_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Referee& LabelerFrame::_internal_referee_frame() const {
  return _internal_has_referee_frame()
      ? *frame_.referee_frame_
      : reinterpret_cast< ::Referee&>(::_Referee_default_instance_);
}
inline const ::Referee& LabelerFrame::referee_frame() const {
  // @@protoc_insertion_point(field_get:LabelerFrame.referee_frame)
  return _internal_referee_frame();
}
inline ::Referee* LabelerFrame::unsafe_arena_release_referee_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabelerFrame.referee_frame)
  if (_internal_has_referee_frame()) {
    clear_has_frame();
    ::Referee* temp = frame_.referee_frame_;
    frame_.referee_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LabelerFrame::unsafe_arena_set_allocated_referee_frame(::Referee* referee_frame) {
  clear_frame();
  if (referee_frame) {
    set_has_referee_frame();
    frame_.referee_frame_ = referee_frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabelerFrame.referee_frame)
}
inline ::Referee* LabelerFrame::_internal_mutable_referee_frame() {
  if (!_internal_has_referee_frame()) {
    clear_frame();
    set_has_referee_frame();
    frame_.referee_frame_ = CreateMaybeMessage< ::Referee >(GetArena());
  }
  return frame_.referee_frame_;
}
inline ::Referee* LabelerFrame::mutable_referee_frame() {
  // @@protoc_insertion_point(field_mutable:LabelerFrame.referee_frame)
  return _internal_mutable_referee_frame();
}

inline bool LabelerFrame::has_frame() const {
  return frame_case() != FRAME_NOT_SET;
}
inline void LabelerFrame::clear_has_frame() {
  _oneof_case_[0] = FRAME_NOT_SET;
}
inline LabelerFrame::FrameCase LabelerFrame::frame_case() const {
  return LabelerFrame::FrameCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LabelerFrameGroup

// repeated .LabelerFrame frames = 1;
inline int LabelerFrameGroup::_internal_frames_size() const {
  return frames_.size();
}
inline int LabelerFrameGroup::frames_size() const {
  return _internal_frames_size();
}
inline void LabelerFrameGroup::clear_frames() {
  frames_.Clear();
}
inline ::LabelerFrame* LabelerFrameGroup::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:LabelerFrameGroup.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelerFrame >*
LabelerFrameGroup::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:LabelerFrameGroup.frames)
  return &frames_;
}
inline const ::LabelerFrame& LabelerFrameGroup::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::LabelerFrame& LabelerFrameGroup::frames(int index) const {
  // @@protoc_insertion_point(field_get:LabelerFrameGroup.frames)
  return _internal_frames(index);
}
inline ::LabelerFrame* LabelerFrameGroup::_internal_add_frames() {
  return frames_.Add();
}
inline ::LabelerFrame* LabelerFrameGroup::add_frames() {
  // @@protoc_insertion_point(field_add:LabelerFrameGroup.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabelerFrame >&
LabelerFrameGroup::frames() const {
  // @@protoc_insertion_point(field_list:LabelerFrameGroup.frames)
  return frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_log_5flabeler_5fdata_2eproto
