// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry_legacy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "messages_robocup_ssl_geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_metadata_getter(int index);
namespace RoboCup2014Legacy {
namespace Geometry {
class SSL_GeometryData;
struct SSL_GeometryDataDefaultTypeInternal;
extern SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;
class SSL_GeometryFieldSize;
struct SSL_GeometryFieldSizeDefaultTypeInternal;
extern SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;
}  // namespace Geometry
}  // namespace RoboCup2014Legacy
PROTOBUF_NAMESPACE_OPEN
template<> ::RoboCup2014Legacy::Geometry::SSL_GeometryData* Arena::CreateMaybeMessage<::RoboCup2014Legacy::Geometry::SSL_GeometryData>(Arena*);
template<> ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* Arena::CreateMaybeMessage<::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoboCup2014Legacy {
namespace Geometry {

// ===================================================================

class SSL_GeometryFieldSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize) */ {
 public:
  inline SSL_GeometryFieldSize() : SSL_GeometryFieldSize(nullptr) {}
  virtual ~SSL_GeometryFieldSize();
  explicit constexpr SSL_GeometryFieldSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from);
  SSL_GeometryFieldSize(SSL_GeometryFieldSize&& from) noexcept
    : SSL_GeometryFieldSize() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryFieldSize& operator=(const SSL_GeometryFieldSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryFieldSize& operator=(SSL_GeometryFieldSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_GeometryFieldSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryFieldSize* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryFieldSize*>(
               &_SSL_GeometryFieldSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSL_GeometryFieldSize& a, SSL_GeometryFieldSize& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryFieldSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryFieldSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_GeometryFieldSize* New() const final {
    return CreateMaybeMessage<SSL_GeometryFieldSize>(nullptr);
  }

  SSL_GeometryFieldSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_GeometryFieldSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_GeometryFieldSize& from);
  void MergeFrom(const SSL_GeometryFieldSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryFieldSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize";
  }
  protected:
  explicit SSL_GeometryFieldSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineWidthFieldNumber = 1,
    kFieldLengthFieldNumber = 2,
    kFieldWidthFieldNumber = 3,
    kBoundaryWidthFieldNumber = 4,
    kRefereeWidthFieldNumber = 5,
    kGoalWidthFieldNumber = 6,
    kGoalDepthFieldNumber = 7,
    kGoalWallWidthFieldNumber = 8,
    kCenterCircleRadiusFieldNumber = 9,
    kDefenseRadiusFieldNumber = 10,
    kDefenseStretchFieldNumber = 11,
    kFreeKickFromDefenseDistFieldNumber = 12,
    kPenaltySpotFromFieldLineDistFieldNumber = 13,
    kPenaltyLineFromSpotDistFieldNumber = 14,
  };
  // required int32 line_width = 1;
  bool has_line_width() const;
  private:
  bool _internal_has_line_width() const;
  public:
  void clear_line_width();
  ::PROTOBUF_NAMESPACE_ID::int32 line_width() const;
  void set_line_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_width() const;
  void _internal_set_line_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 field_length = 2;
  bool has_field_length() const;
  private:
  bool _internal_has_field_length() const;
  public:
  void clear_field_length();
  ::PROTOBUF_NAMESPACE_ID::int32 field_length() const;
  void set_field_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_length() const;
  void _internal_set_field_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 field_width = 3;
  bool has_field_width() const;
  private:
  bool _internal_has_field_width() const;
  public:
  void clear_field_width();
  ::PROTOBUF_NAMESPACE_ID::int32 field_width() const;
  void set_field_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_width() const;
  void _internal_set_field_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 boundary_width = 4;
  bool has_boundary_width() const;
  private:
  bool _internal_has_boundary_width() const;
  public:
  void clear_boundary_width();
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_width() const;
  void set_boundary_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boundary_width() const;
  void _internal_set_boundary_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 referee_width = 5;
  bool has_referee_width() const;
  private:
  bool _internal_has_referee_width() const;
  public:
  void clear_referee_width();
  ::PROTOBUF_NAMESPACE_ID::int32 referee_width() const;
  void set_referee_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_referee_width() const;
  void _internal_set_referee_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 goal_width = 6;
  bool has_goal_width() const;
  private:
  bool _internal_has_goal_width() const;
  public:
  void clear_goal_width();
  ::PROTOBUF_NAMESPACE_ID::int32 goal_width() const;
  void set_goal_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goal_width() const;
  void _internal_set_goal_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 goal_depth = 7;
  bool has_goal_depth() const;
  private:
  bool _internal_has_goal_depth() const;
  public:
  void clear_goal_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 goal_depth() const;
  void set_goal_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goal_depth() const;
  void _internal_set_goal_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 goal_wall_width = 8;
  bool has_goal_wall_width() const;
  private:
  bool _internal_has_goal_wall_width() const;
  public:
  void clear_goal_wall_width();
  ::PROTOBUF_NAMESPACE_ID::int32 goal_wall_width() const;
  void set_goal_wall_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goal_wall_width() const;
  void _internal_set_goal_wall_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 center_circle_radius = 9;
  bool has_center_circle_radius() const;
  private:
  bool _internal_has_center_circle_radius() const;
  public:
  void clear_center_circle_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 center_circle_radius() const;
  void set_center_circle_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_center_circle_radius() const;
  void _internal_set_center_circle_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 defense_radius = 10;
  bool has_defense_radius() const;
  private:
  bool _internal_has_defense_radius() const;
  public:
  void clear_defense_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 defense_radius() const;
  void set_defense_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_defense_radius() const;
  void _internal_set_defense_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 defense_stretch = 11;
  bool has_defense_stretch() const;
  private:
  bool _internal_has_defense_stretch() const;
  public:
  void clear_defense_stretch();
  ::PROTOBUF_NAMESPACE_ID::int32 defense_stretch() const;
  void set_defense_stretch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_defense_stretch() const;
  void _internal_set_defense_stretch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 free_kick_from_defense_dist = 12;
  bool has_free_kick_from_defense_dist() const;
  private:
  bool _internal_has_free_kick_from_defense_dist() const;
  public:
  void clear_free_kick_from_defense_dist();
  ::PROTOBUF_NAMESPACE_ID::int32 free_kick_from_defense_dist() const;
  void set_free_kick_from_defense_dist(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_kick_from_defense_dist() const;
  void _internal_set_free_kick_from_defense_dist(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 penalty_spot_from_field_line_dist = 13;
  bool has_penalty_spot_from_field_line_dist() const;
  private:
  bool _internal_has_penalty_spot_from_field_line_dist() const;
  public:
  void clear_penalty_spot_from_field_line_dist();
  ::PROTOBUF_NAMESPACE_ID::int32 penalty_spot_from_field_line_dist() const;
  void set_penalty_spot_from_field_line_dist(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_penalty_spot_from_field_line_dist() const;
  void _internal_set_penalty_spot_from_field_line_dist(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 penalty_line_from_spot_dist = 14;
  bool has_penalty_line_from_spot_dist() const;
  private:
  bool _internal_has_penalty_line_from_spot_dist() const;
  public:
  void clear_penalty_line_from_spot_dist();
  ::PROTOBUF_NAMESPACE_ID::int32 penalty_line_from_spot_dist() const;
  void set_penalty_line_from_spot_dist(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_penalty_line_from_spot_dist() const;
  void _internal_set_penalty_line_from_spot_dist(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 referee_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 goal_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 goal_depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 goal_wall_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 center_circle_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 defense_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 defense_stretch_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_kick_from_defense_dist_;
  ::PROTOBUF_NAMESPACE_ID::int32 penalty_spot_from_field_line_dist_;
  ::PROTOBUF_NAMESPACE_ID::int32 penalty_line_from_spot_dist_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoboCup2014Legacy.Geometry.SSL_GeometryData) */ {
 public:
  inline SSL_GeometryData() : SSL_GeometryData(nullptr) {}
  virtual ~SSL_GeometryData();
  explicit constexpr SSL_GeometryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_GeometryData(const SSL_GeometryData& from);
  SSL_GeometryData(SSL_GeometryData&& from) noexcept
    : SSL_GeometryData() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryData& operator=(const SSL_GeometryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryData& operator=(SSL_GeometryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_GeometryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryData* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryData*>(
               &_SSL_GeometryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSL_GeometryData& a, SSL_GeometryData& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_GeometryData* New() const final {
    return CreateMaybeMessage<SSL_GeometryData>(nullptr);
  }

  SSL_GeometryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_GeometryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_GeometryData& from);
  void MergeFrom(const SSL_GeometryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoboCup2014Legacy.Geometry.SSL_GeometryData";
  }
  protected:
  explicit SSL_GeometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  int calib_size() const;
  private:
  int _internal_calib_size() const;
  public:
  void clear_calib();
  ::SSL_GeometryCameraCalibration* mutable_calib(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
      mutable_calib();
  private:
  const ::SSL_GeometryCameraCalibration& _internal_calib(int index) const;
  ::SSL_GeometryCameraCalibration* _internal_add_calib();
  public:
  const ::SSL_GeometryCameraCalibration& calib(int index) const;
  ::SSL_GeometryCameraCalibration* add_calib();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
      calib() const;

  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize& field() const;
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* release_field();
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* mutable_field();
  void set_allocated_field(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* field);
  private:
  const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize& _internal_field() const;
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* _internal_mutable_field();
  public:
  void unsafe_arena_set_allocated_field(
      ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* field);
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* unsafe_arena_release_field();

  // @@protoc_insertion_point(class_scope:RoboCup2014Legacy.Geometry.SSL_GeometryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration > calib_;
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* field_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSL_GeometryFieldSize

// required int32 line_width = 1;
inline bool SSL_GeometryFieldSize::_internal_has_line_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_line_width() const {
  return _internal_has_line_width();
}
inline void SSL_GeometryFieldSize::clear_line_width() {
  line_width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_line_width() const {
  return line_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::line_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.line_width)
  return _internal_line_width();
}
inline void SSL_GeometryFieldSize::_internal_set_line_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  line_width_ = value;
}
inline void SSL_GeometryFieldSize::set_line_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.line_width)
}

// required int32 field_length = 2;
inline bool SSL_GeometryFieldSize::_internal_has_field_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_field_length() const {
  return _internal_has_field_length();
}
inline void SSL_GeometryFieldSize::clear_field_length() {
  field_length_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_field_length() const {
  return field_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.field_length)
  return _internal_field_length();
}
inline void SSL_GeometryFieldSize::_internal_set_field_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  field_length_ = value;
}
inline void SSL_GeometryFieldSize::set_field_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_length(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.field_length)
}

// required int32 field_width = 3;
inline bool SSL_GeometryFieldSize::_internal_has_field_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_field_width() const {
  return _internal_has_field_width();
}
inline void SSL_GeometryFieldSize::clear_field_width() {
  field_width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_field_width() const {
  return field_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.field_width)
  return _internal_field_width();
}
inline void SSL_GeometryFieldSize::_internal_set_field_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  field_width_ = value;
}
inline void SSL_GeometryFieldSize::set_field_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_width(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.field_width)
}

// required int32 boundary_width = 4;
inline bool SSL_GeometryFieldSize::_internal_has_boundary_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_boundary_width() const {
  return _internal_has_boundary_width();
}
inline void SSL_GeometryFieldSize::clear_boundary_width() {
  boundary_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_boundary_width() const {
  return boundary_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.boundary_width)
  return _internal_boundary_width();
}
inline void SSL_GeometryFieldSize::_internal_set_boundary_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  boundary_width_ = value;
}
inline void SSL_GeometryFieldSize::set_boundary_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boundary_width(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.boundary_width)
}

// required int32 referee_width = 5;
inline bool SSL_GeometryFieldSize::_internal_has_referee_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_referee_width() const {
  return _internal_has_referee_width();
}
inline void SSL_GeometryFieldSize::clear_referee_width() {
  referee_width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_referee_width() const {
  return referee_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::referee_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.referee_width)
  return _internal_referee_width();
}
inline void SSL_GeometryFieldSize::_internal_set_referee_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  referee_width_ = value;
}
inline void SSL_GeometryFieldSize::set_referee_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_referee_width(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.referee_width)
}

// required int32 goal_width = 6;
inline bool SSL_GeometryFieldSize::_internal_has_goal_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_width() const {
  return _internal_has_goal_width();
}
inline void SSL_GeometryFieldSize::clear_goal_width() {
  goal_width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_goal_width() const {
  return goal_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_width)
  return _internal_goal_width();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  goal_width_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goal_width(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_width)
}

// required int32 goal_depth = 7;
inline bool SSL_GeometryFieldSize::_internal_has_goal_depth() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_depth() const {
  return _internal_has_goal_depth();
}
inline void SSL_GeometryFieldSize::clear_goal_depth() {
  goal_depth_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_goal_depth() const {
  return goal_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_depth)
  return _internal_goal_depth();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  goal_depth_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goal_depth(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_depth)
}

// required int32 goal_wall_width = 8;
inline bool SSL_GeometryFieldSize::_internal_has_goal_wall_width() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_wall_width() const {
  return _internal_has_goal_wall_width();
}
inline void SSL_GeometryFieldSize::clear_goal_wall_width() {
  goal_wall_width_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_goal_wall_width() const {
  return goal_wall_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::goal_wall_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_wall_width)
  return _internal_goal_wall_width();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_wall_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  goal_wall_width_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_wall_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goal_wall_width(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_wall_width)
}

// required int32 center_circle_radius = 9;
inline bool SSL_GeometryFieldSize::_internal_has_center_circle_radius() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_center_circle_radius() const {
  return _internal_has_center_circle_radius();
}
inline void SSL_GeometryFieldSize::clear_center_circle_radius() {
  center_circle_radius_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_center_circle_radius() const {
  return center_circle_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::center_circle_radius() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.center_circle_radius)
  return _internal_center_circle_radius();
}
inline void SSL_GeometryFieldSize::_internal_set_center_circle_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  center_circle_radius_ = value;
}
inline void SSL_GeometryFieldSize::set_center_circle_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_center_circle_radius(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.center_circle_radius)
}

// required int32 defense_radius = 10;
inline bool SSL_GeometryFieldSize::_internal_has_defense_radius() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_defense_radius() const {
  return _internal_has_defense_radius();
}
inline void SSL_GeometryFieldSize::clear_defense_radius() {
  defense_radius_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_defense_radius() const {
  return defense_radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::defense_radius() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.defense_radius)
  return _internal_defense_radius();
}
inline void SSL_GeometryFieldSize::_internal_set_defense_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  defense_radius_ = value;
}
inline void SSL_GeometryFieldSize::set_defense_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_defense_radius(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.defense_radius)
}

// required int32 defense_stretch = 11;
inline bool SSL_GeometryFieldSize::_internal_has_defense_stretch() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_defense_stretch() const {
  return _internal_has_defense_stretch();
}
inline void SSL_GeometryFieldSize::clear_defense_stretch() {
  defense_stretch_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_defense_stretch() const {
  return defense_stretch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::defense_stretch() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.defense_stretch)
  return _internal_defense_stretch();
}
inline void SSL_GeometryFieldSize::_internal_set_defense_stretch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  defense_stretch_ = value;
}
inline void SSL_GeometryFieldSize::set_defense_stretch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_defense_stretch(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.defense_stretch)
}

// required int32 free_kick_from_defense_dist = 12;
inline bool SSL_GeometryFieldSize::_internal_has_free_kick_from_defense_dist() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_free_kick_from_defense_dist() const {
  return _internal_has_free_kick_from_defense_dist();
}
inline void SSL_GeometryFieldSize::clear_free_kick_from_defense_dist() {
  free_kick_from_defense_dist_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_free_kick_from_defense_dist() const {
  return free_kick_from_defense_dist_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::free_kick_from_defense_dist() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.free_kick_from_defense_dist)
  return _internal_free_kick_from_defense_dist();
}
inline void SSL_GeometryFieldSize::_internal_set_free_kick_from_defense_dist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  free_kick_from_defense_dist_ = value;
}
inline void SSL_GeometryFieldSize::set_free_kick_from_defense_dist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_kick_from_defense_dist(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.free_kick_from_defense_dist)
}

// required int32 penalty_spot_from_field_line_dist = 13;
inline bool SSL_GeometryFieldSize::_internal_has_penalty_spot_from_field_line_dist() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_penalty_spot_from_field_line_dist() const {
  return _internal_has_penalty_spot_from_field_line_dist();
}
inline void SSL_GeometryFieldSize::clear_penalty_spot_from_field_line_dist() {
  penalty_spot_from_field_line_dist_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_penalty_spot_from_field_line_dist() const {
  return penalty_spot_from_field_line_dist_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::penalty_spot_from_field_line_dist() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.penalty_spot_from_field_line_dist)
  return _internal_penalty_spot_from_field_line_dist();
}
inline void SSL_GeometryFieldSize::_internal_set_penalty_spot_from_field_line_dist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  penalty_spot_from_field_line_dist_ = value;
}
inline void SSL_GeometryFieldSize::set_penalty_spot_from_field_line_dist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_penalty_spot_from_field_line_dist(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.penalty_spot_from_field_line_dist)
}

// required int32 penalty_line_from_spot_dist = 14;
inline bool SSL_GeometryFieldSize::_internal_has_penalty_line_from_spot_dist() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_penalty_line_from_spot_dist() const {
  return _internal_has_penalty_line_from_spot_dist();
}
inline void SSL_GeometryFieldSize::clear_penalty_line_from_spot_dist() {
  penalty_line_from_spot_dist_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_penalty_line_from_spot_dist() const {
  return penalty_line_from_spot_dist_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::penalty_line_from_spot_dist() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.penalty_line_from_spot_dist)
  return _internal_penalty_line_from_spot_dist();
}
inline void SSL_GeometryFieldSize::_internal_set_penalty_line_from_spot_dist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  penalty_line_from_spot_dist_ = value;
}
inline void SSL_GeometryFieldSize::set_penalty_line_from_spot_dist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_penalty_line_from_spot_dist(value);
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.penalty_line_from_spot_dist)
}

// -------------------------------------------------------------------

// SSL_GeometryData

// required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
inline bool SSL_GeometryData::_internal_has_field() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || field_ != nullptr);
  return value;
}
inline bool SSL_GeometryData::has_field() const {
  return _internal_has_field();
}
inline void SSL_GeometryData::clear_field() {
  if (field_ != nullptr) field_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize& SSL_GeometryData::_internal_field() const {
  const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* p = field_;
  return p != nullptr ? *p : reinterpret_cast<const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize&>(
      ::RoboCup2014Legacy::Geometry::_SSL_GeometryFieldSize_default_instance_);
}
inline const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryData.field)
  return _internal_field();
}
inline void SSL_GeometryData::unsafe_arena_set_allocated_field(
    ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* field) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_);
  }
  field_ = field;
  if (field) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCup2014Legacy.Geometry.SSL_GeometryData.field)
}
inline ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  _has_bits_[0] &= ~0x00000001u;
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* temp = field_;
  field_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* SSL_GeometryData::unsafe_arena_release_field() {
  // @@protoc_insertion_point(field_release:RoboCup2014Legacy.Geometry.SSL_GeometryData.field)
  _has_bits_[0] &= ~0x00000001u;
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* SSL_GeometryData::_internal_mutable_field() {
  _has_bits_[0] |= 0x00000001u;
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize>(GetArena());
    field_ = p;
  }
  return field_;
}
inline ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  // @@protoc_insertion_point(field_mutable:RoboCup2014Legacy.Geometry.SSL_GeometryData.field)
  return _internal_mutable_field();
}
inline void SSL_GeometryData::set_allocated_field(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(field);
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:RoboCup2014Legacy.Geometry.SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
inline int SSL_GeometryData::_internal_calib_size() const {
  return calib_.size();
}
inline int SSL_GeometryData::calib_size() const {
  return _internal_calib_size();
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return calib_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return &calib_;
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::_internal_calib(int index) const {
  return calib_.Get(index);
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return _internal_calib(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::_internal_add_calib() {
  return calib_.Add();
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  // @@protoc_insertion_point(field_add:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return _internal_add_calib();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return calib_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Geometry
}  // namespace RoboCup2014Legacy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto
