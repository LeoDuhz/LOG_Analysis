// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_team.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fteam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fteam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_game_event_2019.pb.h"
#include "ssl_game_controller_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fteam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_metadata_getter(int index);
class AdvantageChoice;
struct AdvantageChoiceDefaultTypeInternal;
extern AdvantageChoiceDefaultTypeInternal _AdvantageChoice_default_instance_;
class ControllerToTeam;
struct ControllerToTeamDefaultTypeInternal;
extern ControllerToTeamDefaultTypeInternal _ControllerToTeam_default_instance_;
class TeamRegistration;
struct TeamRegistrationDefaultTypeInternal;
extern TeamRegistrationDefaultTypeInternal _TeamRegistration_default_instance_;
class TeamToController;
struct TeamToControllerDefaultTypeInternal;
extern TeamToControllerDefaultTypeInternal _TeamToController_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AdvantageChoice* Arena::CreateMaybeMessage<::AdvantageChoice>(Arena*);
template<> ::ControllerToTeam* Arena::CreateMaybeMessage<::ControllerToTeam>(Arena*);
template<> ::TeamRegistration* Arena::CreateMaybeMessage<::TeamRegistration>(Arena*);
template<> ::TeamToController* Arena::CreateMaybeMessage<::TeamToController>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TeamToController_AdvantageResponse : int {
  TeamToController_AdvantageResponse_UNDECIDED = 0,
  TeamToController_AdvantageResponse_STOP = 0,
  TeamToController_AdvantageResponse_CONTINUE = 1
};
bool TeamToController_AdvantageResponse_IsValid(int value);
constexpr TeamToController_AdvantageResponse TeamToController_AdvantageResponse_AdvantageResponse_MIN = TeamToController_AdvantageResponse_UNDECIDED;
constexpr TeamToController_AdvantageResponse TeamToController_AdvantageResponse_AdvantageResponse_MAX = TeamToController_AdvantageResponse_CONTINUE;
constexpr int TeamToController_AdvantageResponse_AdvantageResponse_ARRAYSIZE = TeamToController_AdvantageResponse_AdvantageResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamToController_AdvantageResponse_descriptor();
template<typename T>
inline const std::string& TeamToController_AdvantageResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeamToController_AdvantageResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeamToController_AdvantageResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeamToController_AdvantageResponse_descriptor(), enum_t_value);
}
inline bool TeamToController_AdvantageResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TeamToController_AdvantageResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeamToController_AdvantageResponse>(
    TeamToController_AdvantageResponse_descriptor(), name, value);
}
enum AdvantageChoice_Foul : int {
  AdvantageChoice_Foul_UNKNOWN = 0,
  AdvantageChoice_Foul_COLLISION = 1,
  AdvantageChoice_Foul_PUSHING = 2,
  AdvantageChoice_Foul_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA = 3
};
bool AdvantageChoice_Foul_IsValid(int value);
constexpr AdvantageChoice_Foul AdvantageChoice_Foul_Foul_MIN = AdvantageChoice_Foul_UNKNOWN;
constexpr AdvantageChoice_Foul AdvantageChoice_Foul_Foul_MAX = AdvantageChoice_Foul_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
constexpr int AdvantageChoice_Foul_Foul_ARRAYSIZE = AdvantageChoice_Foul_Foul_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdvantageChoice_Foul_descriptor();
template<typename T>
inline const std::string& AdvantageChoice_Foul_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdvantageChoice_Foul>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdvantageChoice_Foul_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdvantageChoice_Foul_descriptor(), enum_t_value);
}
inline bool AdvantageChoice_Foul_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdvantageChoice_Foul* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdvantageChoice_Foul>(
    AdvantageChoice_Foul_descriptor(), name, value);
}
// ===================================================================

class TeamRegistration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeamRegistration) */ {
 public:
  inline TeamRegistration() : TeamRegistration(nullptr) {}
  virtual ~TeamRegistration();
  explicit constexpr TeamRegistration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamRegistration(const TeamRegistration& from);
  TeamRegistration(TeamRegistration&& from) noexcept
    : TeamRegistration() {
    *this = ::std::move(from);
  }

  inline TeamRegistration& operator=(const TeamRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamRegistration& operator=(TeamRegistration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamRegistration& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamRegistration* internal_default_instance() {
    return reinterpret_cast<const TeamRegistration*>(
               &_TeamRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TeamRegistration& a, TeamRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamRegistration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamRegistration* New() const final {
    return CreateMaybeMessage<TeamRegistration>(nullptr);
  }

  TeamRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamRegistration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamRegistration& from);
  void MergeFrom(const TeamRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamRegistration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeamRegistration";
  }
  protected:
  explicit TeamRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // required string team_name = 1;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional .Signature signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);
  private:
  const ::Signature& _internal_signature() const;
  ::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::Signature* signature);
  ::Signature* unsafe_arena_release_signature();

  // @@protoc_insertion_point(class_scope:TeamRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::Signature* signature_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto;
};
// -------------------------------------------------------------------

class TeamToController PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeamToController) */ {
 public:
  inline TeamToController() : TeamToController(nullptr) {}
  virtual ~TeamToController();
  explicit constexpr TeamToController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamToController(const TeamToController& from);
  TeamToController(TeamToController&& from) noexcept
    : TeamToController() {
    *this = ::std::move(from);
  }

  inline TeamToController& operator=(const TeamToController& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamToController& operator=(TeamToController&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamToController& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kDesiredKeeper = 2,
    kAdvantageResponse = 3,
    kSubstituteBot = 4,
    kPing = 5,
    MSG_NOT_SET = 0,
  };

  static inline const TeamToController* internal_default_instance() {
    return reinterpret_cast<const TeamToController*>(
               &_TeamToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TeamToController& a, TeamToController& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamToController* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamToController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamToController* New() const final {
    return CreateMaybeMessage<TeamToController>(nullptr);
  }

  TeamToController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamToController>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamToController& from);
  void MergeFrom(const TeamToController& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamToController* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeamToController";
  }
  protected:
  explicit TeamToController(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef TeamToController_AdvantageResponse AdvantageResponse;
  static constexpr AdvantageResponse UNDECIDED =
    TeamToController_AdvantageResponse_UNDECIDED;
  static constexpr AdvantageResponse STOP =
    TeamToController_AdvantageResponse_STOP;
  static constexpr AdvantageResponse CONTINUE =
    TeamToController_AdvantageResponse_CONTINUE;
  static inline bool AdvantageResponse_IsValid(int value) {
    return TeamToController_AdvantageResponse_IsValid(value);
  }
  static constexpr AdvantageResponse AdvantageResponse_MIN =
    TeamToController_AdvantageResponse_AdvantageResponse_MIN;
  static constexpr AdvantageResponse AdvantageResponse_MAX =
    TeamToController_AdvantageResponse_AdvantageResponse_MAX;
  static constexpr int AdvantageResponse_ARRAYSIZE =
    TeamToController_AdvantageResponse_AdvantageResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AdvantageResponse_descriptor() {
    return TeamToController_AdvantageResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& AdvantageResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AdvantageResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AdvantageResponse_Name.");
    return TeamToController_AdvantageResponse_Name(enum_t_value);
  }
  static inline bool AdvantageResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AdvantageResponse* value) {
    return TeamToController_AdvantageResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kDesiredKeeperFieldNumber = 2,
    kAdvantageResponseFieldNumber = 3,
    kSubstituteBotFieldNumber = 4,
    kPingFieldNumber = 5,
  };
  // optional .Signature signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);
  private:
  const ::Signature& _internal_signature() const;
  ::Signature* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::Signature* signature);
  ::Signature* unsafe_arena_release_signature();

  // int32 desired_keeper = 2;
  bool has_desired_keeper() const;
  private:
  bool _internal_has_desired_keeper() const;
  public:
  void clear_desired_keeper();
  ::PROTOBUF_NAMESPACE_ID::int32 desired_keeper() const;
  void set_desired_keeper(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_desired_keeper() const;
  void _internal_set_desired_keeper(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .TeamToController.AdvantageResponse advantage_response = 3;
  bool has_advantage_response() const;
  private:
  bool _internal_has_advantage_response() const;
  public:
  void clear_advantage_response();
  ::TeamToController_AdvantageResponse advantage_response() const;
  void set_advantage_response(::TeamToController_AdvantageResponse value);
  private:
  ::TeamToController_AdvantageResponse _internal_advantage_response() const;
  void _internal_set_advantage_response(::TeamToController_AdvantageResponse value);
  public:

  // bool substitute_bot = 4;
  bool has_substitute_bot() const;
  private:
  bool _internal_has_substitute_bot() const;
  public:
  void clear_substitute_bot();
  bool substitute_bot() const;
  void set_substitute_bot(bool value);
  private:
  bool _internal_substitute_bot() const;
  void _internal_set_substitute_bot(bool value);
  public:

  // bool ping = 5;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  bool ping() const;
  void set_ping(bool value);
  private:
  bool _internal_ping() const;
  void _internal_set_ping(bool value);
  public:

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:TeamToController)
 private:
  class _Internal;
  void set_has_desired_keeper();
  void set_has_advantage_response();
  void set_has_substitute_bot();
  void set_has_ping();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Signature* signature_;
  union MsgUnion {
    constexpr MsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 desired_keeper_;
    int advantage_response_;
    bool substitute_bot_;
    bool ping_;
  } msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto;
};
// -------------------------------------------------------------------

class ControllerToTeam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerToTeam) */ {
 public:
  inline ControllerToTeam() : ControllerToTeam(nullptr) {}
  virtual ~ControllerToTeam();
  explicit constexpr ControllerToTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerToTeam(const ControllerToTeam& from);
  ControllerToTeam(ControllerToTeam&& from) noexcept
    : ControllerToTeam() {
    *this = ::std::move(from);
  }

  inline ControllerToTeam& operator=(const ControllerToTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerToTeam& operator=(ControllerToTeam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerToTeam& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kControllerReply = 1,
    kAdvantageChoice = 2,
    MSG_NOT_SET = 0,
  };

  static inline const ControllerToTeam* internal_default_instance() {
    return reinterpret_cast<const ControllerToTeam*>(
               &_ControllerToTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerToTeam& a, ControllerToTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerToTeam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerToTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerToTeam* New() const final {
    return CreateMaybeMessage<ControllerToTeam>(nullptr);
  }

  ControllerToTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerToTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerToTeam& from);
  void MergeFrom(const ControllerToTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerToTeam";
  }
  protected:
  explicit ControllerToTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerReplyFieldNumber = 1,
    kAdvantageChoiceFieldNumber = 2,
  };
  // .ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  private:
  bool _internal_has_controller_reply() const;
  public:
  void clear_controller_reply();
  const ::ControllerReply& controller_reply() const;
  ::ControllerReply* release_controller_reply();
  ::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::ControllerReply* controller_reply);
  private:
  const ::ControllerReply& _internal_controller_reply() const;
  ::ControllerReply* _internal_mutable_controller_reply();
  public:
  void unsafe_arena_set_allocated_controller_reply(
      ::ControllerReply* controller_reply);
  ::ControllerReply* unsafe_arena_release_controller_reply();

  // .AdvantageChoice advantage_choice = 2;
  bool has_advantage_choice() const;
  private:
  bool _internal_has_advantage_choice() const;
  public:
  void clear_advantage_choice();
  const ::AdvantageChoice& advantage_choice() const;
  ::AdvantageChoice* release_advantage_choice();
  ::AdvantageChoice* mutable_advantage_choice();
  void set_allocated_advantage_choice(::AdvantageChoice* advantage_choice);
  private:
  const ::AdvantageChoice& _internal_advantage_choice() const;
  ::AdvantageChoice* _internal_mutable_advantage_choice();
  public:
  void unsafe_arena_set_allocated_advantage_choice(
      ::AdvantageChoice* advantage_choice);
  ::AdvantageChoice* unsafe_arena_release_advantage_choice();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:ControllerToTeam)
 private:
  class _Internal;
  void set_has_controller_reply();
  void set_has_advantage_choice();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    constexpr MsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ControllerReply* controller_reply_;
    ::AdvantageChoice* advantage_choice_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto;
};
// -------------------------------------------------------------------

class AdvantageChoice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AdvantageChoice) */ {
 public:
  inline AdvantageChoice() : AdvantageChoice(nullptr) {}
  virtual ~AdvantageChoice();
  explicit constexpr AdvantageChoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdvantageChoice(const AdvantageChoice& from);
  AdvantageChoice(AdvantageChoice&& from) noexcept
    : AdvantageChoice() {
    *this = ::std::move(from);
  }

  inline AdvantageChoice& operator=(const AdvantageChoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvantageChoice& operator=(AdvantageChoice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdvantageChoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdvantageChoice* internal_default_instance() {
    return reinterpret_cast<const AdvantageChoice*>(
               &_AdvantageChoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AdvantageChoice& a, AdvantageChoice& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvantageChoice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvantageChoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvantageChoice* New() const final {
    return CreateMaybeMessage<AdvantageChoice>(nullptr);
  }

  AdvantageChoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvantageChoice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdvantageChoice& from);
  void MergeFrom(const AdvantageChoice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvantageChoice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AdvantageChoice";
  }
  protected:
  explicit AdvantageChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AdvantageChoice_Foul Foul;
  static constexpr Foul UNKNOWN =
    AdvantageChoice_Foul_UNKNOWN;
  static constexpr Foul COLLISION =
    AdvantageChoice_Foul_COLLISION;
  static constexpr Foul PUSHING =
    AdvantageChoice_Foul_PUSHING;
  static constexpr Foul ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA =
    AdvantageChoice_Foul_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
  static inline bool Foul_IsValid(int value) {
    return AdvantageChoice_Foul_IsValid(value);
  }
  static constexpr Foul Foul_MIN =
    AdvantageChoice_Foul_Foul_MIN;
  static constexpr Foul Foul_MAX =
    AdvantageChoice_Foul_Foul_MAX;
  static constexpr int Foul_ARRAYSIZE =
    AdvantageChoice_Foul_Foul_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Foul_descriptor() {
    return AdvantageChoice_Foul_descriptor();
  }
  template<typename T>
  static inline const std::string& Foul_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Foul>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Foul_Name.");
    return AdvantageChoice_Foul_Name(enum_t_value);
  }
  static inline bool Foul_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Foul* value) {
    return AdvantageChoice_Foul_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBotCrashUniqueFieldNumber = 2,
    kBotPushedBotFieldNumber = 3,
    kAttackerTouchedOpponentInDefenseAreaFieldNumber = 4,
    kFoulFieldNumber = 1,
  };
  // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
  bool has_bot_crash_unique() const;
  private:
  bool _internal_has_bot_crash_unique() const;
  public:
  void clear_bot_crash_unique();
  const ::GameEvent_BotCrashUnique& bot_crash_unique() const;
  ::GameEvent_BotCrashUnique* release_bot_crash_unique();
  ::GameEvent_BotCrashUnique* mutable_bot_crash_unique();
  void set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique);
  private:
  const ::GameEvent_BotCrashUnique& _internal_bot_crash_unique() const;
  ::GameEvent_BotCrashUnique* _internal_mutable_bot_crash_unique();
  public:
  void unsafe_arena_set_allocated_bot_crash_unique(
      ::GameEvent_BotCrashUnique* bot_crash_unique);
  ::GameEvent_BotCrashUnique* unsafe_arena_release_bot_crash_unique();

  // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
  bool has_bot_pushed_bot() const;
  private:
  bool _internal_has_bot_pushed_bot() const;
  public:
  void clear_bot_pushed_bot();
  const ::GameEvent_BotPushedBot& bot_pushed_bot() const;
  ::GameEvent_BotPushedBot* release_bot_pushed_bot();
  ::GameEvent_BotPushedBot* mutable_bot_pushed_bot();
  void set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot);
  private:
  const ::GameEvent_BotPushedBot& _internal_bot_pushed_bot() const;
  ::GameEvent_BotPushedBot* _internal_mutable_bot_pushed_bot();
  public:
  void unsafe_arena_set_allocated_bot_pushed_bot(
      ::GameEvent_BotPushedBot* bot_pushed_bot);
  ::GameEvent_BotPushedBot* unsafe_arena_release_bot_pushed_bot();

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
  bool has_attacker_touched_opponent_in_defense_area() const;
  private:
  bool _internal_has_attacker_touched_opponent_in_defense_area() const;
  public:
  void clear_attacker_touched_opponent_in_defense_area();
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area() const;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* release_attacker_touched_opponent_in_defense_area();
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* mutable_attacker_touched_opponent_in_defense_area();
  void set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area);
  private:
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea& _internal_attacker_touched_opponent_in_defense_area() const;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* _internal_mutable_attacker_touched_opponent_in_defense_area();
  public:
  void unsafe_arena_set_allocated_attacker_touched_opponent_in_defense_area(
      ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area);
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* unsafe_arena_release_attacker_touched_opponent_in_defense_area();

  // required .AdvantageChoice.Foul foul = 1;
  bool has_foul() const;
  private:
  bool _internal_has_foul() const;
  public:
  void clear_foul();
  ::AdvantageChoice_Foul foul() const;
  void set_foul(::AdvantageChoice_Foul value);
  private:
  ::AdvantageChoice_Foul _internal_foul() const;
  void _internal_set_foul(::AdvantageChoice_Foul value);
  public:

  // @@protoc_insertion_point(class_scope:AdvantageChoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::GameEvent_BotCrashUnique* bot_crash_unique_;
  ::GameEvent_BotPushedBot* bot_pushed_bot_;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_;
  int foul_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeamRegistration

// required string team_name = 1;
inline bool TeamRegistration::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamRegistration::has_team_name() const {
  return _internal_has_team_name();
}
inline void TeamRegistration::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamRegistration::team_name() const {
  // @@protoc_insertion_point(field_get:TeamRegistration.team_name)
  return _internal_team_name();
}
inline void TeamRegistration::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:TeamRegistration.team_name)
}
inline std::string* TeamRegistration::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:TeamRegistration.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& TeamRegistration::_internal_team_name() const {
  return team_name_.Get();
}
inline void TeamRegistration::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TeamRegistration::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TeamRegistration.team_name)
}
inline void TeamRegistration::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TeamRegistration.team_name)
}
inline void TeamRegistration::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TeamRegistration.team_name)
}
inline std::string* TeamRegistration::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TeamRegistration::release_team_name() {
  // @@protoc_insertion_point(field_release:TeamRegistration.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TeamRegistration::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TeamRegistration.team_name)
}

// optional .Signature signature = 2;
inline bool TeamRegistration::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || signature_ != nullptr);
  return value;
}
inline bool TeamRegistration::has_signature() const {
  return _internal_has_signature();
}
inline const ::Signature& TeamRegistration::_internal_signature() const {
  const ::Signature* p = signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Signature&>(
      ::_Signature_default_instance_);
}
inline const ::Signature& TeamRegistration::signature() const {
  // @@protoc_insertion_point(field_get:TeamRegistration.signature)
  return _internal_signature();
}
inline void TeamRegistration::unsafe_arena_set_allocated_signature(
    ::Signature* signature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamRegistration.signature)
}
inline ::Signature* TeamRegistration::release_signature() {
  _has_bits_[0] &= ~0x00000002u;
  ::Signature* temp = signature_;
  signature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Signature* TeamRegistration::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:TeamRegistration.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::Signature* TeamRegistration::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArena());
    signature_ = p;
  }
  return signature_;
}
inline ::Signature* TeamRegistration::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TeamRegistration.signature)
  return _internal_mutable_signature();
}
inline void TeamRegistration::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature)->GetArena();
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:TeamRegistration.signature)
}

// -------------------------------------------------------------------

// TeamToController

// optional .Signature signature = 1;
inline bool TeamToController::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || signature_ != nullptr);
  return value;
}
inline bool TeamToController::has_signature() const {
  return _internal_has_signature();
}
inline const ::Signature& TeamToController::_internal_signature() const {
  const ::Signature* p = signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::Signature&>(
      ::_Signature_default_instance_);
}
inline const ::Signature& TeamToController::signature() const {
  // @@protoc_insertion_point(field_get:TeamToController.signature)
  return _internal_signature();
}
inline void TeamToController::unsafe_arena_set_allocated_signature(
    ::Signature* signature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamToController.signature)
}
inline ::Signature* TeamToController::release_signature() {
  _has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = signature_;
  signature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Signature* TeamToController::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:TeamToController.signature)
  _has_bits_[0] &= ~0x00000001u;
  ::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::Signature* TeamToController::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Signature>(GetArena());
    signature_ = p;
  }
  return signature_;
}
inline ::Signature* TeamToController::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:TeamToController.signature)
  return _internal_mutable_signature();
}
inline void TeamToController::set_allocated_signature(::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature)->GetArena();
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:TeamToController.signature)
}

// int32 desired_keeper = 2;
inline bool TeamToController::_internal_has_desired_keeper() const {
  return msg_case() == kDesiredKeeper;
}
inline bool TeamToController::has_desired_keeper() const {
  return _internal_has_desired_keeper();
}
inline void TeamToController::set_has_desired_keeper() {
  _oneof_case_[0] = kDesiredKeeper;
}
inline void TeamToController::clear_desired_keeper() {
  if (_internal_has_desired_keeper()) {
    msg_.desired_keeper_ = 0;
    clear_has_msg();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TeamToController::_internal_desired_keeper() const {
  if (_internal_has_desired_keeper()) {
    return msg_.desired_keeper_;
  }
  return 0;
}
inline void TeamToController::_internal_set_desired_keeper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_desired_keeper()) {
    clear_msg();
    set_has_desired_keeper();
  }
  msg_.desired_keeper_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TeamToController::desired_keeper() const {
  // @@protoc_insertion_point(field_get:TeamToController.desired_keeper)
  return _internal_desired_keeper();
}
inline void TeamToController::set_desired_keeper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_desired_keeper(value);
  // @@protoc_insertion_point(field_set:TeamToController.desired_keeper)
}

// .TeamToController.AdvantageResponse advantage_response = 3;
inline bool TeamToController::_internal_has_advantage_response() const {
  return msg_case() == kAdvantageResponse;
}
inline bool TeamToController::has_advantage_response() const {
  return _internal_has_advantage_response();
}
inline void TeamToController::set_has_advantage_response() {
  _oneof_case_[0] = kAdvantageResponse;
}
inline void TeamToController::clear_advantage_response() {
  if (_internal_has_advantage_response()) {
    msg_.advantage_response_ = 0;
    clear_has_msg();
  }
}
inline ::TeamToController_AdvantageResponse TeamToController::_internal_advantage_response() const {
  if (_internal_has_advantage_response()) {
    return static_cast< ::TeamToController_AdvantageResponse >(msg_.advantage_response_);
  }
  return static_cast< ::TeamToController_AdvantageResponse >(0);
}
inline ::TeamToController_AdvantageResponse TeamToController::advantage_response() const {
  // @@protoc_insertion_point(field_get:TeamToController.advantage_response)
  return _internal_advantage_response();
}
inline void TeamToController::_internal_set_advantage_response(::TeamToController_AdvantageResponse value) {
  assert(::TeamToController_AdvantageResponse_IsValid(value));
  if (!_internal_has_advantage_response()) {
    clear_msg();
    set_has_advantage_response();
  }
  msg_.advantage_response_ = value;
}
inline void TeamToController::set_advantage_response(::TeamToController_AdvantageResponse value) {
  // @@protoc_insertion_point(field_set:TeamToController.advantage_response)
  _internal_set_advantage_response(value);
}

// bool substitute_bot = 4;
inline bool TeamToController::_internal_has_substitute_bot() const {
  return msg_case() == kSubstituteBot;
}
inline bool TeamToController::has_substitute_bot() const {
  return _internal_has_substitute_bot();
}
inline void TeamToController::set_has_substitute_bot() {
  _oneof_case_[0] = kSubstituteBot;
}
inline void TeamToController::clear_substitute_bot() {
  if (_internal_has_substitute_bot()) {
    msg_.substitute_bot_ = false;
    clear_has_msg();
  }
}
inline bool TeamToController::_internal_substitute_bot() const {
  if (_internal_has_substitute_bot()) {
    return msg_.substitute_bot_;
  }
  return false;
}
inline void TeamToController::_internal_set_substitute_bot(bool value) {
  if (!_internal_has_substitute_bot()) {
    clear_msg();
    set_has_substitute_bot();
  }
  msg_.substitute_bot_ = value;
}
inline bool TeamToController::substitute_bot() const {
  // @@protoc_insertion_point(field_get:TeamToController.substitute_bot)
  return _internal_substitute_bot();
}
inline void TeamToController::set_substitute_bot(bool value) {
  _internal_set_substitute_bot(value);
  // @@protoc_insertion_point(field_set:TeamToController.substitute_bot)
}

// bool ping = 5;
inline bool TeamToController::_internal_has_ping() const {
  return msg_case() == kPing;
}
inline bool TeamToController::has_ping() const {
  return _internal_has_ping();
}
inline void TeamToController::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void TeamToController::clear_ping() {
  if (_internal_has_ping()) {
    msg_.ping_ = false;
    clear_has_msg();
  }
}
inline bool TeamToController::_internal_ping() const {
  if (_internal_has_ping()) {
    return msg_.ping_;
  }
  return false;
}
inline void TeamToController::_internal_set_ping(bool value) {
  if (!_internal_has_ping()) {
    clear_msg();
    set_has_ping();
  }
  msg_.ping_ = value;
}
inline bool TeamToController::ping() const {
  // @@protoc_insertion_point(field_get:TeamToController.ping)
  return _internal_ping();
}
inline void TeamToController::set_ping(bool value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:TeamToController.ping)
}

inline bool TeamToController::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void TeamToController::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline TeamToController::MsgCase TeamToController::msg_case() const {
  return TeamToController::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerToTeam

// .ControllerReply controller_reply = 1;
inline bool ControllerToTeam::_internal_has_controller_reply() const {
  return msg_case() == kControllerReply;
}
inline bool ControllerToTeam::has_controller_reply() const {
  return _internal_has_controller_reply();
}
inline void ControllerToTeam::set_has_controller_reply() {
  _oneof_case_[0] = kControllerReply;
}
inline ::ControllerReply* ControllerToTeam::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToTeam.controller_reply)
  if (_internal_has_controller_reply()) {
    clear_has_msg();
      ::ControllerReply* temp = msg_.controller_reply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ControllerReply& ControllerToTeam::_internal_controller_reply() const {
  return _internal_has_controller_reply()
      ? *msg_.controller_reply_
      : reinterpret_cast< ::ControllerReply&>(::_ControllerReply_default_instance_);
}
inline const ::ControllerReply& ControllerToTeam::controller_reply() const {
  // @@protoc_insertion_point(field_get:ControllerToTeam.controller_reply)
  return _internal_controller_reply();
}
inline ::ControllerReply* ControllerToTeam::unsafe_arena_release_controller_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ControllerToTeam.controller_reply)
  if (_internal_has_controller_reply()) {
    clear_has_msg();
    ::ControllerReply* temp = msg_.controller_reply_;
    msg_.controller_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControllerToTeam::unsafe_arena_set_allocated_controller_reply(::ControllerReply* controller_reply) {
  clear_msg();
  if (controller_reply) {
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControllerToTeam.controller_reply)
}
inline ::ControllerReply* ControllerToTeam::_internal_mutable_controller_reply() {
  if (!_internal_has_controller_reply()) {
    clear_msg();
    set_has_controller_reply();
    msg_.controller_reply_ = CreateMaybeMessage< ::ControllerReply >(GetArena());
  }
  return msg_.controller_reply_;
}
inline ::ControllerReply* ControllerToTeam::mutable_controller_reply() {
  // @@protoc_insertion_point(field_mutable:ControllerToTeam.controller_reply)
  return _internal_mutable_controller_reply();
}

// .AdvantageChoice advantage_choice = 2;
inline bool ControllerToTeam::_internal_has_advantage_choice() const {
  return msg_case() == kAdvantageChoice;
}
inline bool ControllerToTeam::has_advantage_choice() const {
  return _internal_has_advantage_choice();
}
inline void ControllerToTeam::set_has_advantage_choice() {
  _oneof_case_[0] = kAdvantageChoice;
}
inline void ControllerToTeam::clear_advantage_choice() {
  if (_internal_has_advantage_choice()) {
    if (GetArena() == nullptr) {
      delete msg_.advantage_choice_;
    }
    clear_has_msg();
  }
}
inline ::AdvantageChoice* ControllerToTeam::release_advantage_choice() {
  // @@protoc_insertion_point(field_release:ControllerToTeam.advantage_choice)
  if (_internal_has_advantage_choice()) {
    clear_has_msg();
      ::AdvantageChoice* temp = msg_.advantage_choice_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.advantage_choice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AdvantageChoice& ControllerToTeam::_internal_advantage_choice() const {
  return _internal_has_advantage_choice()
      ? *msg_.advantage_choice_
      : reinterpret_cast< ::AdvantageChoice&>(::_AdvantageChoice_default_instance_);
}
inline const ::AdvantageChoice& ControllerToTeam::advantage_choice() const {
  // @@protoc_insertion_point(field_get:ControllerToTeam.advantage_choice)
  return _internal_advantage_choice();
}
inline ::AdvantageChoice* ControllerToTeam::unsafe_arena_release_advantage_choice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ControllerToTeam.advantage_choice)
  if (_internal_has_advantage_choice()) {
    clear_has_msg();
    ::AdvantageChoice* temp = msg_.advantage_choice_;
    msg_.advantage_choice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControllerToTeam::unsafe_arena_set_allocated_advantage_choice(::AdvantageChoice* advantage_choice) {
  clear_msg();
  if (advantage_choice) {
    set_has_advantage_choice();
    msg_.advantage_choice_ = advantage_choice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControllerToTeam.advantage_choice)
}
inline ::AdvantageChoice* ControllerToTeam::_internal_mutable_advantage_choice() {
  if (!_internal_has_advantage_choice()) {
    clear_msg();
    set_has_advantage_choice();
    msg_.advantage_choice_ = CreateMaybeMessage< ::AdvantageChoice >(GetArena());
  }
  return msg_.advantage_choice_;
}
inline ::AdvantageChoice* ControllerToTeam::mutable_advantage_choice() {
  // @@protoc_insertion_point(field_mutable:ControllerToTeam.advantage_choice)
  return _internal_mutable_advantage_choice();
}

inline bool ControllerToTeam::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ControllerToTeam::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ControllerToTeam::MsgCase ControllerToTeam::msg_case() const {
  return ControllerToTeam::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AdvantageChoice

// required .AdvantageChoice.Foul foul = 1;
inline bool AdvantageChoice::_internal_has_foul() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AdvantageChoice::has_foul() const {
  return _internal_has_foul();
}
inline void AdvantageChoice::clear_foul() {
  foul_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::AdvantageChoice_Foul AdvantageChoice::_internal_foul() const {
  return static_cast< ::AdvantageChoice_Foul >(foul_);
}
inline ::AdvantageChoice_Foul AdvantageChoice::foul() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.foul)
  return _internal_foul();
}
inline void AdvantageChoice::_internal_set_foul(::AdvantageChoice_Foul value) {
  assert(::AdvantageChoice_Foul_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  foul_ = value;
}
inline void AdvantageChoice::set_foul(::AdvantageChoice_Foul value) {
  _internal_set_foul(value);
  // @@protoc_insertion_point(field_set:AdvantageChoice.foul)
}

// optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
inline bool AdvantageChoice::_internal_has_bot_crash_unique() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bot_crash_unique_ != nullptr);
  return value;
}
inline bool AdvantageChoice::has_bot_crash_unique() const {
  return _internal_has_bot_crash_unique();
}
inline const ::GameEvent_BotCrashUnique& AdvantageChoice::_internal_bot_crash_unique() const {
  const ::GameEvent_BotCrashUnique* p = bot_crash_unique_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent_BotCrashUnique&>(
      ::_GameEvent_BotCrashUnique_default_instance_);
}
inline const ::GameEvent_BotCrashUnique& AdvantageChoice::bot_crash_unique() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.bot_crash_unique)
  return _internal_bot_crash_unique();
}
inline void AdvantageChoice::unsafe_arena_set_allocated_bot_crash_unique(
    ::GameEvent_BotCrashUnique* bot_crash_unique) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_crash_unique_);
  }
  bot_crash_unique_ = bot_crash_unique;
  if (bot_crash_unique) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AdvantageChoice.bot_crash_unique)
}
inline ::GameEvent_BotCrashUnique* AdvantageChoice::release_bot_crash_unique() {
  _has_bits_[0] &= ~0x00000001u;
  ::GameEvent_BotCrashUnique* temp = bot_crash_unique_;
  bot_crash_unique_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GameEvent_BotCrashUnique* AdvantageChoice::unsafe_arena_release_bot_crash_unique() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.bot_crash_unique)
  _has_bits_[0] &= ~0x00000001u;
  ::GameEvent_BotCrashUnique* temp = bot_crash_unique_;
  bot_crash_unique_ = nullptr;
  return temp;
}
inline ::GameEvent_BotCrashUnique* AdvantageChoice::_internal_mutable_bot_crash_unique() {
  _has_bits_[0] |= 0x00000001u;
  if (bot_crash_unique_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent_BotCrashUnique>(GetArena());
    bot_crash_unique_ = p;
  }
  return bot_crash_unique_;
}
inline ::GameEvent_BotCrashUnique* AdvantageChoice::mutable_bot_crash_unique() {
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.bot_crash_unique)
  return _internal_mutable_bot_crash_unique();
}
inline void AdvantageChoice::set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_crash_unique_);
  }
  if (bot_crash_unique) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_crash_unique)->GetArena();
    if (message_arena != submessage_arena) {
      bot_crash_unique = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_crash_unique, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bot_crash_unique_ = bot_crash_unique;
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.bot_crash_unique)
}

// optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
inline bool AdvantageChoice::_internal_has_bot_pushed_bot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bot_pushed_bot_ != nullptr);
  return value;
}
inline bool AdvantageChoice::has_bot_pushed_bot() const {
  return _internal_has_bot_pushed_bot();
}
inline const ::GameEvent_BotPushedBot& AdvantageChoice::_internal_bot_pushed_bot() const {
  const ::GameEvent_BotPushedBot* p = bot_pushed_bot_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent_BotPushedBot&>(
      ::_GameEvent_BotPushedBot_default_instance_);
}
inline const ::GameEvent_BotPushedBot& AdvantageChoice::bot_pushed_bot() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.bot_pushed_bot)
  return _internal_bot_pushed_bot();
}
inline void AdvantageChoice::unsafe_arena_set_allocated_bot_pushed_bot(
    ::GameEvent_BotPushedBot* bot_pushed_bot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_pushed_bot_);
  }
  bot_pushed_bot_ = bot_pushed_bot;
  if (bot_pushed_bot) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AdvantageChoice.bot_pushed_bot)
}
inline ::GameEvent_BotPushedBot* AdvantageChoice::release_bot_pushed_bot() {
  _has_bits_[0] &= ~0x00000002u;
  ::GameEvent_BotPushedBot* temp = bot_pushed_bot_;
  bot_pushed_bot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GameEvent_BotPushedBot* AdvantageChoice::unsafe_arena_release_bot_pushed_bot() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.bot_pushed_bot)
  _has_bits_[0] &= ~0x00000002u;
  ::GameEvent_BotPushedBot* temp = bot_pushed_bot_;
  bot_pushed_bot_ = nullptr;
  return temp;
}
inline ::GameEvent_BotPushedBot* AdvantageChoice::_internal_mutable_bot_pushed_bot() {
  _has_bits_[0] |= 0x00000002u;
  if (bot_pushed_bot_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent_BotPushedBot>(GetArena());
    bot_pushed_bot_ = p;
  }
  return bot_pushed_bot_;
}
inline ::GameEvent_BotPushedBot* AdvantageChoice::mutable_bot_pushed_bot() {
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.bot_pushed_bot)
  return _internal_mutable_bot_pushed_bot();
}
inline void AdvantageChoice::set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_pushed_bot_);
  }
  if (bot_pushed_bot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_pushed_bot)->GetArena();
    if (message_arena != submessage_arena) {
      bot_pushed_bot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_pushed_bot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bot_pushed_bot_ = bot_pushed_bot;
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.bot_pushed_bot)
}

// optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
inline bool AdvantageChoice::_internal_has_attacker_touched_opponent_in_defense_area() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || attacker_touched_opponent_in_defense_area_ != nullptr);
  return value;
}
inline bool AdvantageChoice::has_attacker_touched_opponent_in_defense_area() const {
  return _internal_has_attacker_touched_opponent_in_defense_area();
}
inline const ::GameEvent_AttackerTouchedOpponentInDefenseArea& AdvantageChoice::_internal_attacker_touched_opponent_in_defense_area() const {
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea* p = attacker_touched_opponent_in_defense_area_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent_AttackerTouchedOpponentInDefenseArea&>(
      ::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_);
}
inline const ::GameEvent_AttackerTouchedOpponentInDefenseArea& AdvantageChoice::attacker_touched_opponent_in_defense_area() const {
  // @@protoc_insertion_point(field_get:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  return _internal_attacker_touched_opponent_in_defense_area();
}
inline void AdvantageChoice::unsafe_arena_set_allocated_attacker_touched_opponent_in_defense_area(
    ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_touched_opponent_in_defense_area_);
  }
  attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  if (attacker_touched_opponent_in_defense_area) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AdvantageChoice.attacker_touched_opponent_in_defense_area)
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* AdvantageChoice::release_attacker_touched_opponent_in_defense_area() {
  _has_bits_[0] &= ~0x00000004u;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* temp = attacker_touched_opponent_in_defense_area_;
  attacker_touched_opponent_in_defense_area_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* AdvantageChoice::unsafe_arena_release_attacker_touched_opponent_in_defense_area() {
  // @@protoc_insertion_point(field_release:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  _has_bits_[0] &= ~0x00000004u;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* temp = attacker_touched_opponent_in_defense_area_;
  attacker_touched_opponent_in_defense_area_ = nullptr;
  return temp;
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* AdvantageChoice::_internal_mutable_attacker_touched_opponent_in_defense_area() {
  _has_bits_[0] |= 0x00000004u;
  if (attacker_touched_opponent_in_defense_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent_AttackerTouchedOpponentInDefenseArea>(GetArena());
    attacker_touched_opponent_in_defense_area_ = p;
  }
  return attacker_touched_opponent_in_defense_area_;
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* AdvantageChoice::mutable_attacker_touched_opponent_in_defense_area() {
  // @@protoc_insertion_point(field_mutable:AdvantageChoice.attacker_touched_opponent_in_defense_area)
  return _internal_mutable_attacker_touched_opponent_in_defense_area();
}
inline void AdvantageChoice::set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_touched_opponent_in_defense_area_);
  }
  if (attacker_touched_opponent_in_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_touched_opponent_in_defense_area)->GetArena();
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_touched_opponent_in_defense_area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  // @@protoc_insertion_point(field_set_allocated:AdvantageChoice.attacker_touched_opponent_in_defense_area)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TeamToController_AdvantageResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamToController_AdvantageResponse>() {
  return ::TeamToController_AdvantageResponse_descriptor();
}
template <> struct is_proto_enum< ::AdvantageChoice_Foul> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AdvantageChoice_Foul>() {
  return ::AdvantageChoice_Foul_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fteam_2eproto
