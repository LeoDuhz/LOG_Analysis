// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_detection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fdetection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fdetection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fdetection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5frobocup_5fssl_5fdetection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_metadata_getter(int index);
class SSL_DetectionBall;
struct SSL_DetectionBallDefaultTypeInternal;
extern SSL_DetectionBallDefaultTypeInternal _SSL_DetectionBall_default_instance_;
class SSL_DetectionFrame;
struct SSL_DetectionFrameDefaultTypeInternal;
extern SSL_DetectionFrameDefaultTypeInternal _SSL_DetectionFrame_default_instance_;
class SSL_DetectionRobot;
struct SSL_DetectionRobotDefaultTypeInternal;
extern SSL_DetectionRobotDefaultTypeInternal _SSL_DetectionRobot_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSL_DetectionBall* Arena::CreateMaybeMessage<::SSL_DetectionBall>(Arena*);
template<> ::SSL_DetectionFrame* Arena::CreateMaybeMessage<::SSL_DetectionFrame>(Arena*);
template<> ::SSL_DetectionRobot* Arena::CreateMaybeMessage<::SSL_DetectionRobot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SSL_DetectionBall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_DetectionBall) */ {
 public:
  inline SSL_DetectionBall() : SSL_DetectionBall(nullptr) {}
  virtual ~SSL_DetectionBall();
  explicit constexpr SSL_DetectionBall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_DetectionBall(const SSL_DetectionBall& from);
  SSL_DetectionBall(SSL_DetectionBall&& from) noexcept
    : SSL_DetectionBall() {
    *this = ::std::move(from);
  }

  inline SSL_DetectionBall& operator=(const SSL_DetectionBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_DetectionBall& operator=(SSL_DetectionBall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_DetectionBall& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_DetectionBall* internal_default_instance() {
    return reinterpret_cast<const SSL_DetectionBall*>(
               &_SSL_DetectionBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSL_DetectionBall& a, SSL_DetectionBall& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_DetectionBall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_DetectionBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_DetectionBall* New() const final {
    return CreateMaybeMessage<SSL_DetectionBall>(nullptr);
  }

  SSL_DetectionBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_DetectionBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_DetectionBall& from);
  void MergeFrom(const SSL_DetectionBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_DetectionBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_DetectionBall";
  }
  protected:
  explicit SSL_DetectionBall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kAreaFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kPixelXFieldNumber = 6,
    kPixelYFieldNumber = 7,
  };
  // required float confidence = 1;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // optional uint32 area = 2;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::uint32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 5;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // required float pixel_x = 6;
  bool has_pixel_x() const;
  private:
  bool _internal_has_pixel_x() const;
  public:
  void clear_pixel_x();
  float pixel_x() const;
  void set_pixel_x(float value);
  private:
  float _internal_pixel_x() const;
  void _internal_set_pixel_x(float value);
  public:

  // required float pixel_y = 7;
  bool has_pixel_y() const;
  private:
  bool _internal_has_pixel_y() const;
  public:
  void clear_pixel_y();
  float pixel_y() const;
  void set_pixel_y(float value);
  private:
  float _internal_pixel_y() const;
  void _internal_set_pixel_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_DetectionBall)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 area_;
  float x_;
  float y_;
  float z_;
  float pixel_x_;
  float pixel_y_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class SSL_DetectionRobot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_DetectionRobot) */ {
 public:
  inline SSL_DetectionRobot() : SSL_DetectionRobot(nullptr) {}
  virtual ~SSL_DetectionRobot();
  explicit constexpr SSL_DetectionRobot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_DetectionRobot(const SSL_DetectionRobot& from);
  SSL_DetectionRobot(SSL_DetectionRobot&& from) noexcept
    : SSL_DetectionRobot() {
    *this = ::std::move(from);
  }

  inline SSL_DetectionRobot& operator=(const SSL_DetectionRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_DetectionRobot& operator=(SSL_DetectionRobot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_DetectionRobot& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_DetectionRobot* internal_default_instance() {
    return reinterpret_cast<const SSL_DetectionRobot*>(
               &_SSL_DetectionRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSL_DetectionRobot& a, SSL_DetectionRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_DetectionRobot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_DetectionRobot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_DetectionRobot* New() const final {
    return CreateMaybeMessage<SSL_DetectionRobot>(nullptr);
  }

  SSL_DetectionRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_DetectionRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_DetectionRobot& from);
  void MergeFrom(const SSL_DetectionRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_DetectionRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_DetectionRobot";
  }
  protected:
  explicit SSL_DetectionRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kRobotIdFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kPixelXFieldNumber = 6,
    kPixelYFieldNumber = 7,
    kHeightFieldNumber = 8,
  };
  // required float confidence = 1;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // optional uint32 robot_id = 2;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id() const;
  void set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_robot_id() const;
  void _internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float orientation = 5;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  float orientation() const;
  void set_orientation(float value);
  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);
  public:

  // required float pixel_x = 6;
  bool has_pixel_x() const;
  private:
  bool _internal_has_pixel_x() const;
  public:
  void clear_pixel_x();
  float pixel_x() const;
  void set_pixel_x(float value);
  private:
  float _internal_pixel_x() const;
  void _internal_set_pixel_x(float value);
  public:

  // required float pixel_y = 7;
  bool has_pixel_y() const;
  private:
  bool _internal_has_pixel_y() const;
  public:
  void clear_pixel_y();
  float pixel_y() const;
  void set_pixel_y(float value);
  private:
  float _internal_pixel_y() const;
  void _internal_set_pixel_y(float value);
  public:

  // optional float height = 8;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_DetectionRobot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id_;
  float x_;
  float y_;
  float orientation_;
  float pixel_x_;
  float pixel_y_;
  float height_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class SSL_DetectionFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_DetectionFrame) */ {
 public:
  inline SSL_DetectionFrame() : SSL_DetectionFrame(nullptr) {}
  virtual ~SSL_DetectionFrame();
  explicit constexpr SSL_DetectionFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_DetectionFrame(const SSL_DetectionFrame& from);
  SSL_DetectionFrame(SSL_DetectionFrame&& from) noexcept
    : SSL_DetectionFrame() {
    *this = ::std::move(from);
  }

  inline SSL_DetectionFrame& operator=(const SSL_DetectionFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_DetectionFrame& operator=(SSL_DetectionFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_DetectionFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_DetectionFrame* internal_default_instance() {
    return reinterpret_cast<const SSL_DetectionFrame*>(
               &_SSL_DetectionFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSL_DetectionFrame& a, SSL_DetectionFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_DetectionFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_DetectionFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_DetectionFrame* New() const final {
    return CreateMaybeMessage<SSL_DetectionFrame>(nullptr);
  }

  SSL_DetectionFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_DetectionFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_DetectionFrame& from);
  void MergeFrom(const SSL_DetectionFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_DetectionFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_DetectionFrame";
  }
  protected:
  explicit SSL_DetectionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBallsFieldNumber = 5,
    kRobotsYellowFieldNumber = 6,
    kRobotsBlueFieldNumber = 7,
    kTCaptureFieldNumber = 2,
    kFrameNumberFieldNumber = 1,
    kCameraIdFieldNumber = 4,
    kTSentFieldNumber = 3,
  };
  // repeated .SSL_DetectionBall balls = 5;
  int balls_size() const;
  private:
  int _internal_balls_size() const;
  public:
  void clear_balls();
  ::SSL_DetectionBall* mutable_balls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionBall >*
      mutable_balls();
  private:
  const ::SSL_DetectionBall& _internal_balls(int index) const;
  ::SSL_DetectionBall* _internal_add_balls();
  public:
  const ::SSL_DetectionBall& balls(int index) const;
  ::SSL_DetectionBall* add_balls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionBall >&
      balls() const;

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  int robots_yellow_size() const;
  private:
  int _internal_robots_yellow_size() const;
  public:
  void clear_robots_yellow();
  ::SSL_DetectionRobot* mutable_robots_yellow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot >*
      mutable_robots_yellow();
  private:
  const ::SSL_DetectionRobot& _internal_robots_yellow(int index) const;
  ::SSL_DetectionRobot* _internal_add_robots_yellow();
  public:
  const ::SSL_DetectionRobot& robots_yellow(int index) const;
  ::SSL_DetectionRobot* add_robots_yellow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot >&
      robots_yellow() const;

  // repeated .SSL_DetectionRobot robots_blue = 7;
  int robots_blue_size() const;
  private:
  int _internal_robots_blue_size() const;
  public:
  void clear_robots_blue();
  ::SSL_DetectionRobot* mutable_robots_blue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot >*
      mutable_robots_blue();
  private:
  const ::SSL_DetectionRobot& _internal_robots_blue(int index) const;
  ::SSL_DetectionRobot* _internal_add_robots_blue();
  public:
  const ::SSL_DetectionRobot& robots_blue(int index) const;
  ::SSL_DetectionRobot* add_robots_blue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot >&
      robots_blue() const;

  // required double t_capture = 2;
  bool has_t_capture() const;
  private:
  bool _internal_has_t_capture() const;
  public:
  void clear_t_capture();
  double t_capture() const;
  void set_t_capture(double value);
  private:
  double _internal_t_capture() const;
  void _internal_set_t_capture(double value);
  public:

  // required uint32 frame_number = 1;
  bool has_frame_number() const;
  private:
  bool _internal_has_frame_number() const;
  public:
  void clear_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number() const;
  void set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_number() const;
  void _internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 camera_id = 4;
  bool has_camera_id() const;
  private:
  bool _internal_has_camera_id() const;
  public:
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double t_sent = 3;
  bool has_t_sent() const;
  private:
  bool _internal_has_t_sent() const;
  public:
  void clear_t_sent();
  double t_sent() const;
  void set_t_sent(double value);
  private:
  double _internal_t_sent() const;
  void _internal_set_t_sent(double value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_DetectionFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionBall > balls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot > robots_yellow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot > robots_blue_;
  double t_capture_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id_;
  double t_sent_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fdetection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSL_DetectionBall

// required float confidence = 1;
inline bool SSL_DetectionBall::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_DetectionBall::has_confidence() const {
  return _internal_has_confidence();
}
inline void SSL_DetectionBall::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SSL_DetectionBall::_internal_confidence() const {
  return confidence_;
}
inline float SSL_DetectionBall::confidence() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.confidence)
  return _internal_confidence();
}
inline void SSL_DetectionBall::_internal_set_confidence(float value) {
  _has_bits_[0] |= 0x00000001u;
  confidence_ = value;
}
inline void SSL_DetectionBall::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.confidence)
}

// optional uint32 area = 2;
inline bool SSL_DetectionBall::_internal_has_area() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_DetectionBall::has_area() const {
  return _internal_has_area();
}
inline void SSL_DetectionBall::clear_area() {
  area_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_DetectionBall::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_DetectionBall::area() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.area)
  return _internal_area();
}
inline void SSL_DetectionBall::_internal_set_area(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  area_ = value;
}
inline void SSL_DetectionBall::set_area(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.area)
}

// required float x = 3;
inline bool SSL_DetectionBall::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_DetectionBall::has_x() const {
  return _internal_has_x();
}
inline void SSL_DetectionBall::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SSL_DetectionBall::_internal_x() const {
  return x_;
}
inline float SSL_DetectionBall::x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.x)
  return _internal_x();
}
inline void SSL_DetectionBall::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void SSL_DetectionBall::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.x)
}

// required float y = 4;
inline bool SSL_DetectionBall::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_DetectionBall::has_y() const {
  return _internal_has_y();
}
inline void SSL_DetectionBall::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SSL_DetectionBall::_internal_y() const {
  return y_;
}
inline float SSL_DetectionBall::y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.y)
  return _internal_y();
}
inline void SSL_DetectionBall::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void SSL_DetectionBall::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.y)
}

// optional float z = 5;
inline bool SSL_DetectionBall::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_DetectionBall::has_z() const {
  return _internal_has_z();
}
inline void SSL_DetectionBall::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SSL_DetectionBall::_internal_z() const {
  return z_;
}
inline float SSL_DetectionBall::z() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.z)
  return _internal_z();
}
inline void SSL_DetectionBall::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000010u;
  z_ = value;
}
inline void SSL_DetectionBall::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.z)
}

// required float pixel_x = 6;
inline bool SSL_DetectionBall::_internal_has_pixel_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_DetectionBall::has_pixel_x() const {
  return _internal_has_pixel_x();
}
inline void SSL_DetectionBall::clear_pixel_x() {
  pixel_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SSL_DetectionBall::_internal_pixel_x() const {
  return pixel_x_;
}
inline float SSL_DetectionBall::pixel_x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.pixel_x)
  return _internal_pixel_x();
}
inline void SSL_DetectionBall::_internal_set_pixel_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  pixel_x_ = value;
}
inline void SSL_DetectionBall::set_pixel_x(float value) {
  _internal_set_pixel_x(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.pixel_x)
}

// required float pixel_y = 7;
inline bool SSL_DetectionBall::_internal_has_pixel_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SSL_DetectionBall::has_pixel_y() const {
  return _internal_has_pixel_y();
}
inline void SSL_DetectionBall::clear_pixel_y() {
  pixel_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SSL_DetectionBall::_internal_pixel_y() const {
  return pixel_y_;
}
inline float SSL_DetectionBall::pixel_y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.pixel_y)
  return _internal_pixel_y();
}
inline void SSL_DetectionBall::_internal_set_pixel_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  pixel_y_ = value;
}
inline void SSL_DetectionBall::set_pixel_y(float value) {
  _internal_set_pixel_y(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.pixel_y)
}

// -------------------------------------------------------------------

// SSL_DetectionRobot

// required float confidence = 1;
inline bool SSL_DetectionRobot::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_DetectionRobot::has_confidence() const {
  return _internal_has_confidence();
}
inline void SSL_DetectionRobot::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SSL_DetectionRobot::_internal_confidence() const {
  return confidence_;
}
inline float SSL_DetectionRobot::confidence() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.confidence)
  return _internal_confidence();
}
inline void SSL_DetectionRobot::_internal_set_confidence(float value) {
  _has_bits_[0] |= 0x00000001u;
  confidence_ = value;
}
inline void SSL_DetectionRobot::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.confidence)
}

// optional uint32 robot_id = 2;
inline bool SSL_DetectionRobot::_internal_has_robot_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_DetectionRobot::has_robot_id() const {
  return _internal_has_robot_id();
}
inline void SSL_DetectionRobot::clear_robot_id() {
  robot_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_DetectionRobot::_internal_robot_id() const {
  return robot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_DetectionRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.robot_id)
  return _internal_robot_id();
}
inline void SSL_DetectionRobot::_internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  robot_id_ = value;
}
inline void SSL_DetectionRobot::set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.robot_id)
}

// required float x = 3;
inline bool SSL_DetectionRobot::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_DetectionRobot::has_x() const {
  return _internal_has_x();
}
inline void SSL_DetectionRobot::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SSL_DetectionRobot::_internal_x() const {
  return x_;
}
inline float SSL_DetectionRobot::x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.x)
  return _internal_x();
}
inline void SSL_DetectionRobot::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void SSL_DetectionRobot::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.x)
}

// required float y = 4;
inline bool SSL_DetectionRobot::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_DetectionRobot::has_y() const {
  return _internal_has_y();
}
inline void SSL_DetectionRobot::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SSL_DetectionRobot::_internal_y() const {
  return y_;
}
inline float SSL_DetectionRobot::y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.y)
  return _internal_y();
}
inline void SSL_DetectionRobot::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void SSL_DetectionRobot::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.y)
}

// optional float orientation = 5;
inline bool SSL_DetectionRobot::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_DetectionRobot::has_orientation() const {
  return _internal_has_orientation();
}
inline void SSL_DetectionRobot::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SSL_DetectionRobot::_internal_orientation() const {
  return orientation_;
}
inline float SSL_DetectionRobot::orientation() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.orientation)
  return _internal_orientation();
}
inline void SSL_DetectionRobot::_internal_set_orientation(float value) {
  _has_bits_[0] |= 0x00000010u;
  orientation_ = value;
}
inline void SSL_DetectionRobot::set_orientation(float value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.orientation)
}

// required float pixel_x = 6;
inline bool SSL_DetectionRobot::_internal_has_pixel_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_DetectionRobot::has_pixel_x() const {
  return _internal_has_pixel_x();
}
inline void SSL_DetectionRobot::clear_pixel_x() {
  pixel_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SSL_DetectionRobot::_internal_pixel_x() const {
  return pixel_x_;
}
inline float SSL_DetectionRobot::pixel_x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.pixel_x)
  return _internal_pixel_x();
}
inline void SSL_DetectionRobot::_internal_set_pixel_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  pixel_x_ = value;
}
inline void SSL_DetectionRobot::set_pixel_x(float value) {
  _internal_set_pixel_x(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.pixel_x)
}

// required float pixel_y = 7;
inline bool SSL_DetectionRobot::_internal_has_pixel_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SSL_DetectionRobot::has_pixel_y() const {
  return _internal_has_pixel_y();
}
inline void SSL_DetectionRobot::clear_pixel_y() {
  pixel_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SSL_DetectionRobot::_internal_pixel_y() const {
  return pixel_y_;
}
inline float SSL_DetectionRobot::pixel_y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.pixel_y)
  return _internal_pixel_y();
}
inline void SSL_DetectionRobot::_internal_set_pixel_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  pixel_y_ = value;
}
inline void SSL_DetectionRobot::set_pixel_y(float value) {
  _internal_set_pixel_y(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.pixel_y)
}

// optional float height = 8;
inline bool SSL_DetectionRobot::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SSL_DetectionRobot::has_height() const {
  return _internal_has_height();
}
inline void SSL_DetectionRobot::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SSL_DetectionRobot::_internal_height() const {
  return height_;
}
inline float SSL_DetectionRobot::height() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.height)
  return _internal_height();
}
inline void SSL_DetectionRobot::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000080u;
  height_ = value;
}
inline void SSL_DetectionRobot::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.height)
}

// -------------------------------------------------------------------

// SSL_DetectionFrame

// required uint32 frame_number = 1;
inline bool SSL_DetectionFrame::_internal_has_frame_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_DetectionFrame::has_frame_number() const {
  return _internal_has_frame_number();
}
inline void SSL_DetectionFrame::clear_frame_number() {
  frame_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_DetectionFrame::_internal_frame_number() const {
  return frame_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_DetectionFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.frame_number)
  return _internal_frame_number();
}
inline void SSL_DetectionFrame::_internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_number_ = value;
}
inline void SSL_DetectionFrame::set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.frame_number)
}

// required double t_capture = 2;
inline bool SSL_DetectionFrame::_internal_has_t_capture() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_DetectionFrame::has_t_capture() const {
  return _internal_has_t_capture();
}
inline void SSL_DetectionFrame::clear_t_capture() {
  t_capture_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SSL_DetectionFrame::_internal_t_capture() const {
  return t_capture_;
}
inline double SSL_DetectionFrame::t_capture() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.t_capture)
  return _internal_t_capture();
}
inline void SSL_DetectionFrame::_internal_set_t_capture(double value) {
  _has_bits_[0] |= 0x00000001u;
  t_capture_ = value;
}
inline void SSL_DetectionFrame::set_t_capture(double value) {
  _internal_set_t_capture(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.t_capture)
}

// required double t_sent = 3;
inline bool SSL_DetectionFrame::_internal_has_t_sent() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_DetectionFrame::has_t_sent() const {
  return _internal_has_t_sent();
}
inline void SSL_DetectionFrame::clear_t_sent() {
  t_sent_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SSL_DetectionFrame::_internal_t_sent() const {
  return t_sent_;
}
inline double SSL_DetectionFrame::t_sent() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.t_sent)
  return _internal_t_sent();
}
inline void SSL_DetectionFrame::_internal_set_t_sent(double value) {
  _has_bits_[0] |= 0x00000008u;
  t_sent_ = value;
}
inline void SSL_DetectionFrame::set_t_sent(double value) {
  _internal_set_t_sent(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.t_sent)
}

// required uint32 camera_id = 4;
inline bool SSL_DetectionFrame::_internal_has_camera_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_DetectionFrame::has_camera_id() const {
  return _internal_has_camera_id();
}
inline void SSL_DetectionFrame::clear_camera_id() {
  camera_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_DetectionFrame::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_DetectionFrame::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.camera_id)
  return _internal_camera_id();
}
inline void SSL_DetectionFrame::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  camera_id_ = value;
}
inline void SSL_DetectionFrame::set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.camera_id)
}

// repeated .SSL_DetectionBall balls = 5;
inline int SSL_DetectionFrame::_internal_balls_size() const {
  return balls_.size();
}
inline int SSL_DetectionFrame::balls_size() const {
  return _internal_balls_size();
}
inline void SSL_DetectionFrame::clear_balls() {
  balls_.Clear();
}
inline ::SSL_DetectionBall* SSL_DetectionFrame::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.balls)
  return balls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionBall >*
SSL_DetectionFrame::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.balls)
  return &balls_;
}
inline const ::SSL_DetectionBall& SSL_DetectionFrame::_internal_balls(int index) const {
  return balls_.Get(index);
}
inline const ::SSL_DetectionBall& SSL_DetectionFrame::balls(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.balls)
  return _internal_balls(index);
}
inline ::SSL_DetectionBall* SSL_DetectionFrame::_internal_add_balls() {
  return balls_.Add();
}
inline ::SSL_DetectionBall* SSL_DetectionFrame::add_balls() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.balls)
  return _internal_add_balls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionBall >&
SSL_DetectionFrame::balls() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.balls)
  return balls_;
}

// repeated .SSL_DetectionRobot robots_yellow = 6;
inline int SSL_DetectionFrame::_internal_robots_yellow_size() const {
  return robots_yellow_.size();
}
inline int SSL_DetectionFrame::robots_yellow_size() const {
  return _internal_robots_yellow_size();
}
inline void SSL_DetectionFrame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot >*
SSL_DetectionFrame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.robots_yellow)
  return &robots_yellow_;
}
inline const ::SSL_DetectionRobot& SSL_DetectionFrame::_internal_robots_yellow(int index) const {
  return robots_yellow_.Get(index);
}
inline const ::SSL_DetectionRobot& SSL_DetectionFrame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.robots_yellow)
  return _internal_robots_yellow(index);
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::_internal_add_robots_yellow() {
  return robots_yellow_.Add();
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.robots_yellow)
  return _internal_add_robots_yellow();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot >&
SSL_DetectionFrame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_;
}

// repeated .SSL_DetectionRobot robots_blue = 7;
inline int SSL_DetectionFrame::_internal_robots_blue_size() const {
  return robots_blue_.size();
}
inline int SSL_DetectionFrame::robots_blue_size() const {
  return _internal_robots_blue_size();
}
inline void SSL_DetectionFrame::clear_robots_blue() {
  robots_blue_.Clear();
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.robots_blue)
  return robots_blue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot >*
SSL_DetectionFrame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.robots_blue)
  return &robots_blue_;
}
inline const ::SSL_DetectionRobot& SSL_DetectionFrame::_internal_robots_blue(int index) const {
  return robots_blue_.Get(index);
}
inline const ::SSL_DetectionRobot& SSL_DetectionFrame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.robots_blue)
  return _internal_robots_blue(index);
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::_internal_add_robots_blue() {
  return robots_blue_.Add();
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.robots_blue)
  return _internal_add_robots_blue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionRobot >&
SSL_DetectionFrame::robots_blue() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.robots_blue)
  return robots_blue_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fdetection_2eproto
