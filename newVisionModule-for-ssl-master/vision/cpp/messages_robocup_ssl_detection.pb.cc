// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_detection.proto

#include "messages_robocup_ssl_detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_DetectionBall_messages_5frobocup_5fssl_5fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_DetectionRobot_messages_5frobocup_5fssl_5fdetection_2eproto;
class SSL_DetectionBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_DetectionBall> _instance;
} _SSL_DetectionBall_default_instance_;
class SSL_DetectionRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_DetectionRobot> _instance;
} _SSL_DetectionRobot_default_instance_;
class SSL_DetectionFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_DetectionFrame> _instance;
} _SSL_DetectionFrame_default_instance_;
static void InitDefaultsscc_info_SSL_DetectionBall_messages_5frobocup_5fssl_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_DetectionBall_default_instance_;
    new (ptr) ::SSL_DetectionBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_DetectionBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_DetectionBall_messages_5frobocup_5fssl_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSL_DetectionBall_messages_5frobocup_5fssl_5fdetection_2eproto}, {}};

static void InitDefaultsscc_info_SSL_DetectionFrame_messages_5frobocup_5fssl_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_DetectionFrame_default_instance_;
    new (ptr) ::SSL_DetectionFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_DetectionFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SSL_DetectionFrame_messages_5frobocup_5fssl_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SSL_DetectionFrame_messages_5frobocup_5fssl_5fdetection_2eproto}, {
      &scc_info_SSL_DetectionBall_messages_5frobocup_5fssl_5fdetection_2eproto.base,
      &scc_info_SSL_DetectionRobot_messages_5frobocup_5fssl_5fdetection_2eproto.base,}};

static void InitDefaultsscc_info_SSL_DetectionRobot_messages_5frobocup_5fssl_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_DetectionRobot_default_instance_;
    new (ptr) ::SSL_DetectionRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_DetectionRobot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_DetectionRobot_messages_5frobocup_5fssl_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSL_DetectionRobot_messages_5frobocup_5fssl_5fdetection_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_5frobocup_5fssl_5fdetection_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_5frobocup_5fssl_5fdetection_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_5frobocup_5fssl_5fdetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_5frobocup_5fssl_5fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, confidence_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, area_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, x_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, y_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, z_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, pixel_x_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, pixel_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, confidence_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, robot_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, x_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, y_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, orientation_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, pixel_x_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, pixel_y_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, height_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, frame_number_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, t_capture_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, t_sent_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, camera_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, balls_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, robots_yellow_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, robots_blue_),
  1,
  0,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::SSL_DetectionBall)},
  { 19, 32, sizeof(::SSL_DetectionRobot)},
  { 40, 52, sizeof(::SSL_DetectionFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSL_DetectionBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSL_DetectionRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSL_DetectionFrame_default_instance_),
};

const char descriptor_table_protodef_messages_5frobocup_5fssl_5fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$messages_robocup_ssl_detection.proto\"x"
  "\n\021SSL_DetectionBall\022\022\n\nconfidence\030\001 \002(\002\022"
  "\014\n\004area\030\002 \001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\t\n\001z"
  "\030\005 \001(\002\022\017\n\007pixel_x\030\006 \002(\002\022\017\n\007pixel_y\030\007 \002(\002"
  "\"\227\001\n\022SSL_DetectionRobot\022\022\n\nconfidence\030\001 "
  "\002(\002\022\020\n\010robot_id\030\002 \001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 "
  "\002(\002\022\023\n\013orientation\030\005 \001(\002\022\017\n\007pixel_x\030\006 \002("
  "\002\022\017\n\007pixel_y\030\007 \002(\002\022\016\n\006height\030\010 \001(\002\"\331\001\n\022S"
  "SL_DetectionFrame\022\024\n\014frame_number\030\001 \002(\r\022"
  "\021\n\tt_capture\030\002 \002(\001\022\016\n\006t_sent\030\003 \002(\001\022\021\n\tca"
  "mera_id\030\004 \002(\r\022!\n\005balls\030\005 \003(\0132\022.SSL_Detec"
  "tionBall\022*\n\rrobots_yellow\030\006 \003(\0132\023.SSL_De"
  "tectionRobot\022(\n\013robots_blue\030\007 \003(\0132\023.SSL_"
  "DetectionRobot"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_sccs[3] = {
  &scc_info_SSL_DetectionBall_messages_5frobocup_5fssl_5fdetection_2eproto.base,
  &scc_info_SSL_DetectionFrame_messages_5frobocup_5fssl_5fdetection_2eproto.base,
  &scc_info_SSL_DetectionRobot_messages_5frobocup_5fssl_5fdetection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto = {
  false, false, descriptor_table_protodef_messages_5frobocup_5fssl_5fdetection_2eproto, "messages_robocup_ssl_detection.proto", 534,
  &descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_once, descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_sccs, descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_messages_5frobocup_5fssl_5fdetection_2eproto::offsets,
  file_level_metadata_messages_5frobocup_5fssl_5fdetection_2eproto, 3, file_level_enum_descriptors_messages_5frobocup_5fssl_5fdetection_2eproto, file_level_service_descriptors_messages_5frobocup_5fssl_5fdetection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_5frobocup_5fssl_5fdetection_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_5frobocup_5fssl_5fdetection_2eproto)), true);

// ===================================================================

void SSL_DetectionBall::InitAsDefaultInstance() {
}
class SSL_DetectionBall::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_DetectionBall>()._has_bits_);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pixel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pixel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000006d) ^ 0x0000006d) != 0;
  }
};

SSL_DetectionBall::SSL_DetectionBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionBall)
}
SSL_DetectionBall::SSL_DetectionBall(const SSL_DetectionBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_y_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(pixel_y_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionBall)
}

void SSL_DetectionBall::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_y_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(pixel_y_));
}

SSL_DetectionBall::~SSL_DetectionBall() {
  // @@protoc_insertion_point(destructor:SSL_DetectionBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_DetectionBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSL_DetectionBall::ArenaDtor(void* object) {
  SSL_DetectionBall* _this = reinterpret_cast< SSL_DetectionBall* >(object);
  (void)_this;
}
void SSL_DetectionBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_DetectionBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_DetectionBall& SSL_DetectionBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_DetectionBall_messages_5frobocup_5fssl_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void SSL_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pixel_y_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(pixel_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_DetectionBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_area(&has_bits);
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pixel_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_pixel_x(&has_bits);
          pixel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pixel_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_pixel_y(&has_bits);
          pixel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_DetectionBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_confidence(), target);
  }

  // optional uint32 area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_area(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pixel_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionBall)
  return target;
}

size_t SSL_DetectionBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionBall)
  size_t total_size = 0;

  if (_internal_has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_pixel_x()) {
    // required float pixel_x = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_pixel_y()) {
    // required float pixel_y = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_DetectionBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionBall)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000006d) ^ 0x0000006d) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float pixel_x = 6;
    total_size += 1 + 4;

    // required float pixel_y = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 area = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_area());
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_DetectionBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_DetectionBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionBall)
    MergeFrom(*source);
  }
}

void SSL_DetectionBall::MergeFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      pixel_x_ = from.pixel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      pixel_y_ = from.pixel_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_DetectionBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionBall::CopyFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SSL_DetectionBall::InternalSwap(SSL_DetectionBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, pixel_y_)
      + sizeof(SSL_DetectionBall::pixel_y_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, confidence_)>(
          reinterpret_cast<char*>(&confidence_),
          reinterpret_cast<char*>(&other->confidence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_DetectionBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSL_DetectionRobot::InitAsDefaultInstance() {
}
class SSL_DetectionRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_DetectionRobot>()._has_bits_);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pixel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pixel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000006d) ^ 0x0000006d) != 0;
  }
};

SSL_DetectionRobot::SSL_DetectionRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionRobot)
}
SSL_DetectionRobot::SSL_DetectionRobot(const SSL_DetectionRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionRobot)
}

void SSL_DetectionRobot::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(height_));
}

SSL_DetectionRobot::~SSL_DetectionRobot() {
  // @@protoc_insertion_point(destructor:SSL_DetectionRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_DetectionRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSL_DetectionRobot::ArenaDtor(void* object) {
  SSL_DetectionRobot* _this = reinterpret_cast< SSL_DetectionRobot* >(object);
  (void)_this;
}
void SSL_DetectionRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_DetectionRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_DetectionRobot& SSL_DetectionRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_DetectionRobot_messages_5frobocup_5fssl_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void SSL_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_DetectionRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 robot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_robot_id(&has_bits);
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pixel_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_pixel_x(&has_bits);
          pixel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float pixel_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_pixel_y(&has_bits);
          pixel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_DetectionRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_confidence(), target);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_robot_id(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_orientation(), target);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pixel_y(), target);
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionRobot)
  return target;
}

size_t SSL_DetectionRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionRobot)
  size_t total_size = 0;

  if (_internal_has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_pixel_x()) {
    // required float pixel_x = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_pixel_y()) {
    // required float pixel_y = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_DetectionRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionRobot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000006d) ^ 0x0000006d) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float pixel_x = 6;
    total_size += 1 + 4;

    // required float pixel_y = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 robot_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_robot_id());
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 4;
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_DetectionRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_DetectionRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionRobot)
    MergeFrom(*source);
  }
}

void SSL_DetectionRobot::MergeFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000020u) {
      pixel_x_ = from.pixel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      pixel_y_ = from.pixel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_DetectionRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionRobot::CopyFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SSL_DetectionRobot::InternalSwap(SSL_DetectionRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, height_)
      + sizeof(SSL_DetectionRobot::height_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, confidence_)>(
          reinterpret_cast<char*>(&confidence_),
          reinterpret_cast<char*>(&other->confidence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_DetectionRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSL_DetectionFrame::InitAsDefaultInstance() {
}
class SSL_DetectionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_DetectionFrame>()._has_bits_);
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_t_capture(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

SSL_DetectionFrame::SSL_DetectionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  balls_(arena),
  robots_yellow_(arena),
  robots_blue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionFrame)
}
SSL_DetectionFrame::SSL_DetectionFrame(const SSL_DetectionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      balls_(from.balls_),
      robots_yellow_(from.robots_yellow_),
      robots_blue_(from.robots_blue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&t_capture_, &from.t_capture_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_sent_) -
    reinterpret_cast<char*>(&t_capture_)) + sizeof(t_sent_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionFrame)
}

void SSL_DetectionFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSL_DetectionFrame_messages_5frobocup_5fssl_5fdetection_2eproto.base);
  ::memset(&t_capture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_sent_) -
      reinterpret_cast<char*>(&t_capture_)) + sizeof(t_sent_));
}

SSL_DetectionFrame::~SSL_DetectionFrame() {
  // @@protoc_insertion_point(destructor:SSL_DetectionFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_DetectionFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSL_DetectionFrame::ArenaDtor(void* object) {
  SSL_DetectionFrame* _this = reinterpret_cast< SSL_DetectionFrame* >(object);
  (void)_this;
}
void SSL_DetectionFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_DetectionFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_DetectionFrame& SSL_DetectionFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_DetectionFrame_messages_5frobocup_5fssl_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void SSL_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balls_.Clear();
  robots_yellow_.Clear();
  robots_blue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&t_capture_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t_sent_) -
        reinterpret_cast<char*>(&t_capture_)) + sizeof(t_sent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_DetectionFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 frame_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_frame_number(&has_bits);
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double t_capture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_t_capture(&has_bits);
          t_capture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double t_sent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_t_sent(&has_bits);
          t_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 camera_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_camera_id(&has_bits);
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SSL_DetectionBall balls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SSL_DetectionRobot robots_yellow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_yellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SSL_DetectionRobot robots_blue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_blue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_DetectionFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_number(), target);
  }

  // required double t_capture = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t_capture(), target);
  }

  // required double t_sent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_t_sent(), target);
  }

  // required uint32 camera_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_camera_id(), target);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_balls(i), target, stream);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_yellow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_robots_yellow(i), target, stream);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_blue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_robots_blue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionFrame)
  return target;
}

size_t SSL_DetectionFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionFrame)
  size_t total_size = 0;

  if (_internal_has_t_capture()) {
    // required double t_capture = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_frame_number()) {
    // required uint32 frame_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_number());
  }

  if (_internal_has_camera_id()) {
    // required uint32 camera_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_id());
  }

  if (_internal_has_t_sent()) {
    // required double t_sent = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SSL_DetectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double t_capture = 2;
    total_size += 1 + 8;

    // required uint32 frame_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_number());

    // required uint32 camera_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_camera_id());

    // required double t_sent = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_DetectionBall balls = 5;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  total_size += 1UL * this->_internal_robots_yellow_size();
  for (const auto& msg : this->robots_yellow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  total_size += 1UL * this->_internal_robots_blue_size();
  for (const auto& msg : this->robots_blue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_DetectionFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_DetectionFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_DetectionFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionFrame)
    MergeFrom(*source);
  }
}

void SSL_DetectionFrame::MergeFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balls_.MergeFrom(from.balls_);
  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      t_capture_ = from.t_capture_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_number_ = from.frame_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      camera_id_ = from.camera_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      t_sent_ = from.t_sent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_DetectionFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionFrame::CopyFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(balls_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robots_yellow_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robots_blue_)) return false;
  return true;
}

void SSL_DetectionFrame::InternalSwap(SSL_DetectionFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  balls_.InternalSwap(&other->balls_);
  robots_yellow_.InternalSwap(&other->robots_yellow_);
  robots_blue_.InternalSwap(&other->robots_blue_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, t_sent_)
      + sizeof(SSL_DetectionFrame::t_sent_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, t_capture_)>(
          reinterpret_cast<char*>(&t_capture_),
          reinterpret_cast<char*>(&other->t_capture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_DetectionFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSL_DetectionBall* Arena::CreateMaybeMessage< ::SSL_DetectionBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_DetectionBall >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_DetectionRobot* Arena::CreateMaybeMessage< ::SSL_DetectionRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_DetectionRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_DetectionFrame* Arena::CreateMaybeMessage< ::SSL_DetectionFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_DetectionFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
