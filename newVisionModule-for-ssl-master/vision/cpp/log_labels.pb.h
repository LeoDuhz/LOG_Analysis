// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_labels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_log_5flabels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_log_5flabels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_log_5flabels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_log_5flabels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_5flabels_2eproto;
class BallPossessionLabel;
class BallPossessionLabelDefaultTypeInternal;
extern BallPossessionLabelDefaultTypeInternal _BallPossessionLabel_default_instance_;
class DribblingLabel;
class DribblingLabelDefaultTypeInternal;
extern DribblingLabelDefaultTypeInternal _DribblingLabel_default_instance_;
class GoalShotLabel;
class GoalShotLabelDefaultTypeInternal;
extern GoalShotLabelDefaultTypeInternal _GoalShotLabel_default_instance_;
class Labels;
class LabelsDefaultTypeInternal;
extern LabelsDefaultTypeInternal _Labels_default_instance_;
class PassingLabel;
class PassingLabelDefaultTypeInternal;
extern PassingLabelDefaultTypeInternal _PassingLabel_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BallPossessionLabel* Arena::CreateMaybeMessage<::BallPossessionLabel>(Arena*);
template<> ::DribblingLabel* Arena::CreateMaybeMessage<::DribblingLabel>(Arena*);
template<> ::GoalShotLabel* Arena::CreateMaybeMessage<::GoalShotLabel>(Arena*);
template<> ::Labels* Arena::CreateMaybeMessage<::Labels>(Arena*);
template<> ::PassingLabel* Arena::CreateMaybeMessage<::PassingLabel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum BallPossessionLabel_State : int {
  BallPossessionLabel_State_NONE = 0,
  BallPossessionLabel_State_YELLOW_POSSES = 1,
  BallPossessionLabel_State_BLUE_POSSES = 2,
  BallPossessionLabel_State_BallPossessionLabel_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BallPossessionLabel_State_BallPossessionLabel_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BallPossessionLabel_State_IsValid(int value);
constexpr BallPossessionLabel_State BallPossessionLabel_State_State_MIN = BallPossessionLabel_State_NONE;
constexpr BallPossessionLabel_State BallPossessionLabel_State_State_MAX = BallPossessionLabel_State_BLUE_POSSES;
constexpr int BallPossessionLabel_State_State_ARRAYSIZE = BallPossessionLabel_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BallPossessionLabel_State_descriptor();
template<typename T>
inline const std::string& BallPossessionLabel_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BallPossessionLabel_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BallPossessionLabel_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BallPossessionLabel_State_descriptor(), enum_t_value);
}
inline bool BallPossessionLabel_State_Parse(
    const std::string& name, BallPossessionLabel_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BallPossessionLabel_State>(
    BallPossessionLabel_State_descriptor(), name, value);
}
enum TeamColor : int {
  TeamYELLOW = 0,
  TeamBLUE = 1,
  TeamColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TeamColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TeamColor_IsValid(int value);
constexpr TeamColor TeamColor_MIN = TeamYELLOW;
constexpr TeamColor TeamColor_MAX = TeamBLUE;
constexpr int TeamColor_ARRAYSIZE = TeamColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamColor_descriptor();
template<typename T>
inline const std::string& TeamColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeamColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeamColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeamColor_descriptor(), enum_t_value);
}
inline bool TeamColor_Parse(
    const std::string& name, TeamColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeamColor>(
    TeamColor_descriptor(), name, value);
}
// ===================================================================

class DribblingLabel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DribblingLabel) */ {
 public:
  inline DribblingLabel() : DribblingLabel(nullptr) {};
  virtual ~DribblingLabel();

  DribblingLabel(const DribblingLabel& from);
  DribblingLabel(DribblingLabel&& from) noexcept
    : DribblingLabel() {
    *this = ::std::move(from);
  }

  inline DribblingLabel& operator=(const DribblingLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DribblingLabel& operator=(DribblingLabel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DribblingLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DribblingLabel* internal_default_instance() {
    return reinterpret_cast<const DribblingLabel*>(
               &_DribblingLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DribblingLabel& a, DribblingLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(DribblingLabel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DribblingLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DribblingLabel* New() const final {
    return CreateMaybeMessage<DribblingLabel>(nullptr);
  }

  DribblingLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DribblingLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DribblingLabel& from);
  void MergeFrom(const DribblingLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DribblingLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DribblingLabel";
  }
  protected:
  explicit DribblingLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_log_5flabels_2eproto);
    return ::descriptor_table_log_5flabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsDribblingFieldNumber = 1,
    kRobotIdFieldNumber = 2,
    kTeamFieldNumber = 3,
  };
  // bool is_dribbling = 1;
  void clear_is_dribbling();
  bool is_dribbling() const;
  void set_is_dribbling(bool value);
  private:
  bool _internal_is_dribbling() const;
  void _internal_set_is_dribbling(bool value);
  public:

  // uint32 robot_id = 2;
  void clear_robot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id() const;
  void set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_robot_id() const;
  void _internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .TeamColor team = 3;
  void clear_team();
  ::TeamColor team() const;
  void set_team(::TeamColor value);
  private:
  ::TeamColor _internal_team() const;
  void _internal_set_team(::TeamColor value);
  public:

  // @@protoc_insertion_point(class_scope:DribblingLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_dribbling_;
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id_;
  int team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_5flabels_2eproto;
};
// -------------------------------------------------------------------

class BallPossessionLabel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BallPossessionLabel) */ {
 public:
  inline BallPossessionLabel() : BallPossessionLabel(nullptr) {};
  virtual ~BallPossessionLabel();

  BallPossessionLabel(const BallPossessionLabel& from);
  BallPossessionLabel(BallPossessionLabel&& from) noexcept
    : BallPossessionLabel() {
    *this = ::std::move(from);
  }

  inline BallPossessionLabel& operator=(const BallPossessionLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline BallPossessionLabel& operator=(BallPossessionLabel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BallPossessionLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallPossessionLabel* internal_default_instance() {
    return reinterpret_cast<const BallPossessionLabel*>(
               &_BallPossessionLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BallPossessionLabel& a, BallPossessionLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(BallPossessionLabel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BallPossessionLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BallPossessionLabel* New() const final {
    return CreateMaybeMessage<BallPossessionLabel>(nullptr);
  }

  BallPossessionLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BallPossessionLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BallPossessionLabel& from);
  void MergeFrom(const BallPossessionLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallPossessionLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BallPossessionLabel";
  }
  protected:
  explicit BallPossessionLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_log_5flabels_2eproto);
    return ::descriptor_table_log_5flabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BallPossessionLabel_State State;
  static constexpr State NONE =
    BallPossessionLabel_State_NONE;
  static constexpr State YELLOW_POSSES =
    BallPossessionLabel_State_YELLOW_POSSES;
  static constexpr State BLUE_POSSES =
    BallPossessionLabel_State_BLUE_POSSES;
  static inline bool State_IsValid(int value) {
    return BallPossessionLabel_State_IsValid(value);
  }
  static constexpr State State_MIN =
    BallPossessionLabel_State_State_MIN;
  static constexpr State State_MAX =
    BallPossessionLabel_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    BallPossessionLabel_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return BallPossessionLabel_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return BallPossessionLabel_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return BallPossessionLabel_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kRobotIdFieldNumber = 2,
  };
  // .BallPossessionLabel.State state = 1;
  void clear_state();
  ::BallPossessionLabel_State state() const;
  void set_state(::BallPossessionLabel_State value);
  private:
  ::BallPossessionLabel_State _internal_state() const;
  void _internal_set_state(::BallPossessionLabel_State value);
  public:

  // uint32 robot_id = 2;
  void clear_robot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id() const;
  void set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_robot_id() const;
  void _internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BallPossessionLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_5flabels_2eproto;
};
// -------------------------------------------------------------------

class PassingLabel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PassingLabel) */ {
 public:
  inline PassingLabel() : PassingLabel(nullptr) {};
  virtual ~PassingLabel();

  PassingLabel(const PassingLabel& from);
  PassingLabel(PassingLabel&& from) noexcept
    : PassingLabel() {
    *this = ::std::move(from);
  }

  inline PassingLabel& operator=(const PassingLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassingLabel& operator=(PassingLabel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PassingLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassingLabel* internal_default_instance() {
    return reinterpret_cast<const PassingLabel*>(
               &_PassingLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PassingLabel& a, PassingLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(PassingLabel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PassingLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PassingLabel* New() const final {
    return CreateMaybeMessage<PassingLabel>(nullptr);
  }

  PassingLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PassingLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PassingLabel& from);
  void MergeFrom(const PassingLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassingLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PassingLabel";
  }
  protected:
  explicit PassingLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_log_5flabels_2eproto);
    return ::descriptor_table_log_5flabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFrameFieldNumber = 1,
    kEndFrameFieldNumber = 2,
    kSuccessfulFieldNumber = 3,
    kPasserIdFieldNumber = 4,
    kPasserTeamFieldNumber = 5,
    kReceiverIdFieldNumber = 6,
  };
  // uint64 start_frame = 1;
  void clear_start_frame();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_frame() const;
  void set_start_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_frame() const;
  void _internal_set_start_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_frame = 2;
  void clear_end_frame();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_frame() const;
  void set_end_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_frame() const;
  void _internal_set_end_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool successful = 3;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // uint32 passer_id = 4;
  void clear_passer_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 passer_id() const;
  void set_passer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_passer_id() const;
  void _internal_set_passer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .TeamColor passer_team = 5;
  void clear_passer_team();
  ::TeamColor passer_team() const;
  void set_passer_team(::TeamColor value);
  private:
  ::TeamColor _internal_passer_team() const;
  void _internal_set_passer_team(::TeamColor value);
  public:

  // uint32 receiver_id = 6;
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PassingLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_frame_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_frame_;
  bool successful_;
  ::PROTOBUF_NAMESPACE_ID::uint32 passer_id_;
  int passer_team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_5flabels_2eproto;
};
// -------------------------------------------------------------------

class GoalShotLabel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GoalShotLabel) */ {
 public:
  inline GoalShotLabel() : GoalShotLabel(nullptr) {};
  virtual ~GoalShotLabel();

  GoalShotLabel(const GoalShotLabel& from);
  GoalShotLabel(GoalShotLabel&& from) noexcept
    : GoalShotLabel() {
    *this = ::std::move(from);
  }

  inline GoalShotLabel& operator=(const GoalShotLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoalShotLabel& operator=(GoalShotLabel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoalShotLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoalShotLabel* internal_default_instance() {
    return reinterpret_cast<const GoalShotLabel*>(
               &_GoalShotLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GoalShotLabel& a, GoalShotLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(GoalShotLabel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoalShotLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoalShotLabel* New() const final {
    return CreateMaybeMessage<GoalShotLabel>(nullptr);
  }

  GoalShotLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoalShotLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoalShotLabel& from);
  void MergeFrom(const GoalShotLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoalShotLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GoalShotLabel";
  }
  protected:
  explicit GoalShotLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_log_5flabels_2eproto);
    return ::descriptor_table_log_5flabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFrameFieldNumber = 1,
    kEndFrameFieldNumber = 2,
    kSuccessfulFieldNumber = 3,
    kShooterIdFieldNumber = 4,
    kShooterTeamFieldNumber = 5,
  };
  // uint64 start_frame = 1;
  void clear_start_frame();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_frame() const;
  void set_start_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_frame() const;
  void _internal_set_start_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_frame = 2;
  void clear_end_frame();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_frame() const;
  void set_end_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_frame() const;
  void _internal_set_end_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool successful = 3;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // uint32 shooter_id = 4;
  void clear_shooter_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 shooter_id() const;
  void set_shooter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shooter_id() const;
  void _internal_set_shooter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .TeamColor shooter_team = 5;
  void clear_shooter_team();
  ::TeamColor shooter_team() const;
  void set_shooter_team(::TeamColor value);
  private:
  ::TeamColor _internal_shooter_team() const;
  void _internal_set_shooter_team(::TeamColor value);
  public:

  // @@protoc_insertion_point(class_scope:GoalShotLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_frame_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_frame_;
  bool successful_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shooter_id_;
  int shooter_team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_5flabels_2eproto;
};
// -------------------------------------------------------------------

class Labels PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Labels) */ {
 public:
  inline Labels() : Labels(nullptr) {};
  virtual ~Labels();

  Labels(const Labels& from);
  Labels(Labels&& from) noexcept
    : Labels() {
    *this = ::std::move(from);
  }

  inline Labels& operator=(const Labels& from) {
    CopyFrom(from);
    return *this;
  }
  inline Labels& operator=(Labels&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Labels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Labels* internal_default_instance() {
    return reinterpret_cast<const Labels*>(
               &_Labels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Labels& a, Labels& b) {
    a.Swap(&b);
  }
  inline void Swap(Labels* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Labels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Labels* New() const final {
    return CreateMaybeMessage<Labels>(nullptr);
  }

  Labels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Labels>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Labels& from);
  void MergeFrom(const Labels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Labels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Labels";
  }
  protected:
  explicit Labels(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_log_5flabels_2eproto);
    return ::descriptor_table_log_5flabels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDribblingLabelsFieldNumber = 1,
    kBallPossessionLabelsFieldNumber = 2,
    kPassingLabelsFieldNumber = 3,
    kGoalShotLabelsFieldNumber = 4,
  };
  // repeated .DribblingLabel dribbling_labels = 1;
  int dribbling_labels_size() const;
  private:
  int _internal_dribbling_labels_size() const;
  public:
  void clear_dribbling_labels();
  ::DribblingLabel* mutable_dribbling_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DribblingLabel >*
      mutable_dribbling_labels();
  private:
  const ::DribblingLabel& _internal_dribbling_labels(int index) const;
  ::DribblingLabel* _internal_add_dribbling_labels();
  public:
  const ::DribblingLabel& dribbling_labels(int index) const;
  ::DribblingLabel* add_dribbling_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DribblingLabel >&
      dribbling_labels() const;

  // repeated .BallPossessionLabel ball_possession_labels = 2;
  int ball_possession_labels_size() const;
  private:
  int _internal_ball_possession_labels_size() const;
  public:
  void clear_ball_possession_labels();
  ::BallPossessionLabel* mutable_ball_possession_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BallPossessionLabel >*
      mutable_ball_possession_labels();
  private:
  const ::BallPossessionLabel& _internal_ball_possession_labels(int index) const;
  ::BallPossessionLabel* _internal_add_ball_possession_labels();
  public:
  const ::BallPossessionLabel& ball_possession_labels(int index) const;
  ::BallPossessionLabel* add_ball_possession_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BallPossessionLabel >&
      ball_possession_labels() const;

  // repeated .PassingLabel passing_labels = 3;
  int passing_labels_size() const;
  private:
  int _internal_passing_labels_size() const;
  public:
  void clear_passing_labels();
  ::PassingLabel* mutable_passing_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PassingLabel >*
      mutable_passing_labels();
  private:
  const ::PassingLabel& _internal_passing_labels(int index) const;
  ::PassingLabel* _internal_add_passing_labels();
  public:
  const ::PassingLabel& passing_labels(int index) const;
  ::PassingLabel* add_passing_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PassingLabel >&
      passing_labels() const;

  // repeated .GoalShotLabel goal_shot_labels = 4;
  int goal_shot_labels_size() const;
  private:
  int _internal_goal_shot_labels_size() const;
  public:
  void clear_goal_shot_labels();
  ::GoalShotLabel* mutable_goal_shot_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GoalShotLabel >*
      mutable_goal_shot_labels();
  private:
  const ::GoalShotLabel& _internal_goal_shot_labels(int index) const;
  ::GoalShotLabel* _internal_add_goal_shot_labels();
  public:
  const ::GoalShotLabel& goal_shot_labels(int index) const;
  ::GoalShotLabel* add_goal_shot_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GoalShotLabel >&
      goal_shot_labels() const;

  // @@protoc_insertion_point(class_scope:Labels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DribblingLabel > dribbling_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BallPossessionLabel > ball_possession_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PassingLabel > passing_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GoalShotLabel > goal_shot_labels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_log_5flabels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DribblingLabel

// bool is_dribbling = 1;
inline void DribblingLabel::clear_is_dribbling() {
  is_dribbling_ = false;
}
inline bool DribblingLabel::_internal_is_dribbling() const {
  return is_dribbling_;
}
inline bool DribblingLabel::is_dribbling() const {
  // @@protoc_insertion_point(field_get:DribblingLabel.is_dribbling)
  return _internal_is_dribbling();
}
inline void DribblingLabel::_internal_set_is_dribbling(bool value) {
  
  is_dribbling_ = value;
}
inline void DribblingLabel::set_is_dribbling(bool value) {
  _internal_set_is_dribbling(value);
  // @@protoc_insertion_point(field_set:DribblingLabel.is_dribbling)
}

// uint32 robot_id = 2;
inline void DribblingLabel::clear_robot_id() {
  robot_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DribblingLabel::_internal_robot_id() const {
  return robot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DribblingLabel::robot_id() const {
  // @@protoc_insertion_point(field_get:DribblingLabel.robot_id)
  return _internal_robot_id();
}
inline void DribblingLabel::_internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  robot_id_ = value;
}
inline void DribblingLabel::set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:DribblingLabel.robot_id)
}

// .TeamColor team = 3;
inline void DribblingLabel::clear_team() {
  team_ = 0;
}
inline ::TeamColor DribblingLabel::_internal_team() const {
  return static_cast< ::TeamColor >(team_);
}
inline ::TeamColor DribblingLabel::team() const {
  // @@protoc_insertion_point(field_get:DribblingLabel.team)
  return _internal_team();
}
inline void DribblingLabel::_internal_set_team(::TeamColor value) {
  
  team_ = value;
}
inline void DribblingLabel::set_team(::TeamColor value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:DribblingLabel.team)
}

// -------------------------------------------------------------------

// BallPossessionLabel

// .BallPossessionLabel.State state = 1;
inline void BallPossessionLabel::clear_state() {
  state_ = 0;
}
inline ::BallPossessionLabel_State BallPossessionLabel::_internal_state() const {
  return static_cast< ::BallPossessionLabel_State >(state_);
}
inline ::BallPossessionLabel_State BallPossessionLabel::state() const {
  // @@protoc_insertion_point(field_get:BallPossessionLabel.state)
  return _internal_state();
}
inline void BallPossessionLabel::_internal_set_state(::BallPossessionLabel_State value) {
  
  state_ = value;
}
inline void BallPossessionLabel::set_state(::BallPossessionLabel_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:BallPossessionLabel.state)
}

// uint32 robot_id = 2;
inline void BallPossessionLabel::clear_robot_id() {
  robot_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BallPossessionLabel::_internal_robot_id() const {
  return robot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BallPossessionLabel::robot_id() const {
  // @@protoc_insertion_point(field_get:BallPossessionLabel.robot_id)
  return _internal_robot_id();
}
inline void BallPossessionLabel::_internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  robot_id_ = value;
}
inline void BallPossessionLabel::set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:BallPossessionLabel.robot_id)
}

// -------------------------------------------------------------------

// PassingLabel

// uint64 start_frame = 1;
inline void PassingLabel::clear_start_frame() {
  start_frame_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PassingLabel::_internal_start_frame() const {
  return start_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PassingLabel::start_frame() const {
  // @@protoc_insertion_point(field_get:PassingLabel.start_frame)
  return _internal_start_frame();
}
inline void PassingLabel::_internal_set_start_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_frame_ = value;
}
inline void PassingLabel::set_start_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_frame(value);
  // @@protoc_insertion_point(field_set:PassingLabel.start_frame)
}

// uint64 end_frame = 2;
inline void PassingLabel::clear_end_frame() {
  end_frame_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PassingLabel::_internal_end_frame() const {
  return end_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PassingLabel::end_frame() const {
  // @@protoc_insertion_point(field_get:PassingLabel.end_frame)
  return _internal_end_frame();
}
inline void PassingLabel::_internal_set_end_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_frame_ = value;
}
inline void PassingLabel::set_end_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_frame(value);
  // @@protoc_insertion_point(field_set:PassingLabel.end_frame)
}

// bool successful = 3;
inline void PassingLabel::clear_successful() {
  successful_ = false;
}
inline bool PassingLabel::_internal_successful() const {
  return successful_;
}
inline bool PassingLabel::successful() const {
  // @@protoc_insertion_point(field_get:PassingLabel.successful)
  return _internal_successful();
}
inline void PassingLabel::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void PassingLabel::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:PassingLabel.successful)
}

// uint32 passer_id = 4;
inline void PassingLabel::clear_passer_id() {
  passer_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PassingLabel::_internal_passer_id() const {
  return passer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PassingLabel::passer_id() const {
  // @@protoc_insertion_point(field_get:PassingLabel.passer_id)
  return _internal_passer_id();
}
inline void PassingLabel::_internal_set_passer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  passer_id_ = value;
}
inline void PassingLabel::set_passer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_passer_id(value);
  // @@protoc_insertion_point(field_set:PassingLabel.passer_id)
}

// .TeamColor passer_team = 5;
inline void PassingLabel::clear_passer_team() {
  passer_team_ = 0;
}
inline ::TeamColor PassingLabel::_internal_passer_team() const {
  return static_cast< ::TeamColor >(passer_team_);
}
inline ::TeamColor PassingLabel::passer_team() const {
  // @@protoc_insertion_point(field_get:PassingLabel.passer_team)
  return _internal_passer_team();
}
inline void PassingLabel::_internal_set_passer_team(::TeamColor value) {
  
  passer_team_ = value;
}
inline void PassingLabel::set_passer_team(::TeamColor value) {
  _internal_set_passer_team(value);
  // @@protoc_insertion_point(field_set:PassingLabel.passer_team)
}

// uint32 receiver_id = 6;
inline void PassingLabel::clear_receiver_id() {
  receiver_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PassingLabel::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PassingLabel::receiver_id() const {
  // @@protoc_insertion_point(field_get:PassingLabel.receiver_id)
  return _internal_receiver_id();
}
inline void PassingLabel::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  receiver_id_ = value;
}
inline void PassingLabel::set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:PassingLabel.receiver_id)
}

// -------------------------------------------------------------------

// GoalShotLabel

// uint64 start_frame = 1;
inline void GoalShotLabel::clear_start_frame() {
  start_frame_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GoalShotLabel::_internal_start_frame() const {
  return start_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GoalShotLabel::start_frame() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.start_frame)
  return _internal_start_frame();
}
inline void GoalShotLabel::_internal_set_start_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_frame_ = value;
}
inline void GoalShotLabel::set_start_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_frame(value);
  // @@protoc_insertion_point(field_set:GoalShotLabel.start_frame)
}

// uint64 end_frame = 2;
inline void GoalShotLabel::clear_end_frame() {
  end_frame_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GoalShotLabel::_internal_end_frame() const {
  return end_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GoalShotLabel::end_frame() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.end_frame)
  return _internal_end_frame();
}
inline void GoalShotLabel::_internal_set_end_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_frame_ = value;
}
inline void GoalShotLabel::set_end_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_frame(value);
  // @@protoc_insertion_point(field_set:GoalShotLabel.end_frame)
}

// bool successful = 3;
inline void GoalShotLabel::clear_successful() {
  successful_ = false;
}
inline bool GoalShotLabel::_internal_successful() const {
  return successful_;
}
inline bool GoalShotLabel::successful() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.successful)
  return _internal_successful();
}
inline void GoalShotLabel::_internal_set_successful(bool value) {
  
  successful_ = value;
}
inline void GoalShotLabel::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:GoalShotLabel.successful)
}

// uint32 shooter_id = 4;
inline void GoalShotLabel::clear_shooter_id() {
  shooter_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GoalShotLabel::_internal_shooter_id() const {
  return shooter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GoalShotLabel::shooter_id() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.shooter_id)
  return _internal_shooter_id();
}
inline void GoalShotLabel::_internal_set_shooter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shooter_id_ = value;
}
inline void GoalShotLabel::set_shooter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shooter_id(value);
  // @@protoc_insertion_point(field_set:GoalShotLabel.shooter_id)
}

// .TeamColor shooter_team = 5;
inline void GoalShotLabel::clear_shooter_team() {
  shooter_team_ = 0;
}
inline ::TeamColor GoalShotLabel::_internal_shooter_team() const {
  return static_cast< ::TeamColor >(shooter_team_);
}
inline ::TeamColor GoalShotLabel::shooter_team() const {
  // @@protoc_insertion_point(field_get:GoalShotLabel.shooter_team)
  return _internal_shooter_team();
}
inline void GoalShotLabel::_internal_set_shooter_team(::TeamColor value) {
  
  shooter_team_ = value;
}
inline void GoalShotLabel::set_shooter_team(::TeamColor value) {
  _internal_set_shooter_team(value);
  // @@protoc_insertion_point(field_set:GoalShotLabel.shooter_team)
}

// -------------------------------------------------------------------

// Labels

// repeated .DribblingLabel dribbling_labels = 1;
inline int Labels::_internal_dribbling_labels_size() const {
  return dribbling_labels_.size();
}
inline int Labels::dribbling_labels_size() const {
  return _internal_dribbling_labels_size();
}
inline void Labels::clear_dribbling_labels() {
  dribbling_labels_.Clear();
}
inline ::DribblingLabel* Labels::mutable_dribbling_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Labels.dribbling_labels)
  return dribbling_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DribblingLabel >*
Labels::mutable_dribbling_labels() {
  // @@protoc_insertion_point(field_mutable_list:Labels.dribbling_labels)
  return &dribbling_labels_;
}
inline const ::DribblingLabel& Labels::_internal_dribbling_labels(int index) const {
  return dribbling_labels_.Get(index);
}
inline const ::DribblingLabel& Labels::dribbling_labels(int index) const {
  // @@protoc_insertion_point(field_get:Labels.dribbling_labels)
  return _internal_dribbling_labels(index);
}
inline ::DribblingLabel* Labels::_internal_add_dribbling_labels() {
  return dribbling_labels_.Add();
}
inline ::DribblingLabel* Labels::add_dribbling_labels() {
  // @@protoc_insertion_point(field_add:Labels.dribbling_labels)
  return _internal_add_dribbling_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DribblingLabel >&
Labels::dribbling_labels() const {
  // @@protoc_insertion_point(field_list:Labels.dribbling_labels)
  return dribbling_labels_;
}

// repeated .BallPossessionLabel ball_possession_labels = 2;
inline int Labels::_internal_ball_possession_labels_size() const {
  return ball_possession_labels_.size();
}
inline int Labels::ball_possession_labels_size() const {
  return _internal_ball_possession_labels_size();
}
inline void Labels::clear_ball_possession_labels() {
  ball_possession_labels_.Clear();
}
inline ::BallPossessionLabel* Labels::mutable_ball_possession_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Labels.ball_possession_labels)
  return ball_possession_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BallPossessionLabel >*
Labels::mutable_ball_possession_labels() {
  // @@protoc_insertion_point(field_mutable_list:Labels.ball_possession_labels)
  return &ball_possession_labels_;
}
inline const ::BallPossessionLabel& Labels::_internal_ball_possession_labels(int index) const {
  return ball_possession_labels_.Get(index);
}
inline const ::BallPossessionLabel& Labels::ball_possession_labels(int index) const {
  // @@protoc_insertion_point(field_get:Labels.ball_possession_labels)
  return _internal_ball_possession_labels(index);
}
inline ::BallPossessionLabel* Labels::_internal_add_ball_possession_labels() {
  return ball_possession_labels_.Add();
}
inline ::BallPossessionLabel* Labels::add_ball_possession_labels() {
  // @@protoc_insertion_point(field_add:Labels.ball_possession_labels)
  return _internal_add_ball_possession_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BallPossessionLabel >&
Labels::ball_possession_labels() const {
  // @@protoc_insertion_point(field_list:Labels.ball_possession_labels)
  return ball_possession_labels_;
}

// repeated .PassingLabel passing_labels = 3;
inline int Labels::_internal_passing_labels_size() const {
  return passing_labels_.size();
}
inline int Labels::passing_labels_size() const {
  return _internal_passing_labels_size();
}
inline void Labels::clear_passing_labels() {
  passing_labels_.Clear();
}
inline ::PassingLabel* Labels::mutable_passing_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Labels.passing_labels)
  return passing_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PassingLabel >*
Labels::mutable_passing_labels() {
  // @@protoc_insertion_point(field_mutable_list:Labels.passing_labels)
  return &passing_labels_;
}
inline const ::PassingLabel& Labels::_internal_passing_labels(int index) const {
  return passing_labels_.Get(index);
}
inline const ::PassingLabel& Labels::passing_labels(int index) const {
  // @@protoc_insertion_point(field_get:Labels.passing_labels)
  return _internal_passing_labels(index);
}
inline ::PassingLabel* Labels::_internal_add_passing_labels() {
  return passing_labels_.Add();
}
inline ::PassingLabel* Labels::add_passing_labels() {
  // @@protoc_insertion_point(field_add:Labels.passing_labels)
  return _internal_add_passing_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PassingLabel >&
Labels::passing_labels() const {
  // @@protoc_insertion_point(field_list:Labels.passing_labels)
  return passing_labels_;
}

// repeated .GoalShotLabel goal_shot_labels = 4;
inline int Labels::_internal_goal_shot_labels_size() const {
  return goal_shot_labels_.size();
}
inline int Labels::goal_shot_labels_size() const {
  return _internal_goal_shot_labels_size();
}
inline void Labels::clear_goal_shot_labels() {
  goal_shot_labels_.Clear();
}
inline ::GoalShotLabel* Labels::mutable_goal_shot_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Labels.goal_shot_labels)
  return goal_shot_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GoalShotLabel >*
Labels::mutable_goal_shot_labels() {
  // @@protoc_insertion_point(field_mutable_list:Labels.goal_shot_labels)
  return &goal_shot_labels_;
}
inline const ::GoalShotLabel& Labels::_internal_goal_shot_labels(int index) const {
  return goal_shot_labels_.Get(index);
}
inline const ::GoalShotLabel& Labels::goal_shot_labels(int index) const {
  // @@protoc_insertion_point(field_get:Labels.goal_shot_labels)
  return _internal_goal_shot_labels(index);
}
inline ::GoalShotLabel* Labels::_internal_add_goal_shot_labels() {
  return goal_shot_labels_.Add();
}
inline ::GoalShotLabel* Labels::add_goal_shot_labels() {
  // @@protoc_insertion_point(field_add:Labels.goal_shot_labels)
  return _internal_add_goal_shot_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GoalShotLabel >&
Labels::goal_shot_labels() const {
  // @@protoc_insertion_point(field_list:Labels.goal_shot_labels)
  return goal_shot_labels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BallPossessionLabel_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BallPossessionLabel_State>() {
  return ::BallPossessionLabel_State_descriptor();
}
template <> struct is_proto_enum< ::TeamColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamColor>() {
  return ::TeamColor_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_log_5flabels_2eproto
