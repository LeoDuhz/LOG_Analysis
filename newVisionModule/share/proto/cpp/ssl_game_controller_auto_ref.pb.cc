// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_auto_ref.proto

#include "ssl_game_controller_auto_ref.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr AutoRefRegistration::AutoRefRegistration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(nullptr){}
struct AutoRefRegistrationDefaultTypeInternal {
  constexpr AutoRefRegistrationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoRefRegistrationDefaultTypeInternal() {}
  union {
    AutoRefRegistration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoRefRegistrationDefaultTypeInternal _AutoRefRegistration_default_instance_;
constexpr AutoRefToController::AutoRefToController(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(nullptr)
  , game_event_(nullptr)
  , auto_ref_message_(nullptr){}
struct AutoRefToControllerDefaultTypeInternal {
  constexpr AutoRefToControllerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoRefToControllerDefaultTypeInternal() {}
  union {
    AutoRefToController _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoRefToControllerDefaultTypeInternal _AutoRefToController_default_instance_;
constexpr ControllerToAutoRef::ControllerToAutoRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ControllerToAutoRefDefaultTypeInternal {
  constexpr ControllerToAutoRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerToAutoRefDefaultTypeInternal() {}
  union {
    ControllerToAutoRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerToAutoRefDefaultTypeInternal _ControllerToAutoRef_default_instance_;
constexpr AutoRefMessage_WaitForBots_Violator::AutoRefMessage_WaitForBots_Violator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bot_id_(nullptr)
  , distance_(0){}
struct AutoRefMessage_WaitForBots_ViolatorDefaultTypeInternal {
  constexpr AutoRefMessage_WaitForBots_ViolatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoRefMessage_WaitForBots_ViolatorDefaultTypeInternal() {}
  union {
    AutoRefMessage_WaitForBots_Violator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoRefMessage_WaitForBots_ViolatorDefaultTypeInternal _AutoRefMessage_WaitForBots_Violator_default_instance_;
constexpr AutoRefMessage_WaitForBots::AutoRefMessage_WaitForBots(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : violators_(){}
struct AutoRefMessage_WaitForBotsDefaultTypeInternal {
  constexpr AutoRefMessage_WaitForBotsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoRefMessage_WaitForBotsDefaultTypeInternal() {}
  union {
    AutoRefMessage_WaitForBots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoRefMessage_WaitForBotsDefaultTypeInternal _AutoRefMessage_WaitForBots_default_instance_;
constexpr AutoRefMessage::AutoRefMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AutoRefMessageDefaultTypeInternal {
  constexpr AutoRefMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoRefMessageDefaultTypeInternal() {}
  union {
    AutoRefMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoRefMessageDefaultTypeInternal _AutoRefMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AutoRefRegistration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AutoRefRegistration, identifier_),
  PROTOBUF_FIELD_OFFSET(::AutoRefRegistration, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, signature_),
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, game_event_),
  PROTOBUF_FIELD_OFFSET(::AutoRefToController, auto_ref_message_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControllerToAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ControllerToAutoRef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ControllerToAutoRef, msg_),
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage_WaitForBots_Violator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage_WaitForBots_Violator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage_WaitForBots_Violator, bot_id_),
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage_WaitForBots_Violator, distance_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage_WaitForBots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage_WaitForBots, violators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::AutoRefMessage, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::AutoRefRegistration)},
  { 9, 17, sizeof(::AutoRefToController)},
  { 20, -1, sizeof(::ControllerToAutoRef)},
  { 27, 34, sizeof(::AutoRefMessage_WaitForBots_Violator)},
  { 36, -1, sizeof(::AutoRefMessage_WaitForBots)},
  { 42, -1, sizeof(::AutoRefMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AutoRefRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AutoRefToController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ControllerToAutoRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AutoRefMessage_WaitForBots_Violator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AutoRefMessage_WaitForBots_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AutoRefMessage_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ssl_game_controller_auto_ref.proto\032 ss"
  "l_game_controller_common.proto\032\031ssl_game"
  "_event_2019.proto\"H\n\023AutoRefRegistration"
  "\022\022\n\nidentifier\030\001 \002(\t\022\035\n\tsignature\030\002 \001(\0132"
  "\n.Signature\"\203\001\n\023AutoRefToController\022\035\n\ts"
  "ignature\030\001 \001(\0132\n.Signature\022\036\n\ngame_event"
  "\030\002 \001(\0132\n.GameEvent\022-\n\020auto_ref_message\030\003"
  " \001(\0132\017.AutoRefMessageB\002\030\001\"J\n\023ControllerT"
  "oAutoRef\022,\n\020controller_reply\030\001 \001(\0132\020.Con"
  "trollerReplyH\000B\005\n\003msg\"\341\001\n\016AutoRefMessage"
  "\022\020\n\006custom\030\001 \001(\tH\000\0224\n\rwait_for_bots\030\002 \001("
  "\0132\033.AutoRefMessage.WaitForBotsH\000\032|\n\013Wait"
  "ForBots\0227\n\tviolators\030\001 \003(\0132$.AutoRefMess"
  "age.WaitForBots.Violator\0324\n\010Violator\022\026\n\006"
  "bot_id\030\001 \002(\0132\006.BotId\022\020\n\010distance\030\002 \002(\002B\t"
  "\n\007message"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_deps[2] = {
  &::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgame_5fevent_5f2019_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto = {
  false, false, 609, descriptor_table_protodef_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto, "ssl_game_controller_auto_ref.proto", 
  &descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_once, descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto::offsets,
  file_level_metadata_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto, file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto, file_level_service_descriptors_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);
  return descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto(&descriptor_table_ssl_5fgame_5fcontroller_5fauto_5fref_2eproto);

// ===================================================================

class AutoRefRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefRegistration>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Signature& signature(const AutoRefRegistration* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::Signature&
AutoRefRegistration::_Internal::signature(const AutoRefRegistration* msg) {
  return *msg->signature_;
}
void AutoRefRegistration::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AutoRefRegistration::AutoRefRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AutoRefRegistration)
}
AutoRefRegistration::AutoRefRegistration(const AutoRefRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefRegistration)
}

void AutoRefRegistration::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_ = nullptr;
}

AutoRefRegistration::~AutoRefRegistration() {
  // @@protoc_insertion_point(destructor:AutoRefRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoRefRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void AutoRefRegistration::ArenaDtor(void* object) {
  AutoRefRegistration* _this = reinterpret_cast< AutoRefRegistration* >(object);
  (void)_this;
}
void AutoRefRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoRefRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoRefRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AutoRefRegistration.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoRefRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AutoRefRegistration.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefRegistration)
  return target;
}

size_t AutoRefRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefRegistration)
  size_t total_size = 0;

  // required string identifier = 1;
  if (_internal_has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Signature signature = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoRefRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefRegistration)
    MergeFrom(*source);
  }
}

void AutoRefRegistration::MergeFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signature()->::Signature::MergeFrom(from._internal_signature());
    }
  }
}

void AutoRefRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefRegistration::CopyFrom(const AutoRefRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefRegistration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefRegistration::InternalSwap(AutoRefRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(signature_, other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AutoRefToController::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefToController>()._has_bits_);
  static const ::Signature& signature(const AutoRefToController* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GameEvent& game_event(const AutoRefToController* msg);
  static void set_has_game_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::AutoRefMessage& auto_ref_message(const AutoRefToController* msg);
  static void set_has_auto_ref_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Signature&
AutoRefToController::_Internal::signature(const AutoRefToController* msg) {
  return *msg->signature_;
}
const ::GameEvent&
AutoRefToController::_Internal::game_event(const AutoRefToController* msg) {
  return *msg->game_event_;
}
const ::AutoRefMessage&
AutoRefToController::_Internal::auto_ref_message(const AutoRefToController* msg) {
  return *msg->auto_ref_message_;
}
void AutoRefToController::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AutoRefToController::clear_game_event() {
  if (game_event_ != nullptr) game_event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AutoRefToController::AutoRefToController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AutoRefToController)
}
AutoRefToController::AutoRefToController(const AutoRefToController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    signature_ = new ::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = nullptr;
  }
  if (from._internal_has_auto_ref_message()) {
    auto_ref_message_ = new ::AutoRefMessage(*from.auto_ref_message_);
  } else {
    auto_ref_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefToController)
}

void AutoRefToController::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_ref_message_) -
    reinterpret_cast<char*>(&signature_)) + sizeof(auto_ref_message_));
}

AutoRefToController::~AutoRefToController() {
  // @@protoc_insertion_point(destructor:AutoRefToController)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoRefToController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete game_event_;
  if (this != internal_default_instance()) delete auto_ref_message_;
}

void AutoRefToController::ArenaDtor(void* object) {
  AutoRefToController* _this = reinterpret_cast< AutoRefToController* >(object);
  (void)_this;
}
void AutoRefToController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoRefToController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoRefToController::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefToController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_event_ != nullptr);
      game_event_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(auto_ref_message_ != nullptr);
      auto_ref_message_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefToController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Signature signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEvent game_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_ref_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoRefToController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefToController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::signature(this), target, stream);
  }

  // optional .GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game_event(this), target, stream);
  }

  // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::auto_ref_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefToController)
  return target;
}

size_t AutoRefToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefToController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Signature signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .GameEvent game_event = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_event_);
    }

    // optional .AutoRefMessage auto_ref_message = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_ref_message_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefToController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefToController)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefToController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoRefToController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefToController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefToController)
    MergeFrom(*source);
  }
}

void AutoRefToController::MergeFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_signature()->::Signature::MergeFrom(from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_game_event()->::GameEvent::MergeFrom(from._internal_game_event());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_auto_ref_message()->::AutoRefMessage::MergeFrom(from._internal_auto_ref_message());
    }
  }
}

void AutoRefToController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefToController::CopyFrom(const AutoRefToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefToController::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  if (_internal_has_game_event()) {
    if (!game_event_->IsInitialized()) return false;
  }
  if (_internal_has_auto_ref_message()) {
    if (!auto_ref_message_->IsInitialized()) return false;
  }
  return true;
}

void AutoRefToController::InternalSwap(AutoRefToController* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoRefToController, auto_ref_message_)
      + sizeof(AutoRefToController::auto_ref_message_)
      - PROTOBUF_FIELD_OFFSET(AutoRefToController, signature_)>(
          reinterpret_cast<char*>(&signature_),
          reinterpret_cast<char*>(&other->signature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefToController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControllerToAutoRef::_Internal {
 public:
  static const ::ControllerReply& controller_reply(const ControllerToAutoRef* msg);
};

const ::ControllerReply&
ControllerToAutoRef::_Internal::controller_reply(const ControllerToAutoRef* msg) {
  return *msg->msg_.controller_reply_;
}
void ControllerToAutoRef::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (controller_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_reply)->GetArena();
    if (message_arena != submessage_arena) {
      controller_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToAutoRef.controller_reply)
}
void ControllerToAutoRef::clear_controller_reply() {
  if (_internal_has_controller_reply()) {
    if (GetArena() == nullptr) {
      delete msg_.controller_reply_;
    }
    clear_has_msg();
  }
}
ControllerToAutoRef::ControllerToAutoRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ControllerToAutoRef)
}
ControllerToAutoRef::ControllerToAutoRef(const ControllerToAutoRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      _internal_mutable_controller_reply()->::ControllerReply::MergeFrom(from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ControllerToAutoRef)
}

void ControllerToAutoRef::SharedCtor() {
clear_has_msg();
}

ControllerToAutoRef::~ControllerToAutoRef() {
  // @@protoc_insertion_point(destructor:ControllerToAutoRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerToAutoRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToAutoRef::ArenaDtor(void* object) {
  ControllerToAutoRef* _this = reinterpret_cast< ControllerToAutoRef* >(object);
  (void)_this;
}
void ControllerToAutoRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerToAutoRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerToAutoRef::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ControllerToAutoRef)
  switch (msg_case()) {
    case kControllerReply: {
      if (GetArena() == nullptr) {
        delete msg_.controller_reply_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerToAutoRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerToAutoRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ControllerReply controller_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerToAutoRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerToAutoRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControllerReply controller_reply = 1;
  if (_internal_has_controller_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controller_reply(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerToAutoRef)
  return target;
}

size_t ControllerToAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerToAutoRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.controller_reply_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerToAutoRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToAutoRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerToAutoRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerToAutoRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerToAutoRef)
    MergeFrom(*source);
  }
}

void ControllerToAutoRef::MergeFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerToAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      _internal_mutable_controller_reply()->::ControllerReply::MergeFrom(from._internal_controller_reply());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ControllerToAutoRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToAutoRef::CopyFrom(const ControllerToAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerToAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToAutoRef::IsInitialized() const {
  return true;
}

void ControllerToAutoRef::InternalSwap(ControllerToAutoRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerToAutoRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AutoRefMessage_WaitForBots_Violator::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoRefMessage_WaitForBots_Violator>()._has_bits_);
  static const ::BotId& bot_id(const AutoRefMessage_WaitForBots_Violator* msg);
  static void set_has_bot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::BotId&
AutoRefMessage_WaitForBots_Violator::_Internal::bot_id(const AutoRefMessage_WaitForBots_Violator* msg) {
  return *msg->bot_id_;
}
void AutoRefMessage_WaitForBots_Violator::clear_bot_id() {
  if (bot_id_ != nullptr) bot_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AutoRefMessage_WaitForBots_Violator::AutoRefMessage_WaitForBots_Violator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AutoRefMessage.WaitForBots.Violator)
}
AutoRefMessage_WaitForBots_Violator::AutoRefMessage_WaitForBots_Violator(const AutoRefMessage_WaitForBots_Violator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bot_id()) {
    bot_id_ = new ::BotId(*from.bot_id_);
  } else {
    bot_id_ = nullptr;
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:AutoRefMessage.WaitForBots.Violator)
}

void AutoRefMessage_WaitForBots_Violator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&bot_id_)) + sizeof(distance_));
}

AutoRefMessage_WaitForBots_Violator::~AutoRefMessage_WaitForBots_Violator() {
  // @@protoc_insertion_point(destructor:AutoRefMessage.WaitForBots.Violator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoRefMessage_WaitForBots_Violator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bot_id_;
}

void AutoRefMessage_WaitForBots_Violator::ArenaDtor(void* object) {
  AutoRefMessage_WaitForBots_Violator* _this = reinterpret_cast< AutoRefMessage_WaitForBots_Violator* >(object);
  (void)_this;
}
void AutoRefMessage_WaitForBots_Violator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoRefMessage_WaitForBots_Violator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoRefMessage_WaitForBots_Violator::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefMessage.WaitForBots.Violator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(bot_id_ != nullptr);
    bot_id_->Clear();
  }
  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefMessage_WaitForBots_Violator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .BotId bot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoRefMessage_WaitForBots_Violator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefMessage.WaitForBots.Violator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .BotId bot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bot_id(this), target, stream);
  }

  // required float distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefMessage.WaitForBots.Violator)
  return target;
}

size_t AutoRefMessage_WaitForBots_Violator::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AutoRefMessage.WaitForBots.Violator)
  size_t total_size = 0;

  if (_internal_has_bot_id()) {
    // required .BotId bot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bot_id_);
  }

  if (_internal_has_distance()) {
    // required float distance = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t AutoRefMessage_WaitForBots_Violator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefMessage.WaitForBots.Violator)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .BotId bot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bot_id_);

    // required float distance = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefMessage_WaitForBots_Violator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefMessage.WaitForBots.Violator)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefMessage_WaitForBots_Violator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoRefMessage_WaitForBots_Violator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefMessage.WaitForBots.Violator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefMessage.WaitForBots.Violator)
    MergeFrom(*source);
  }
}

void AutoRefMessage_WaitForBots_Violator::MergeFrom(const AutoRefMessage_WaitForBots_Violator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefMessage.WaitForBots.Violator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bot_id()->::BotId::MergeFrom(from._internal_bot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutoRefMessage_WaitForBots_Violator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefMessage.WaitForBots.Violator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefMessage_WaitForBots_Violator::CopyFrom(const AutoRefMessage_WaitForBots_Violator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefMessage.WaitForBots.Violator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefMessage_WaitForBots_Violator::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AutoRefMessage_WaitForBots_Violator::InternalSwap(AutoRefMessage_WaitForBots_Violator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoRefMessage_WaitForBots_Violator, distance_)
      + sizeof(AutoRefMessage_WaitForBots_Violator::distance_)
      - PROTOBUF_FIELD_OFFSET(AutoRefMessage_WaitForBots_Violator, bot_id_)>(
          reinterpret_cast<char*>(&bot_id_),
          reinterpret_cast<char*>(&other->bot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefMessage_WaitForBots_Violator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AutoRefMessage_WaitForBots::_Internal {
 public:
};

AutoRefMessage_WaitForBots::AutoRefMessage_WaitForBots(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  violators_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AutoRefMessage.WaitForBots)
}
AutoRefMessage_WaitForBots::AutoRefMessage_WaitForBots(const AutoRefMessage_WaitForBots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      violators_(from.violators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AutoRefMessage.WaitForBots)
}

void AutoRefMessage_WaitForBots::SharedCtor() {
}

AutoRefMessage_WaitForBots::~AutoRefMessage_WaitForBots() {
  // @@protoc_insertion_point(destructor:AutoRefMessage.WaitForBots)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoRefMessage_WaitForBots::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoRefMessage_WaitForBots::ArenaDtor(void* object) {
  AutoRefMessage_WaitForBots* _this = reinterpret_cast< AutoRefMessage_WaitForBots* >(object);
  (void)_this;
}
void AutoRefMessage_WaitForBots::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoRefMessage_WaitForBots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoRefMessage_WaitForBots::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefMessage.WaitForBots)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  violators_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefMessage_WaitForBots::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_violators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoRefMessage_WaitForBots::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefMessage.WaitForBots)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_violators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_violators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefMessage.WaitForBots)
  return target;
}

size_t AutoRefMessage_WaitForBots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefMessage.WaitForBots)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AutoRefMessage.WaitForBots.Violator violators = 1;
  total_size += 1UL * this->_internal_violators_size();
  for (const auto& msg : this->violators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefMessage_WaitForBots::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefMessage.WaitForBots)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefMessage_WaitForBots* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoRefMessage_WaitForBots>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefMessage.WaitForBots)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefMessage.WaitForBots)
    MergeFrom(*source);
  }
}

void AutoRefMessage_WaitForBots::MergeFrom(const AutoRefMessage_WaitForBots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefMessage.WaitForBots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  violators_.MergeFrom(from.violators_);
}

void AutoRefMessage_WaitForBots::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefMessage.WaitForBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefMessage_WaitForBots::CopyFrom(const AutoRefMessage_WaitForBots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefMessage.WaitForBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefMessage_WaitForBots::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(violators_)) return false;
  return true;
}

void AutoRefMessage_WaitForBots::InternalSwap(AutoRefMessage_WaitForBots* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  violators_.InternalSwap(&other->violators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefMessage_WaitForBots::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AutoRefMessage::_Internal {
 public:
  static const ::AutoRefMessage_WaitForBots& wait_for_bots(const AutoRefMessage* msg);
};

const ::AutoRefMessage_WaitForBots&
AutoRefMessage::_Internal::wait_for_bots(const AutoRefMessage* msg) {
  return *msg->message_.wait_for_bots_;
}
void AutoRefMessage::set_allocated_wait_for_bots(::AutoRefMessage_WaitForBots* wait_for_bots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (wait_for_bots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wait_for_bots);
    if (message_arena != submessage_arena) {
      wait_for_bots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_for_bots, submessage_arena);
    }
    set_has_wait_for_bots();
    message_.wait_for_bots_ = wait_for_bots;
  }
  // @@protoc_insertion_point(field_set_allocated:AutoRefMessage.wait_for_bots)
}
AutoRefMessage::AutoRefMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AutoRefMessage)
}
AutoRefMessage::AutoRefMessage(const AutoRefMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kCustom: {
      _internal_set_custom(from._internal_custom());
      break;
    }
    case kWaitForBots: {
      _internal_mutable_wait_for_bots()->::AutoRefMessage_WaitForBots::MergeFrom(from._internal_wait_for_bots());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AutoRefMessage)
}

void AutoRefMessage::SharedCtor() {
clear_has_message();
}

AutoRefMessage::~AutoRefMessage() {
  // @@protoc_insertion_point(destructor:AutoRefMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoRefMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void AutoRefMessage::ArenaDtor(void* object) {
  AutoRefMessage* _this = reinterpret_cast< AutoRefMessage* >(object);
  (void)_this;
}
void AutoRefMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoRefMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoRefMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:AutoRefMessage)
  switch (message_case()) {
    case kCustom: {
      message_.custom_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kWaitForBots: {
      if (GetArena() == nullptr) {
        delete message_.wait_for_bots_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void AutoRefMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoRefMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoRefMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string custom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_custom();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AutoRefMessage.custom");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AutoRefMessage.WaitForBots wait_for_bots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_for_bots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoRefMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AutoRefMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (message_case()) {
    case kCustom: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_custom().data(), static_cast<int>(this->_internal_custom().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "AutoRefMessage.custom");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_custom(), target);
      break;
    }
    case kWaitForBots: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::wait_for_bots(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoRefMessage)
  return target;
}

size_t AutoRefMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoRefMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // string custom = 1;
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom());
      break;
    }
    // .AutoRefMessage.WaitForBots wait_for_bots = 2;
    case kWaitForBots: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.wait_for_bots_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoRefMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoRefMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoRefMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoRefMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoRefMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoRefMessage)
    MergeFrom(*source);
  }
}

void AutoRefMessage::MergeFrom(const AutoRefMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoRefMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kCustom: {
      _internal_set_custom(from._internal_custom());
      break;
    }
    case kWaitForBots: {
      _internal_mutable_wait_for_bots()->::AutoRefMessage_WaitForBots::MergeFrom(from._internal_wait_for_bots());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void AutoRefMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoRefMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefMessage::CopyFrom(const AutoRefMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoRefMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefMessage::IsInitialized() const {
  switch (message_case()) {
    case kCustom: {
      break;
    }
    case kWaitForBots: {
      if (has_wait_for_bots()) {
        if (!this->wait_for_bots().IsInitialized()) return false;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void AutoRefMessage::InternalSwap(AutoRefMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoRefMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AutoRefRegistration* Arena::CreateMaybeMessage< ::AutoRefRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefToController* Arena::CreateMaybeMessage< ::AutoRefToController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefToController >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerToAutoRef* Arena::CreateMaybeMessage< ::ControllerToAutoRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerToAutoRef >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefMessage_WaitForBots_Violator* Arena::CreateMaybeMessage< ::AutoRefMessage_WaitForBots_Violator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefMessage_WaitForBots_Violator >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefMessage_WaitForBots* Arena::CreateMaybeMessage< ::AutoRefMessage_WaitForBots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefMessage_WaitForBots >(arena);
}
template<> PROTOBUF_NOINLINE ::AutoRefMessage* Arena::CreateMaybeMessage< ::AutoRefMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AutoRefMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
