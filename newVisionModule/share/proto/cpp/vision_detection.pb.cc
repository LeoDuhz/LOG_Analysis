// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_detection.proto

#include "vision_detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vision_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vision_DetectionBall_vision_5fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vision_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vision_DetectionRobot_vision_5fdetection_2eproto;
class Vision_DetectionBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vision_DetectionBall> _instance;
} _Vision_DetectionBall_default_instance_;
class Vision_DetectionRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vision_DetectionRobot> _instance;
} _Vision_DetectionRobot_default_instance_;
class Vision_DetectionFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vision_DetectionFrame> _instance;
} _Vision_DetectionFrame_default_instance_;
static void InitDefaultsscc_info_Vision_DetectionBall_vision_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vision_DetectionBall_default_instance_;
    new (ptr) ::Vision_DetectionBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vision_DetectionBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vision_DetectionBall_vision_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vision_DetectionBall_vision_5fdetection_2eproto}, {}};

static void InitDefaultsscc_info_Vision_DetectionFrame_vision_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vision_DetectionFrame_default_instance_;
    new (ptr) ::Vision_DetectionFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vision_DetectionFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Vision_DetectionFrame_vision_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Vision_DetectionFrame_vision_5fdetection_2eproto}, {
      &scc_info_Vision_DetectionBall_vision_5fdetection_2eproto.base,
      &scc_info_Vision_DetectionRobot_vision_5fdetection_2eproto.base,}};

static void InitDefaultsscc_info_Vision_DetectionRobot_vision_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vision_DetectionRobot_default_instance_;
    new (ptr) ::Vision_DetectionRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vision_DetectionRobot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vision_DetectionRobot_vision_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vision_DetectionRobot_vision_5fdetection_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vision_5fdetection_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vision_5fdetection_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vision_5fdetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vision_5fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, vel_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, vel_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, area_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, height_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, ball_state_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, last_touch_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, valid_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, raw_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, raw_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_predict_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_predict_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_best_predict_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_best_predict_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, real_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, real_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, real_z_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_vel_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_vel_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_vel_z_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_second_pos_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_second_pos_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_fly_time_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionBall, chip_rest_fly_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, valid_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, robot_id_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, orientation_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, vel_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, vel_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, rotate_vel_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, accelerate_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, accelerate_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_orientation_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_vel_x_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_vel_y_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, raw_rotate_vel_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, imu_dir_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionRobot, imu_rotate_vel_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, balls_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, robots_yellow_),
  PROTOBUF_FIELD_OFFSET(::Vision_DetectionFrame, robots_blue_),
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, sizeof(::Vision_DetectionBall)},
  { 55, 78, sizeof(::Vision_DetectionRobot)},
  { 96, 104, sizeof(::Vision_DetectionFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vision_DetectionBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vision_DetectionRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vision_DetectionFrame_default_instance_),
};

const char descriptor_table_protodef_vision_5fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026vision_detection.proto\"\374\003\n\024Vision_Dete"
  "ctionBall\022\r\n\005vel_x\030\001 \001(\002\022\r\n\005vel_y\030\002 \001(\002\022"
  "\014\n\004area\030\003 \001(\r\022\t\n\001x\030\004 \002(\002\022\t\n\001y\030\005 \002(\002\022\016\n\006h"
  "eight\030\006 \001(\002\022\022\n\nball_state\030\007 \001(\r\022\022\n\nlast_"
  "touch\030\010 \001(\r\022\r\n\005valid\030\t \002(\010\022\r\n\005raw_x\030\n \002("
  "\002\022\r\n\005raw_y\030\013 \002(\002\022\026\n\016chip_predict_x\030\014 \001(\002"
  "\022\026\n\016chip_predict_y\030\r \001(\002\022\033\n\023chip_best_pr"
  "edict_x\030\016 \001(\002\022\033\n\023chip_best_predict_y\030\017 \001"
  "(\002\022\016\n\006real_x\030\020 \001(\002\022\016\n\006real_y\030\021 \001(\002\022\016\n\006re"
  "al_z\030\022 \001(\002\022\022\n\nchip_vel_x\030\023 \001(\002\022\022\n\nchip_v"
  "el_y\030\024 \001(\002\022\022\n\nchip_vel_z\030\025 \001(\002\022\031\n\021chip_s"
  "econd_pos_x\030\026 \001(\002\022\031\n\021chip_second_pos_y\030\027"
  " \001(\002\022\025\n\rchip_fly_time\030\030 \001(\002\022\032\n\022chip_rest"
  "_fly_time\030\031 \001(\002\"\337\002\n\025Vision_DetectionRobo"
  "t\022\r\n\005valid\030\001 \002(\010\022\020\n\010robot_id\030\002 \001(\r\022\t\n\001x\030"
  "\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\023\n\013orientation\030\005 \001(\002\022\r\n"
  "\005vel_x\030\006 \001(\002\022\r\n\005vel_y\030\007 \001(\002\022\022\n\nrotate_ve"
  "l\030\010 \001(\002\022\024\n\014accelerate_x\030\t \001(\002\022\024\n\014acceler"
  "ate_y\030\n \001(\002\022\r\n\005raw_x\030\013 \002(\002\022\r\n\005raw_y\030\014 \002("
  "\002\022\027\n\017raw_orientation\030\r \001(\002\022\021\n\traw_vel_x\030"
  "\016 \001(\002\022\021\n\traw_vel_y\030\017 \001(\002\022\026\n\016raw_rotate_v"
  "el\030\020 \001(\002\022\017\n\007imu_dir\030\021 \001(\002\022\026\n\016imu_rotate_"
  "vel\030\022 \001(\002\"\231\001\n\025Vision_DetectionFrame\022$\n\005b"
  "alls\030\001 \002(\0132\025.Vision_DetectionBall\022-\n\rrob"
  "ots_yellow\030\002 \003(\0132\026.Vision_DetectionRobot"
  "\022+\n\013robots_blue\030\003 \003(\0132\026.Vision_Detection"
  "Robot"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vision_5fdetection_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vision_5fdetection_2eproto_sccs[3] = {
  &scc_info_Vision_DetectionBall_vision_5fdetection_2eproto.base,
  &scc_info_Vision_DetectionFrame_vision_5fdetection_2eproto.base,
  &scc_info_Vision_DetectionRobot_vision_5fdetection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vision_5fdetection_2eproto_once;
static bool descriptor_table_vision_5fdetection_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vision_5fdetection_2eproto = {
  &descriptor_table_vision_5fdetection_2eproto_initialized, descriptor_table_protodef_vision_5fdetection_2eproto, "vision_detection.proto", 1045,
  &descriptor_table_vision_5fdetection_2eproto_once, descriptor_table_vision_5fdetection_2eproto_sccs, descriptor_table_vision_5fdetection_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_vision_5fdetection_2eproto::offsets,
  file_level_metadata_vision_5fdetection_2eproto, 3, file_level_enum_descriptors_vision_5fdetection_2eproto, file_level_service_descriptors_vision_5fdetection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vision_5fdetection_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vision_5fdetection_2eproto), true);

// ===================================================================

void Vision_DetectionBall::InitAsDefaultInstance() {
}
class Vision_DetectionBall::_Internal {
 public:
  using HasBits = decltype(std::declval<Vision_DetectionBall>()._has_bits_);
  static void set_has_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ball_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_touch(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_raw_x(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_raw_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_chip_predict_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_chip_predict_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_chip_best_predict_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_chip_best_predict_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_real_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_real_y(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_real_z(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_chip_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_chip_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_chip_vel_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_chip_second_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_chip_second_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_chip_fly_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_chip_rest_fly_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

Vision_DetectionBall::Vision_DetectionBall()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionBall)
}
Vision_DetectionBall::Vision_DetectionBall(const Vision_DetectionBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vel_x_, &from.vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&chip_rest_fly_time_) -
    reinterpret_cast<char*>(&vel_x_)) + sizeof(chip_rest_fly_time_));
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionBall)
}

void Vision_DetectionBall::SharedCtor() {
  ::memset(&vel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chip_rest_fly_time_) -
      reinterpret_cast<char*>(&vel_x_)) + sizeof(chip_rest_fly_time_));
}

Vision_DetectionBall::~Vision_DetectionBall() {
  // @@protoc_insertion_point(destructor:Vision_DetectionBall)
  SharedDtor();
}

void Vision_DetectionBall::SharedDtor() {
}

void Vision_DetectionBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vision_DetectionBall& Vision_DetectionBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vision_DetectionBall_vision_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void Vision_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_touch_) -
        reinterpret_cast<char*>(&vel_x_)) + sizeof(last_touch_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&real_x_) -
        reinterpret_cast<char*>(&valid_)) + sizeof(real_x_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&real_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chip_fly_time_) -
        reinterpret_cast<char*>(&real_y_)) + sizeof(chip_fly_time_));
  }
  chip_rest_fly_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vision_DetectionBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float vel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_vel_x(&has_bits);
          vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_vel_y(&has_bits);
          vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_area(&has_bits);
          area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 ball_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ball_state(&has_bits);
          ball_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_touch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_last_touch(&has_bits);
          last_touch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float raw_x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_raw_x(&has_bits);
          raw_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float raw_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_raw_y(&has_bits);
          raw_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_predict_x = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_chip_predict_x(&has_bits);
          chip_predict_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_predict_y = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_chip_predict_y(&has_bits);
          chip_predict_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_best_predict_x = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_chip_best_predict_x(&has_bits);
          chip_best_predict_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_best_predict_y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_chip_best_predict_y(&has_bits);
          chip_best_predict_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float real_x = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_real_x(&has_bits);
          real_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float real_y = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_real_y(&has_bits);
          real_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float real_z = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_real_z(&has_bits);
          real_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_vel_x = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_chip_vel_x(&has_bits);
          chip_vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_vel_y = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_chip_vel_y(&has_bits);
          chip_vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_vel_z = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_chip_vel_z(&has_bits);
          chip_vel_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_second_pos_x = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_chip_second_pos_x(&has_bits);
          chip_second_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_second_pos_y = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_chip_second_pos_y(&has_bits);
          chip_second_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_fly_time = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_chip_fly_time(&has_bits);
          chip_fly_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float chip_rest_fly_time = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_chip_rest_fly_time(&has_bits);
          chip_rest_fly_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vision_DetectionBall::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vel_x(), target);
  }

  // optional float vel_y = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_vel_y(), target);
  }

  // optional uint32 area = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_area(), target);
  }

  // required float x = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // required float y = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_height(), target);
  }

  // optional uint32 ball_state = 7;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ball_state(), target);
  }

  // optional uint32 last_touch = 8;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_touch(), target);
  }

  // required bool valid = 9;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_valid(), target);
  }

  // required float raw_x = 10;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_raw_x(), target);
  }

  // required float raw_y = 11;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_raw_y(), target);
  }

  // optional float chip_predict_x = 12;
  if (cached_has_bits & 0x00000800u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_chip_predict_x(), target);
  }

  // optional float chip_predict_y = 13;
  if (cached_has_bits & 0x00001000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_chip_predict_y(), target);
  }

  // optional float chip_best_predict_x = 14;
  if (cached_has_bits & 0x00002000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_chip_best_predict_x(), target);
  }

  // optional float chip_best_predict_y = 15;
  if (cached_has_bits & 0x00004000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_chip_best_predict_y(), target);
  }

  // optional float real_x = 16;
  if (cached_has_bits & 0x00008000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_real_x(), target);
  }

  // optional float real_y = 17;
  if (cached_has_bits & 0x00010000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_real_y(), target);
  }

  // optional float real_z = 18;
  if (cached_has_bits & 0x00020000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_real_z(), target);
  }

  // optional float chip_vel_x = 19;
  if (cached_has_bits & 0x00040000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_chip_vel_x(), target);
  }

  // optional float chip_vel_y = 20;
  if (cached_has_bits & 0x00080000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_chip_vel_y(), target);
  }

  // optional float chip_vel_z = 21;
  if (cached_has_bits & 0x00100000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_chip_vel_z(), target);
  }

  // optional float chip_second_pos_x = 22;
  if (cached_has_bits & 0x00200000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_chip_second_pos_x(), target);
  }

  // optional float chip_second_pos_y = 23;
  if (cached_has_bits & 0x00400000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_chip_second_pos_y(), target);
  }

  // optional float chip_fly_time = 24;
  if (cached_has_bits & 0x00800000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_chip_fly_time(), target);
  }

  // optional float chip_rest_fly_time = 25;
  if (cached_has_bits & 0x01000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_chip_rest_fly_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionBall)
  return target;
}

size_t Vision_DetectionBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vision_DetectionBall)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 4;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 5;
    total_size += 1 + 4;
  }

  if (has_valid()) {
    // required bool valid = 9;
    total_size += 1 + 1;
  }

  if (has_raw_x()) {
    // required float raw_x = 10;
    total_size += 1 + 4;
  }

  if (has_raw_y()) {
    // required float raw_y = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vision_DetectionBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionBall)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000718) ^ 0x00000718) == 0) {  // All required fields are present.
    // required float x = 4;
    total_size += 1 + 4;

    // required float y = 5;
    total_size += 1 + 4;

    // required bool valid = 9;
    total_size += 1 + 1;

    // required float raw_x = 10;
    total_size += 1 + 4;

    // required float raw_y = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float vel_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 area = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_area());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional float height = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 ball_state = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ball_state());
    }

    // optional uint32 last_touch = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_touch());
    }

  }
  if (cached_has_bits & 0x0000f800u) {
    // optional float chip_predict_x = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float chip_predict_y = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float chip_best_predict_x = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float chip_best_predict_y = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float real_x = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float real_y = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float real_z = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float chip_vel_x = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float chip_vel_y = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float chip_vel_z = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float chip_second_pos_x = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float chip_second_pos_y = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float chip_fly_time = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  // optional float chip_rest_fly_time = 25;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vision_DetectionBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vision_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  const Vision_DetectionBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vision_DetectionBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vision_DetectionBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vision_DetectionBall)
    MergeFrom(*source);
  }
}

void Vision_DetectionBall::MergeFrom(const Vision_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vel_x_ = from.vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      vel_y_ = from.vel_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      area_ = from.area_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      ball_state_ = from.ball_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_touch_ = from.last_touch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00000800u) {
      chip_predict_x_ = from.chip_predict_x_;
    }
    if (cached_has_bits & 0x00001000u) {
      chip_predict_y_ = from.chip_predict_y_;
    }
    if (cached_has_bits & 0x00002000u) {
      chip_best_predict_x_ = from.chip_best_predict_x_;
    }
    if (cached_has_bits & 0x00004000u) {
      chip_best_predict_y_ = from.chip_best_predict_y_;
    }
    if (cached_has_bits & 0x00008000u) {
      real_x_ = from.real_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      real_y_ = from.real_y_;
    }
    if (cached_has_bits & 0x00020000u) {
      real_z_ = from.real_z_;
    }
    if (cached_has_bits & 0x00040000u) {
      chip_vel_x_ = from.chip_vel_x_;
    }
    if (cached_has_bits & 0x00080000u) {
      chip_vel_y_ = from.chip_vel_y_;
    }
    if (cached_has_bits & 0x00100000u) {
      chip_vel_z_ = from.chip_vel_z_;
    }
    if (cached_has_bits & 0x00200000u) {
      chip_second_pos_x_ = from.chip_second_pos_x_;
    }
    if (cached_has_bits & 0x00400000u) {
      chip_second_pos_y_ = from.chip_second_pos_y_;
    }
    if (cached_has_bits & 0x00800000u) {
      chip_fly_time_ = from.chip_fly_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_chip_rest_fly_time(from._internal_chip_rest_fly_time());
  }
}

void Vision_DetectionBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vision_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionBall::CopyFrom(const Vision_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000718) != 0x00000718) return false;
  return true;
}

void Vision_DetectionBall::InternalSwap(Vision_DetectionBall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vel_x_, other->vel_x_);
  swap(vel_y_, other->vel_y_);
  swap(area_, other->area_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(height_, other->height_);
  swap(ball_state_, other->ball_state_);
  swap(last_touch_, other->last_touch_);
  swap(valid_, other->valid_);
  swap(raw_x_, other->raw_x_);
  swap(raw_y_, other->raw_y_);
  swap(chip_predict_x_, other->chip_predict_x_);
  swap(chip_predict_y_, other->chip_predict_y_);
  swap(chip_best_predict_x_, other->chip_best_predict_x_);
  swap(chip_best_predict_y_, other->chip_best_predict_y_);
  swap(real_x_, other->real_x_);
  swap(real_y_, other->real_y_);
  swap(real_z_, other->real_z_);
  swap(chip_vel_x_, other->chip_vel_x_);
  swap(chip_vel_y_, other->chip_vel_y_);
  swap(chip_vel_z_, other->chip_vel_z_);
  swap(chip_second_pos_x_, other->chip_second_pos_x_);
  swap(chip_second_pos_y_, other->chip_second_pos_y_);
  swap(chip_fly_time_, other->chip_fly_time_);
  swap(chip_rest_fly_time_, other->chip_rest_fly_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vision_DetectionBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vision_DetectionRobot::InitAsDefaultInstance() {
}
class Vision_DetectionRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<Vision_DetectionRobot>()._has_bits_);
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rotate_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_accelerate_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_accelerate_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_raw_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_raw_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_raw_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_raw_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_raw_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_raw_rotate_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_imu_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_imu_rotate_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

Vision_DetectionRobot::Vision_DetectionRobot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionRobot)
}
Vision_DetectionRobot::Vision_DetectionRobot(const Vision_DetectionRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_rotate_vel_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(imu_rotate_vel_));
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionRobot)
}

void Vision_DetectionRobot::SharedCtor() {
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_rotate_vel_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(imu_rotate_vel_));
}

Vision_DetectionRobot::~Vision_DetectionRobot() {
  // @@protoc_insertion_point(destructor:Vision_DetectionRobot)
  SharedDtor();
}

void Vision_DetectionRobot::SharedDtor() {
}

void Vision_DetectionRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vision_DetectionRobot& Vision_DetectionRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vision_DetectionRobot_vision_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void Vision_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotate_vel_) -
        reinterpret_cast<char*>(&valid_)) + sizeof(rotate_vel_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&accelerate_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_rotate_vel_) -
        reinterpret_cast<char*>(&accelerate_x_)) + sizeof(raw_rotate_vel_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&imu_dir_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imu_rotate_vel_) -
        reinterpret_cast<char*>(&imu_dir_)) + sizeof(imu_rotate_vel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vision_DetectionRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 robot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_robot_id(&has_bits);
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_vel_x(&has_bits);
          vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_vel_y(&has_bits);
          vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rotate_vel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_rotate_vel(&has_bits);
          rotate_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accelerate_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_accelerate_x(&has_bits);
          accelerate_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accelerate_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_accelerate_y(&has_bits);
          accelerate_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float raw_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_raw_x(&has_bits);
          raw_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float raw_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_raw_y(&has_bits);
          raw_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float raw_orientation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_raw_orientation(&has_bits);
          raw_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float raw_vel_x = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_raw_vel_x(&has_bits);
          raw_vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float raw_vel_y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_raw_vel_y(&has_bits);
          raw_vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float raw_rotate_vel = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_raw_rotate_vel(&has_bits);
          raw_rotate_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float imu_dir = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_imu_dir(&has_bits);
          imu_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float imu_rotate_vel = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_imu_rotate_vel(&has_bits);
          imu_rotate_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vision_DetectionRobot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool valid = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_robot_id(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_orientation(), target);
  }

  // optional float vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_vel_x(), target);
  }

  // optional float vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_vel_y(), target);
  }

  // optional float rotate_vel = 8;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rotate_vel(), target);
  }

  // optional float accelerate_x = 9;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_accelerate_x(), target);
  }

  // optional float accelerate_y = 10;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_accelerate_y(), target);
  }

  // required float raw_x = 11;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_raw_x(), target);
  }

  // required float raw_y = 12;
  if (cached_has_bits & 0x00000800u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_raw_y(), target);
  }

  // optional float raw_orientation = 13;
  if (cached_has_bits & 0x00001000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_raw_orientation(), target);
  }

  // optional float raw_vel_x = 14;
  if (cached_has_bits & 0x00002000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_raw_vel_x(), target);
  }

  // optional float raw_vel_y = 15;
  if (cached_has_bits & 0x00004000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_raw_vel_y(), target);
  }

  // optional float raw_rotate_vel = 16;
  if (cached_has_bits & 0x00008000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_raw_rotate_vel(), target);
  }

  // optional float imu_dir = 17;
  if (cached_has_bits & 0x00010000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_imu_dir(), target);
  }

  // optional float imu_rotate_vel = 18;
  if (cached_has_bits & 0x00020000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_imu_rotate_vel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionRobot)
  return target;
}

size_t Vision_DetectionRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vision_DetectionRobot)
  size_t total_size = 0;

  if (has_valid()) {
    // required bool valid = 1;
    total_size += 1 + 1;
  }

  if (has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (has_raw_x()) {
    // required float raw_x = 11;
    total_size += 1 + 4;
  }

  if (has_raw_y()) {
    // required float raw_y = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vision_DetectionRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionRobot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000c0d) ^ 0x00000c0d) == 0) {  // All required fields are present.
    // required bool valid = 1;
    total_size += 1 + 1;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float raw_x = 11;
    total_size += 1 + 4;

    // required float raw_y = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 robot_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_robot_id());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional float orientation = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float vel_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float vel_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float rotate_vel = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float accelerate_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float accelerate_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000f000u) {
    // optional float raw_orientation = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float raw_vel_x = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float raw_vel_y = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float raw_rotate_vel = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional float imu_dir = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float imu_rotate_vel = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vision_DetectionRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vision_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const Vision_DetectionRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vision_DetectionRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vision_DetectionRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vision_DetectionRobot)
    MergeFrom(*source);
  }
}

void Vision_DetectionRobot::MergeFrom(const Vision_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000020u) {
      vel_x_ = from.vel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      vel_y_ = from.vel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      rotate_vel_ = from.rotate_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      accelerate_x_ = from.accelerate_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      accelerate_y_ = from.accelerate_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000800u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00001000u) {
      raw_orientation_ = from.raw_orientation_;
    }
    if (cached_has_bits & 0x00002000u) {
      raw_vel_x_ = from.raw_vel_x_;
    }
    if (cached_has_bits & 0x00004000u) {
      raw_vel_y_ = from.raw_vel_y_;
    }
    if (cached_has_bits & 0x00008000u) {
      raw_rotate_vel_ = from.raw_rotate_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      imu_dir_ = from.imu_dir_;
    }
    if (cached_has_bits & 0x00020000u) {
      imu_rotate_vel_ = from.imu_rotate_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vision_DetectionRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vision_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionRobot::CopyFrom(const Vision_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c0d) != 0x00000c0d) return false;
  return true;
}

void Vision_DetectionRobot::InternalSwap(Vision_DetectionRobot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(valid_, other->valid_);
  swap(robot_id_, other->robot_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(orientation_, other->orientation_);
  swap(vel_x_, other->vel_x_);
  swap(vel_y_, other->vel_y_);
  swap(rotate_vel_, other->rotate_vel_);
  swap(accelerate_x_, other->accelerate_x_);
  swap(accelerate_y_, other->accelerate_y_);
  swap(raw_x_, other->raw_x_);
  swap(raw_y_, other->raw_y_);
  swap(raw_orientation_, other->raw_orientation_);
  swap(raw_vel_x_, other->raw_vel_x_);
  swap(raw_vel_y_, other->raw_vel_y_);
  swap(raw_rotate_vel_, other->raw_rotate_vel_);
  swap(imu_dir_, other->imu_dir_);
  swap(imu_rotate_vel_, other->imu_rotate_vel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vision_DetectionRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vision_DetectionFrame::InitAsDefaultInstance() {
  ::_Vision_DetectionFrame_default_instance_._instance.get_mutable()->balls_ = const_cast< ::Vision_DetectionBall*>(
      ::Vision_DetectionBall::internal_default_instance());
}
class Vision_DetectionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<Vision_DetectionFrame>()._has_bits_);
  static const ::Vision_DetectionBall& balls(const Vision_DetectionFrame* msg);
  static void set_has_balls(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Vision_DetectionBall&
Vision_DetectionFrame::_Internal::balls(const Vision_DetectionFrame* msg) {
  return *msg->balls_;
}
Vision_DetectionFrame::Vision_DetectionFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vision_DetectionFrame)
}
Vision_DetectionFrame::Vision_DetectionFrame(const Vision_DetectionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      robots_yellow_(from.robots_yellow_),
      robots_blue_(from.robots_blue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_balls()) {
    balls_ = new ::Vision_DetectionBall(*from.balls_);
  } else {
    balls_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Vision_DetectionFrame)
}

void Vision_DetectionFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vision_DetectionFrame_vision_5fdetection_2eproto.base);
  balls_ = nullptr;
}

Vision_DetectionFrame::~Vision_DetectionFrame() {
  // @@protoc_insertion_point(destructor:Vision_DetectionFrame)
  SharedDtor();
}

void Vision_DetectionFrame::SharedDtor() {
  if (this != internal_default_instance()) delete balls_;
}

void Vision_DetectionFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vision_DetectionFrame& Vision_DetectionFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vision_DetectionFrame_vision_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void Vision_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:Vision_DetectionFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robots_yellow_.Clear();
  robots_blue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(balls_ != nullptr);
    balls_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vision_DetectionFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Vision_DetectionBall balls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_balls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Vision_DetectionRobot robots_yellow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_yellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Vision_DetectionRobot robots_blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_blue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vision_DetectionFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vision_DetectionFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Vision_DetectionBall balls = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::balls(this), target, stream);
  }

  // repeated .Vision_DetectionRobot robots_yellow = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_yellow_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_robots_yellow(i), target, stream);
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_blue_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_robots_blue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vision_DetectionFrame)
  return target;
}

size_t Vision_DetectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vision_DetectionFrame)
  size_t total_size = 0;

  // required .Vision_DetectionBall balls = 1;
  if (has_balls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balls_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Vision_DetectionRobot robots_yellow = 2;
  total_size += 1UL * this->_internal_robots_yellow_size();
  for (const auto& msg : this->robots_yellow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Vision_DetectionRobot robots_blue = 3;
  total_size += 1UL * this->_internal_robots_blue_size();
  for (const auto& msg : this->robots_blue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vision_DetectionFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vision_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const Vision_DetectionFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vision_DetectionFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vision_DetectionFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vision_DetectionFrame)
    MergeFrom(*source);
  }
}

void Vision_DetectionFrame::MergeFrom(const Vision_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vision_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from._internal_has_balls()) {
    _internal_mutable_balls()->::Vision_DetectionBall::MergeFrom(from._internal_balls());
  }
}

void Vision_DetectionFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vision_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision_DetectionFrame::CopyFrom(const Vision_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vision_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_DetectionFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->robots_yellow())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->robots_blue())) return false;
  if (has_balls()) {
    if (!this->balls_->IsInitialized()) return false;
  }
  return true;
}

void Vision_DetectionFrame::InternalSwap(Vision_DetectionFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robots_yellow_.InternalSwap(&other->robots_yellow_);
  robots_blue_.InternalSwap(&other->robots_blue_);
  swap(balls_, other->balls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vision_DetectionFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vision_DetectionBall* Arena::CreateMaybeMessage< ::Vision_DetectionBall >(Arena* arena) {
  return Arena::CreateInternal< ::Vision_DetectionBall >(arena);
}
template<> PROTOBUF_NOINLINE ::Vision_DetectionRobot* Arena::CreateMaybeMessage< ::Vision_DetectionRobot >(Arena* arena) {
  return Arena::CreateInternal< ::Vision_DetectionRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::Vision_DetectionFrame* Arena::CreateMaybeMessage< ::Vision_DetectionFrame >(Arena* arena) {
  return Arena::CreateInternal< ::Vision_DetectionFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
