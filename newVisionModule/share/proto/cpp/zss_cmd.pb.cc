// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_cmd.proto

#include "zss_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ZSS {
namespace Protocol {
constexpr Robots_Status::Robots_Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robots_status_(){}
struct Robots_StatusDefaultTypeInternal {
  constexpr Robots_StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robots_StatusDefaultTypeInternal() {}
  union {
    Robots_Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robots_StatusDefaultTypeInternal _Robots_Status_default_instance_;
constexpr Robot_Status::Robot_Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robot_id_(0)
  , infrared_(false)
  , flat_kick_(false)
  , chip_kick_(false){}
struct Robot_StatusDefaultTypeInternal {
  constexpr Robot_StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_StatusDefaultTypeInternal() {}
  union {
    Robot_Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_StatusDefaultTypeInternal _Robot_Status_default_instance_;
constexpr Robots_Command::Robots_Command(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_()
  , delay_(0){}
struct Robots_CommandDefaultTypeInternal {
  constexpr Robots_CommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robots_CommandDefaultTypeInternal() {}
  union {
    Robots_Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robots_CommandDefaultTypeInternal _Robots_Command_default_instance_;
constexpr Robot_Command::Robot_Command(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robot_id_(0)
  , velocity_x_(0)
  , velocity_y_(0)
  , velocity_r_(0)
  , power_(0)
  , dribbler_spin_(0)
  , kick_(false)
  , use_dir_(false)
  , current_angle_(0)
  , target_angle_(0){}
struct Robot_CommandDefaultTypeInternal {
  constexpr Robot_CommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_CommandDefaultTypeInternal() {}
  union {
    Robot_Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_CommandDefaultTypeInternal _Robot_Command_default_instance_;
}  // namespace Protocol
}  // namespace ZSS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zss_5fcmd_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zss_5fcmd_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zss_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zss_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robots_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robots_Status, robots_status_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Status, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Status, robot_id_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Status, infrared_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Status, flat_kick_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Status, chip_kick_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robots_Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robots_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robots_Command, command_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robots_Command, delay_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, robot_id_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, velocity_x_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, velocity_y_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, velocity_r_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, kick_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, power_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, dribbler_spin_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, current_angle_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, target_angle_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Command, use_dir_),
  0,
  1,
  2,
  3,
  6,
  4,
  5,
  8,
  9,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ZSS::Protocol::Robots_Status)},
  { 6, 15, sizeof(::ZSS::Protocol::Robot_Status)},
  { 19, 26, sizeof(::ZSS::Protocol::Robots_Command)},
  { 28, 43, sizeof(::ZSS::Protocol::Robot_Command)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Robots_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Robot_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Robots_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Robot_Command_default_instance_),
};

const char descriptor_table_protodef_zss_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rzss_cmd.proto\022\014ZSS.Protocol\"B\n\rRobots_"
  "Status\0221\n\rrobots_status\030\001 \003(\0132\032.ZSS.Prot"
  "ocol.Robot_Status\"X\n\014Robot_Status\022\020\n\010rob"
  "ot_id\030\001 \002(\005\022\020\n\010infrared\030\002 \002(\010\022\021\n\tflat_ki"
  "ck\030\003 \002(\010\022\021\n\tchip_kick\030\004 \002(\010\"M\n\016Robots_Co"
  "mmand\022,\n\007command\030\001 \003(\0132\033.ZSS.Protocol.Ro"
  "bot_Command\022\r\n\005delay\030\002 \001(\005\"\317\001\n\rRobot_Com"
  "mand\022\020\n\010robot_id\030\001 \002(\005\022\022\n\nvelocity_x\030\002 \002"
  "(\002\022\022\n\nvelocity_y\030\003 \002(\002\022\022\n\nvelocity_r\030\004 \002"
  "(\002\022\014\n\004kick\030\005 \002(\010\022\r\n\005power\030\006 \002(\002\022\025\n\rdribb"
  "ler_spin\030\007 \002(\002\022\025\n\rcurrent_angle\030\010 \001(\002\022\024\n"
  "\014target_angle\030\t \001(\002\022\017\n\007use_dir\030\n \002(\010"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zss_5fcmd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5fcmd_2eproto = {
  false, false, 476, descriptor_table_protodef_zss_5fcmd_2eproto, "zss_cmd.proto", 
  &descriptor_table_zss_5fcmd_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_zss_5fcmd_2eproto::offsets,
  file_level_metadata_zss_5fcmd_2eproto, file_level_enum_descriptors_zss_5fcmd_2eproto, file_level_service_descriptors_zss_5fcmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_zss_5fcmd_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zss_5fcmd_2eproto);
  return descriptor_table_zss_5fcmd_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zss_5fcmd_2eproto(&descriptor_table_zss_5fcmd_2eproto);
namespace ZSS {
namespace Protocol {

// ===================================================================

class Robots_Status::_Internal {
 public:
};

Robots_Status::Robots_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robots_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.Robots_Status)
}
Robots_Status::Robots_Status(const Robots_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      robots_status_(from.robots_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robots_Status)
}

void Robots_Status::SharedCtor() {
}

Robots_Status::~Robots_Status() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robots_Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robots_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robots_Status::ArenaDtor(void* object) {
  Robots_Status* _this = reinterpret_cast< Robots_Status* >(object);
  (void)_this;
}
void Robots_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robots_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robots_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robots_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robots_status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robots_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robots_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robots_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_robots_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robots_Status)
  return target;
}

size_t Robots_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robots_Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  total_size += 1UL * this->_internal_robots_status_size();
  for (const auto& msg : this->robots_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robots_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robots_Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Robots_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robots_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robots_Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robots_Status)
    MergeFrom(*source);
  }
}

void Robots_Status::MergeFrom(const Robots_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robots_Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_status_.MergeFrom(from.robots_status_);
}

void Robots_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robots_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots_Status::CopyFrom(const Robots_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robots_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots_Status::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robots_status_)) return false;
  return true;
}

void Robots_Status::InternalSwap(Robots_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robots_status_.InternalSwap(&other->robots_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robots_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Robot_Status::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot_Status>()._has_bits_);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_infrared(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flat_kick(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chip_kick(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Robot_Status::Robot_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.Robot_Status)
}
Robot_Status::Robot_Status(const Robot_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&robot_id_, &from.robot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chip_kick_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(chip_kick_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot_Status)
}

void Robot_Status::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&robot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chip_kick_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(chip_kick_));
}

Robot_Status::~Robot_Status() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot_Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robot_Status::ArenaDtor(void* object) {
  Robot_Status* _this = reinterpret_cast< Robot_Status* >(object);
  (void)_this;
}
void Robot_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robot_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&robot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chip_kick_) -
        reinterpret_cast<char*>(&robot_id_)) + sizeof(chip_kick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_robot_id(&has_bits);
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool infrared = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_infrared(&has_bits);
          infrared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool flat_kick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flat_kick(&has_bits);
          flat_kick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool chip_kick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_chip_kick(&has_bits);
          chip_kick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_robot_id(), target);
  }

  // required bool infrared = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_infrared(), target);
  }

  // required bool flat_kick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flat_kick(), target);
  }

  // required bool chip_kick = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_chip_kick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot_Status)
  return target;
}

size_t Robot_Status::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Robot_Status)
  size_t total_size = 0;

  if (_internal_has_robot_id()) {
    // required int32 robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_id());
  }

  if (_internal_has_infrared()) {
    // required bool infrared = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_flat_kick()) {
    // required bool flat_kick = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_chip_kick()) {
    // required bool chip_kick = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Robot_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robot_Status)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_id());

    // required bool infrared = 2;
    total_size += 1 + 1;

    // required bool flat_kick = 3;
    total_size += 1 + 1;

    // required bool chip_kick = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robot_Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robot_Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robot_Status)
    MergeFrom(*source);
  }
}

void Robot_Status::MergeFrom(const Robot_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robot_Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      infrared_ = from.infrared_;
    }
    if (cached_has_bits & 0x00000004u) {
      flat_kick_ = from.flat_kick_;
    }
    if (cached_has_bits & 0x00000008u) {
      chip_kick_ = from.chip_kick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robot_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Status::CopyFrom(const Robot_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robot_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Status::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Robot_Status::InternalSwap(Robot_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Status, chip_kick_)
      + sizeof(Robot_Status::chip_kick_)
      - PROTOBUF_FIELD_OFFSET(Robot_Status, robot_id_)>(
          reinterpret_cast<char*>(&robot_id_),
          reinterpret_cast<char*>(&other->robot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Robots_Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Robots_Command>()._has_bits_);
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Robots_Command::Robots_Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  command_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.Robots_Command)
}
Robots_Command::Robots_Command(const Robots_Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      command_(from.command_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delay_ = from.delay_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robots_Command)
}

void Robots_Command::SharedCtor() {
delay_ = 0;
}

Robots_Command::~Robots_Command() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robots_Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robots_Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robots_Command::ArenaDtor(void* object) {
  Robots_Command* _this = reinterpret_cast< Robots_Command* >(object);
  (void)_this;
}
void Robots_Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robots_Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robots_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robots_Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.Clear();
  delay_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robots_Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ZSS.Protocol.Robot_Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_command(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robots_Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robots_Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot_Command command = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_command_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_command(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robots_Command)
  return target;
}

size_t Robots_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robots_Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot_Command command = 1;
  total_size += 1UL * this->_internal_command_size();
  for (const auto& msg : this->command_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 delay = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robots_Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robots_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Robots_Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robots_Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robots_Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robots_Command)
    MergeFrom(*source);
  }
}

void Robots_Command::MergeFrom(const Robots_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robots_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
  if (from._internal_has_delay()) {
    _internal_set_delay(from._internal_delay());
  }
}

void Robots_Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robots_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots_Command::CopyFrom(const Robots_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robots_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots_Command::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(command_)) return false;
  return true;
}

void Robots_Command::InternalSwap(Robots_Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.InternalSwap(&other->command_);
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robots_Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Robot_Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot_Command>()._has_bits_);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_velocity_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_velocity_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_velocity_r(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kick(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dribbler_spin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_current_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_target_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

Robot_Command::Robot_Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.Robot_Command)
}
Robot_Command::Robot_Command(const Robot_Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&robot_id_, &from.robot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_angle_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(target_angle_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot_Command)
}

void Robot_Command::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&robot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_angle_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(target_angle_));
}

Robot_Command::~Robot_Command() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot_Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot_Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robot_Command::ArenaDtor(void* object) {
  Robot_Command* _this = reinterpret_cast< Robot_Command* >(object);
  (void)_this;
}
void Robot_Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robot_Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&robot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_dir_) -
        reinterpret_cast<char*>(&robot_id_)) + sizeof(use_dir_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&current_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_angle_) -
        reinterpret_cast<char*>(&current_angle_)) + sizeof(target_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_robot_id(&has_bits);
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float velocity_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_velocity_x(&has_bits);
          velocity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float velocity_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_velocity_y(&has_bits);
          velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float velocity_r = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_velocity_r(&has_bits);
          velocity_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool kick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_kick(&has_bits);
          kick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float power = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_power(&has_bits);
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float dribbler_spin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_dribbler_spin(&has_bits);
          dribbler_spin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float current_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_current_angle(&has_bits);
          current_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float target_angle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_target_angle(&has_bits);
          target_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool use_dir = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_use_dir(&has_bits);
          use_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot_Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot_Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_robot_id(), target);
  }

  // required float velocity_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_velocity_x(), target);
  }

  // required float velocity_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity_y(), target);
  }

  // required float velocity_r = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_velocity_r(), target);
  }

  // required bool kick = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_kick(), target);
  }

  // required float power = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_power(), target);
  }

  // required float dribbler_spin = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_dribbler_spin(), target);
  }

  // optional float current_angle = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_current_angle(), target);
  }

  // optional float target_angle = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_target_angle(), target);
  }

  // required bool use_dir = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_use_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot_Command)
  return target;
}

size_t Robot_Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Robot_Command)
  size_t total_size = 0;

  if (_internal_has_robot_id()) {
    // required int32 robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_id());
  }

  if (_internal_has_velocity_x()) {
    // required float velocity_x = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_velocity_y()) {
    // required float velocity_y = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_velocity_r()) {
    // required float velocity_r = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_power()) {
    // required float power = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_dribbler_spin()) {
    // required float dribbler_spin = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_kick()) {
    // required bool kick = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_use_dir()) {
    // required bool use_dir = 10;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Robot_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robot_Command)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required int32 robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_id());

    // required float velocity_x = 2;
    total_size += 1 + 4;

    // required float velocity_y = 3;
    total_size += 1 + 4;

    // required float velocity_r = 4;
    total_size += 1 + 4;

    // required float power = 6;
    total_size += 1 + 4;

    // required float dribbler_spin = 7;
    total_size += 1 + 4;

    // required bool kick = 5;
    total_size += 1 + 1;

    // required bool use_dir = 10;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000300u) {
    // optional float current_angle = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float target_angle = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot_Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robot_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot_Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot_Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robot_Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robot_Command)
    MergeFrom(*source);
  }
}

void Robot_Command::MergeFrom(const Robot_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robot_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      robot_id_ = from.robot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      velocity_x_ = from.velocity_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      velocity_y_ = from.velocity_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      velocity_r_ = from.velocity_r_;
    }
    if (cached_has_bits & 0x00000010u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00000020u) {
      dribbler_spin_ = from.dribbler_spin_;
    }
    if (cached_has_bits & 0x00000040u) {
      kick_ = from.kick_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_dir_ = from.use_dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      current_angle_ = from.current_angle_;
    }
    if (cached_has_bits & 0x00000200u) {
      target_angle_ = from.target_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot_Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Command::CopyFrom(const Robot_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Command::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Robot_Command::InternalSwap(Robot_Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Command, target_angle_)
      + sizeof(Robot_Command::target_angle_)
      - PROTOBUF_FIELD_OFFSET(Robot_Command, robot_id_)>(
          reinterpret_cast<char*>(&robot_id_),
          reinterpret_cast<char*>(&other->robot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Command::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Robots_Status* Arena::CreateMaybeMessage< ::ZSS::Protocol::Robots_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::Robots_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Robot_Status* Arena::CreateMaybeMessage< ::ZSS::Protocol::Robot_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::Robot_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Robots_Command* Arena::CreateMaybeMessage< ::ZSS::Protocol::Robots_Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::Robots_Command >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Robot_Command* Arena::CreateMaybeMessage< ::ZSS::Protocol::Robot_Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::Robot_Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
