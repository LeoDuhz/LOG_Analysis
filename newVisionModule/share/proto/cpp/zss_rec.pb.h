// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_rec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zss_5frec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zss_5frec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zss_debug.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zss_5frec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zss_5frec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5frec_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_zss_5frec_2eproto_metadata_getter(int index);
namespace ZSS {
namespace Protocol {
class Balls4Rec;
struct Balls4RecDefaultTypeInternal;
extern Balls4RecDefaultTypeInternal _Balls4Rec_default_instance_;
class MaintainVision;
struct MaintainVisionDefaultTypeInternal;
extern MaintainVisionDefaultTypeInternal _MaintainVision_default_instance_;
class RecMessage;
struct RecMessageDefaultTypeInternal;
extern RecMessageDefaultTypeInternal _RecMessage_default_instance_;
class RecMessages;
struct RecMessagesDefaultTypeInternal;
extern RecMessagesDefaultTypeInternal _RecMessages_default_instance_;
class Robot4Rec;
struct Robot4RecDefaultTypeInternal;
extern Robot4RecDefaultTypeInternal _Robot4Rec_default_instance_;
class SelectedArea;
struct SelectedAreaDefaultTypeInternal;
extern SelectedAreaDefaultTypeInternal _SelectedArea_default_instance_;
class TeamRobotMsg;
struct TeamRobotMsgDefaultTypeInternal;
extern TeamRobotMsgDefaultTypeInternal _TeamRobotMsg_default_instance_;
}  // namespace Protocol
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> ::ZSS::Protocol::Balls4Rec* Arena::CreateMaybeMessage<::ZSS::Protocol::Balls4Rec>(Arena*);
template<> ::ZSS::Protocol::MaintainVision* Arena::CreateMaybeMessage<::ZSS::Protocol::MaintainVision>(Arena*);
template<> ::ZSS::Protocol::RecMessage* Arena::CreateMaybeMessage<::ZSS::Protocol::RecMessage>(Arena*);
template<> ::ZSS::Protocol::RecMessages* Arena::CreateMaybeMessage<::ZSS::Protocol::RecMessages>(Arena*);
template<> ::ZSS::Protocol::Robot4Rec* Arena::CreateMaybeMessage<::ZSS::Protocol::Robot4Rec>(Arena*);
template<> ::ZSS::Protocol::SelectedArea* Arena::CreateMaybeMessage<::ZSS::Protocol::SelectedArea>(Arena*);
template<> ::ZSS::Protocol::TeamRobotMsg* Arena::CreateMaybeMessage<::ZSS::Protocol::TeamRobotMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ZSS {
namespace Protocol {

// ===================================================================

class RecMessages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.RecMessages) */ {
 public:
  inline RecMessages() : RecMessages(nullptr) {}
  virtual ~RecMessages();
  explicit constexpr RecMessages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecMessages(const RecMessages& from);
  RecMessages(RecMessages&& from) noexcept
    : RecMessages() {
    *this = ::std::move(from);
  }

  inline RecMessages& operator=(const RecMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecMessages& operator=(RecMessages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecMessages& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecMessages* internal_default_instance() {
    return reinterpret_cast<const RecMessages*>(
               &_RecMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecMessages& a, RecMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(RecMessages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecMessages* New() const final {
    return CreateMaybeMessage<RecMessages>(nullptr);
  }

  RecMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecMessages& from);
  void MergeFrom(const RecMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.RecMessages";
  }
  protected:
  explicit RecMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_zss_5frec_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecMsgsFieldNumber = 1,
  };
  // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
  int recmsgs_size() const;
  private:
  int _internal_recmsgs_size() const;
  public:
  void clear_recmsgs();
  ::ZSS::Protocol::RecMessage* mutable_recmsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage >*
      mutable_recmsgs();
  private:
  const ::ZSS::Protocol::RecMessage& _internal_recmsgs(int index) const;
  ::ZSS::Protocol::RecMessage* _internal_add_recmsgs();
  public:
  const ::ZSS::Protocol::RecMessage& recmsgs(int index) const;
  ::ZSS::Protocol::RecMessage* add_recmsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage >&
      recmsgs() const;

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.RecMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage > recmsgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5frec_2eproto;
};
// -------------------------------------------------------------------

class RecMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.RecMessage) */ {
 public:
  inline RecMessage() : RecMessage(nullptr) {}
  virtual ~RecMessage();
  explicit constexpr RecMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecMessage(const RecMessage& from);
  RecMessage(RecMessage&& from) noexcept
    : RecMessage() {
    *this = ::std::move(from);
  }

  inline RecMessage& operator=(const RecMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecMessage& operator=(RecMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecMessage* internal_default_instance() {
    return reinterpret_cast<const RecMessage*>(
               &_RecMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecMessage& a, RecMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RecMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecMessage* New() const final {
    return CreateMaybeMessage<RecMessage>(nullptr);
  }

  RecMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecMessage& from);
  void MergeFrom(const RecMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.RecMessage";
  }
  protected:
  explicit RecMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_zss_5frec_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugMsgsFieldNumber = 4,
    kSelectedAreaFieldNumber = 2,
    kMaintainVisionFieldNumber = 3,
    kAthenaDebugMsgsFieldNumber = 5,
    kCtrlCFieldNumber = 1,
  };
  // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
  int debugmsgs_size() const;
  private:
  int _internal_debugmsgs_size() const;
  public:
  void clear_debugmsgs();
  ::ZSS::Protocol::Debug_Msgs* mutable_debugmsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >*
      mutable_debugmsgs();
  private:
  const ::ZSS::Protocol::Debug_Msgs& _internal_debugmsgs(int index) const;
  ::ZSS::Protocol::Debug_Msgs* _internal_add_debugmsgs();
  public:
  const ::ZSS::Protocol::Debug_Msgs& debugmsgs(int index) const;
  ::ZSS::Protocol::Debug_Msgs* add_debugmsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >&
      debugmsgs() const;

  // required .ZSS.Protocol.SelectedArea selectedArea = 2;
  bool has_selectedarea() const;
  private:
  bool _internal_has_selectedarea() const;
  public:
  void clear_selectedarea();
  const ::ZSS::Protocol::SelectedArea& selectedarea() const;
  ::ZSS::Protocol::SelectedArea* release_selectedarea();
  ::ZSS::Protocol::SelectedArea* mutable_selectedarea();
  void set_allocated_selectedarea(::ZSS::Protocol::SelectedArea* selectedarea);
  private:
  const ::ZSS::Protocol::SelectedArea& _internal_selectedarea() const;
  ::ZSS::Protocol::SelectedArea* _internal_mutable_selectedarea();
  public:
  void unsafe_arena_set_allocated_selectedarea(
      ::ZSS::Protocol::SelectedArea* selectedarea);
  ::ZSS::Protocol::SelectedArea* unsafe_arena_release_selectedarea();

  // required .ZSS.Protocol.MaintainVision maintainVision = 3;
  bool has_maintainvision() const;
  private:
  bool _internal_has_maintainvision() const;
  public:
  void clear_maintainvision();
  const ::ZSS::Protocol::MaintainVision& maintainvision() const;
  ::ZSS::Protocol::MaintainVision* release_maintainvision();
  ::ZSS::Protocol::MaintainVision* mutable_maintainvision();
  void set_allocated_maintainvision(::ZSS::Protocol::MaintainVision* maintainvision);
  private:
  const ::ZSS::Protocol::MaintainVision& _internal_maintainvision() const;
  ::ZSS::Protocol::MaintainVision* _internal_mutable_maintainvision();
  public:
  void unsafe_arena_set_allocated_maintainvision(
      ::ZSS::Protocol::MaintainVision* maintainvision);
  ::ZSS::Protocol::MaintainVision* unsafe_arena_release_maintainvision();

  // optional .ZSS.Protocol.Debug_Msgs athenaDebugMsgs = 5;
  bool has_athenadebugmsgs() const;
  private:
  bool _internal_has_athenadebugmsgs() const;
  public:
  void clear_athenadebugmsgs();
  const ::ZSS::Protocol::Debug_Msgs& athenadebugmsgs() const;
  ::ZSS::Protocol::Debug_Msgs* release_athenadebugmsgs();
  ::ZSS::Protocol::Debug_Msgs* mutable_athenadebugmsgs();
  void set_allocated_athenadebugmsgs(::ZSS::Protocol::Debug_Msgs* athenadebugmsgs);
  private:
  const ::ZSS::Protocol::Debug_Msgs& _internal_athenadebugmsgs() const;
  ::ZSS::Protocol::Debug_Msgs* _internal_mutable_athenadebugmsgs();
  public:
  void unsafe_arena_set_allocated_athenadebugmsgs(
      ::ZSS::Protocol::Debug_Msgs* athenadebugmsgs);
  ::ZSS::Protocol::Debug_Msgs* unsafe_arena_release_athenadebugmsgs();

  // required bool ctrlC = 1;
  bool has_ctrlc() const;
  private:
  bool _internal_has_ctrlc() const;
  public:
  void clear_ctrlc();
  bool ctrlc() const;
  void set_ctrlc(bool value);
  private:
  bool _internal_ctrlc() const;
  void _internal_set_ctrlc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.RecMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs > debugmsgs_;
  ::ZSS::Protocol::SelectedArea* selectedarea_;
  ::ZSS::Protocol::MaintainVision* maintainvision_;
  ::ZSS::Protocol::Debug_Msgs* athenadebugmsgs_;
  bool ctrlc_;
  friend struct ::TableStruct_zss_5frec_2eproto;
};
// -------------------------------------------------------------------

class SelectedArea PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.SelectedArea) */ {
 public:
  inline SelectedArea() : SelectedArea(nullptr) {}
  virtual ~SelectedArea();
  explicit constexpr SelectedArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectedArea(const SelectedArea& from);
  SelectedArea(SelectedArea&& from) noexcept
    : SelectedArea() {
    *this = ::std::move(from);
  }

  inline SelectedArea& operator=(const SelectedArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectedArea& operator=(SelectedArea&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectedArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectedArea* internal_default_instance() {
    return reinterpret_cast<const SelectedArea*>(
               &_SelectedArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SelectedArea& a, SelectedArea& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectedArea* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectedArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectedArea* New() const final {
    return CreateMaybeMessage<SelectedArea>(nullptr);
  }

  SelectedArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectedArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectedArea& from);
  void MergeFrom(const SelectedArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectedArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.SelectedArea";
  }
  protected:
  explicit SelectedArea(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_zss_5frec_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxXFieldNumber = 1,
    kMaxYFieldNumber = 2,
    kMinXFieldNumber = 3,
    kMinYFieldNumber = 4,
  };
  // required float maxX = 1;
  bool has_maxx() const;
  private:
  bool _internal_has_maxx() const;
  public:
  void clear_maxx();
  float maxx() const;
  void set_maxx(float value);
  private:
  float _internal_maxx() const;
  void _internal_set_maxx(float value);
  public:

  // required float maxY = 2;
  bool has_maxy() const;
  private:
  bool _internal_has_maxy() const;
  public:
  void clear_maxy();
  float maxy() const;
  void set_maxy(float value);
  private:
  float _internal_maxy() const;
  void _internal_set_maxy(float value);
  public:

  // required float minX = 3;
  bool has_minx() const;
  private:
  bool _internal_has_minx() const;
  public:
  void clear_minx();
  float minx() const;
  void set_minx(float value);
  private:
  float _internal_minx() const;
  void _internal_set_minx(float value);
  public:

  // required float minY = 4;
  bool has_miny() const;
  private:
  bool _internal_has_miny() const;
  public:
  void clear_miny();
  float miny() const;
  void set_miny(float value);
  private:
  float _internal_miny() const;
  void _internal_set_miny(float value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.SelectedArea)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float maxx_;
  float maxy_;
  float minx_;
  float miny_;
  friend struct ::TableStruct_zss_5frec_2eproto;
};
// -------------------------------------------------------------------

class MaintainVision PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.MaintainVision) */ {
 public:
  inline MaintainVision() : MaintainVision(nullptr) {}
  virtual ~MaintainVision();
  explicit constexpr MaintainVision(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MaintainVision(const MaintainVision& from);
  MaintainVision(MaintainVision&& from) noexcept
    : MaintainVision() {
    *this = ::std::move(from);
  }

  inline MaintainVision& operator=(const MaintainVision& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaintainVision& operator=(MaintainVision&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaintainVision& default_instance() {
    return *internal_default_instance();
  }
  static inline const MaintainVision* internal_default_instance() {
    return reinterpret_cast<const MaintainVision*>(
               &_MaintainVision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MaintainVision& a, MaintainVision& b) {
    a.Swap(&b);
  }
  inline void Swap(MaintainVision* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaintainVision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaintainVision* New() const final {
    return CreateMaybeMessage<MaintainVision>(nullptr);
  }

  MaintainVision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaintainVision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaintainVision& from);
  void MergeFrom(const MaintainVision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaintainVision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.MaintainVision";
  }
  protected:
  explicit MaintainVision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_zss_5frec_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessMsgFieldNumber = 3,
    kMaintainFieldNumber = 4,
    kBallsFieldNumber = 5,
    kLastTouchFieldNumber = 1,
    kLastTouchTeamFieldNumber = 2,
  };
  // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
  int processmsg_size() const;
  private:
  int _internal_processmsg_size() const;
  public:
  void clear_processmsg();
  ::ZSS::Protocol::TeamRobotMsg* mutable_processmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
      mutable_processmsg();
  private:
  const ::ZSS::Protocol::TeamRobotMsg& _internal_processmsg(int index) const;
  ::ZSS::Protocol::TeamRobotMsg* _internal_add_processmsg();
  public:
  const ::ZSS::Protocol::TeamRobotMsg& processmsg(int index) const;
  ::ZSS::Protocol::TeamRobotMsg* add_processmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
      processmsg() const;

  // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
  int maintain_size() const;
  private:
  int _internal_maintain_size() const;
  public:
  void clear_maintain();
  ::ZSS::Protocol::TeamRobotMsg* mutable_maintain(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
      mutable_maintain();
  private:
  const ::ZSS::Protocol::TeamRobotMsg& _internal_maintain(int index) const;
  ::ZSS::Protocol::TeamRobotMsg* _internal_add_maintain();
  public:
  const ::ZSS::Protocol::TeamRobotMsg& maintain(int index) const;
  ::ZSS::Protocol::TeamRobotMsg* add_maintain();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
      maintain() const;

  // required .ZSS.Protocol.Balls4Rec balls = 5;
  bool has_balls() const;
  private:
  bool _internal_has_balls() const;
  public:
  void clear_balls();
  const ::ZSS::Protocol::Balls4Rec& balls() const;
  ::ZSS::Protocol::Balls4Rec* release_balls();
  ::ZSS::Protocol::Balls4Rec* mutable_balls();
  void set_allocated_balls(::ZSS::Protocol::Balls4Rec* balls);
  private:
  const ::ZSS::Protocol::Balls4Rec& _internal_balls() const;
  ::ZSS::Protocol::Balls4Rec* _internal_mutable_balls();
  public:
  void unsafe_arena_set_allocated_balls(
      ::ZSS::Protocol::Balls4Rec* balls);
  ::ZSS::Protocol::Balls4Rec* unsafe_arena_release_balls();

  // required int32 lastTouch = 1;
  bool has_lasttouch() const;
  private:
  bool _internal_has_lasttouch() const;
  public:
  void clear_lasttouch();
  ::PROTOBUF_NAMESPACE_ID::int32 lasttouch() const;
  void set_lasttouch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lasttouch() const;
  void _internal_set_lasttouch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 lastTouchTeam = 2;
  bool has_lasttouchteam() const;
  private:
  bool _internal_has_lasttouchteam() const;
  public:
  void clear_lasttouchteam();
  ::PROTOBUF_NAMESPACE_ID::int32 lasttouchteam() const;
  void set_lasttouchteam(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lasttouchteam() const;
  void _internal_set_lasttouchteam(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.MaintainVision)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg > processmsg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg > maintain_;
  ::ZSS::Protocol::Balls4Rec* balls_;
  ::PROTOBUF_NAMESPACE_ID::int32 lasttouch_;
  ::PROTOBUF_NAMESPACE_ID::int32 lasttouchteam_;
  friend struct ::TableStruct_zss_5frec_2eproto;
};
// -------------------------------------------------------------------

class TeamRobotMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.TeamRobotMsg) */ {
 public:
  inline TeamRobotMsg() : TeamRobotMsg(nullptr) {}
  virtual ~TeamRobotMsg();
  explicit constexpr TeamRobotMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamRobotMsg(const TeamRobotMsg& from);
  TeamRobotMsg(TeamRobotMsg&& from) noexcept
    : TeamRobotMsg() {
    *this = ::std::move(from);
  }

  inline TeamRobotMsg& operator=(const TeamRobotMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamRobotMsg& operator=(TeamRobotMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamRobotMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamRobotMsg* internal_default_instance() {
    return reinterpret_cast<const TeamRobotMsg*>(
               &_TeamRobotMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TeamRobotMsg& a, TeamRobotMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamRobotMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamRobotMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamRobotMsg* New() const final {
    return CreateMaybeMessage<TeamRobotMsg>(nullptr);
  }

  TeamRobotMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamRobotMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamRobotMsg& from);
  void MergeFrom(const TeamRobotMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamRobotMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.TeamRobotMsg";
  }
  protected:
  explicit TeamRobotMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_zss_5frec_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotFieldNumber = 1,
  };
  // repeated .ZSS.Protocol.Robot4Rec robot = 1;
  int robot_size() const;
  private:
  int _internal_robot_size() const;
  public:
  void clear_robot();
  ::ZSS::Protocol::Robot4Rec* mutable_robot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >*
      mutable_robot();
  private:
  const ::ZSS::Protocol::Robot4Rec& _internal_robot(int index) const;
  ::ZSS::Protocol::Robot4Rec* _internal_add_robot();
  public:
  const ::ZSS::Protocol::Robot4Rec& robot(int index) const;
  ::ZSS::Protocol::Robot4Rec* add_robot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >&
      robot() const;

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.TeamRobotMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec > robot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5frec_2eproto;
};
// -------------------------------------------------------------------

class Robot4Rec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Robot4Rec) */ {
 public:
  inline Robot4Rec() : Robot4Rec(nullptr) {}
  virtual ~Robot4Rec();
  explicit constexpr Robot4Rec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Robot4Rec(const Robot4Rec& from);
  Robot4Rec(Robot4Rec&& from) noexcept
    : Robot4Rec() {
    *this = ::std::move(from);
  }

  inline Robot4Rec& operator=(const Robot4Rec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot4Rec& operator=(Robot4Rec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot4Rec& default_instance() {
    return *internal_default_instance();
  }
  static inline const Robot4Rec* internal_default_instance() {
    return reinterpret_cast<const Robot4Rec*>(
               &_Robot4Rec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Robot4Rec& a, Robot4Rec& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot4Rec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Robot4Rec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot4Rec* New() const final {
    return CreateMaybeMessage<Robot4Rec>(nullptr);
  }

  Robot4Rec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot4Rec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot4Rec& from);
  void MergeFrom(const Robot4Rec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot4Rec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Robot4Rec";
  }
  protected:
  explicit Robot4Rec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_zss_5frec_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kAngleFieldNumber = 3,
    kImuDirFieldNumber = 5,
    kBatteryFieldNumber = 7,
    kCapacitanceFieldNumber = 8,
    kValidFieldNumber = 4,
    kImucleanedFieldNumber = 6,
    kInfraredFieldNumber = 9,
  };
  // required double posX = 1;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  double posx() const;
  void set_posx(double value);
  private:
  double _internal_posx() const;
  void _internal_set_posx(double value);
  public:

  // required double posY = 2;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  double posy() const;
  void set_posy(double value);
  private:
  double _internal_posy() const;
  void _internal_set_posy(double value);
  public:

  // required double angle = 3;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // required double imuDir = 5;
  bool has_imudir() const;
  private:
  bool _internal_has_imudir() const;
  public:
  void clear_imudir();
  double imudir() const;
  void set_imudir(double value);
  private:
  double _internal_imudir() const;
  void _internal_set_imudir(double value);
  public:

  // required double battery = 7;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;
  public:
  void clear_battery();
  double battery() const;
  void set_battery(double value);
  private:
  double _internal_battery() const;
  void _internal_set_battery(double value);
  public:

  // required double capacitance = 8;
  bool has_capacitance() const;
  private:
  bool _internal_has_capacitance() const;
  public:
  void clear_capacitance();
  double capacitance() const;
  void set_capacitance(double value);
  private:
  double _internal_capacitance() const;
  void _internal_set_capacitance(double value);
  public:

  // required bool valid = 4;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // required bool imucleaned = 6;
  bool has_imucleaned() const;
  private:
  bool _internal_has_imucleaned() const;
  public:
  void clear_imucleaned();
  bool imucleaned() const;
  void set_imucleaned(bool value);
  private:
  bool _internal_imucleaned() const;
  void _internal_set_imucleaned(bool value);
  public:

  // optional bool infrared = 9;
  bool has_infrared() const;
  private:
  bool _internal_has_infrared() const;
  public:
  void clear_infrared();
  bool infrared() const;
  void set_infrared(bool value);
  private:
  bool _internal_infrared() const;
  void _internal_set_infrared(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Robot4Rec)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double posx_;
  double posy_;
  double angle_;
  double imudir_;
  double battery_;
  double capacitance_;
  bool valid_;
  bool imucleaned_;
  bool infrared_;
  friend struct ::TableStruct_zss_5frec_2eproto;
};
// -------------------------------------------------------------------

class Balls4Rec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Balls4Rec) */ {
 public:
  inline Balls4Rec() : Balls4Rec(nullptr) {}
  virtual ~Balls4Rec();
  explicit constexpr Balls4Rec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balls4Rec(const Balls4Rec& from);
  Balls4Rec(Balls4Rec&& from) noexcept
    : Balls4Rec() {
    *this = ::std::move(from);
  }

  inline Balls4Rec& operator=(const Balls4Rec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balls4Rec& operator=(Balls4Rec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Balls4Rec& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balls4Rec* internal_default_instance() {
    return reinterpret_cast<const Balls4Rec*>(
               &_Balls4Rec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Balls4Rec& a, Balls4Rec& b) {
    a.Swap(&b);
  }
  inline void Swap(Balls4Rec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balls4Rec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Balls4Rec* New() const final {
    return CreateMaybeMessage<Balls4Rec>(nullptr);
  }

  Balls4Rec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Balls4Rec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Balls4Rec& from);
  void MergeFrom(const Balls4Rec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balls4Rec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Balls4Rec";
  }
  protected:
  explicit Balls4Rec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_zss_5frec_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBallFieldNumber = 2,
    kSizeFieldNumber = 1,
    kValidFieldNumber = 3,
  };
  // repeated .ZSS.Protocol.Point ball = 2;
  int ball_size() const;
  private:
  int _internal_ball_size() const;
  public:
  void clear_ball();
  ::ZSS::Protocol::Point* mutable_ball(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Point >*
      mutable_ball();
  private:
  const ::ZSS::Protocol::Point& _internal_ball(int index) const;
  ::ZSS::Protocol::Point* _internal_add_ball();
  public:
  const ::ZSS::Protocol::Point& ball(int index) const;
  ::ZSS::Protocol::Point* add_ball();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Point >&
      ball() const;

  // required int32 size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool valid = 3;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Balls4Rec)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Point > ball_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  bool valid_;
  friend struct ::TableStruct_zss_5frec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecMessages

// repeated .ZSS.Protocol.RecMessage recMsgs = 1;
inline int RecMessages::_internal_recmsgs_size() const {
  return recmsgs_.size();
}
inline int RecMessages::recmsgs_size() const {
  return _internal_recmsgs_size();
}
inline void RecMessages::clear_recmsgs() {
  recmsgs_.Clear();
}
inline ::ZSS::Protocol::RecMessage* RecMessages::mutable_recmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage >*
RecMessages::mutable_recmsgs() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.RecMessages.recMsgs)
  return &recmsgs_;
}
inline const ::ZSS::Protocol::RecMessage& RecMessages::_internal_recmsgs(int index) const {
  return recmsgs_.Get(index);
}
inline const ::ZSS::Protocol::RecMessage& RecMessages::recmsgs(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessages.recMsgs)
  return _internal_recmsgs(index);
}
inline ::ZSS::Protocol::RecMessage* RecMessages::_internal_add_recmsgs() {
  return recmsgs_.Add();
}
inline ::ZSS::Protocol::RecMessage* RecMessages::add_recmsgs() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.RecMessages.recMsgs)
  return _internal_add_recmsgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::RecMessage >&
RecMessages::recmsgs() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.RecMessages.recMsgs)
  return recmsgs_;
}

// -------------------------------------------------------------------

// RecMessage

// required bool ctrlC = 1;
inline bool RecMessage::_internal_has_ctrlc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecMessage::has_ctrlc() const {
  return _internal_has_ctrlc();
}
inline void RecMessage::clear_ctrlc() {
  ctrlc_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool RecMessage::_internal_ctrlc() const {
  return ctrlc_;
}
inline bool RecMessage::ctrlc() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.ctrlC)
  return _internal_ctrlc();
}
inline void RecMessage::_internal_set_ctrlc(bool value) {
  _has_bits_[0] |= 0x00000008u;
  ctrlc_ = value;
}
inline void RecMessage::set_ctrlc(bool value) {
  _internal_set_ctrlc(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.RecMessage.ctrlC)
}

// required .ZSS.Protocol.SelectedArea selectedArea = 2;
inline bool RecMessage::_internal_has_selectedarea() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || selectedarea_ != nullptr);
  return value;
}
inline bool RecMessage::has_selectedarea() const {
  return _internal_has_selectedarea();
}
inline void RecMessage::clear_selectedarea() {
  if (selectedarea_ != nullptr) selectedarea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ZSS::Protocol::SelectedArea& RecMessage::_internal_selectedarea() const {
  const ::ZSS::Protocol::SelectedArea* p = selectedarea_;
  return p != nullptr ? *p : reinterpret_cast<const ::ZSS::Protocol::SelectedArea&>(
      ::ZSS::Protocol::_SelectedArea_default_instance_);
}
inline const ::ZSS::Protocol::SelectedArea& RecMessage::selectedarea() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.selectedArea)
  return _internal_selectedarea();
}
inline void RecMessage::unsafe_arena_set_allocated_selectedarea(
    ::ZSS::Protocol::SelectedArea* selectedarea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectedarea_);
  }
  selectedarea_ = selectedarea;
  if (selectedarea) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.Protocol.RecMessage.selectedArea)
}
inline ::ZSS::Protocol::SelectedArea* RecMessage::release_selectedarea() {
  _has_bits_[0] &= ~0x00000001u;
  ::ZSS::Protocol::SelectedArea* temp = selectedarea_;
  selectedarea_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::Protocol::SelectedArea* RecMessage::unsafe_arena_release_selectedarea() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.RecMessage.selectedArea)
  _has_bits_[0] &= ~0x00000001u;
  ::ZSS::Protocol::SelectedArea* temp = selectedarea_;
  selectedarea_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::SelectedArea* RecMessage::_internal_mutable_selectedarea() {
  _has_bits_[0] |= 0x00000001u;
  if (selectedarea_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::SelectedArea>(GetArena());
    selectedarea_ = p;
  }
  return selectedarea_;
}
inline ::ZSS::Protocol::SelectedArea* RecMessage::mutable_selectedarea() {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.selectedArea)
  return _internal_mutable_selectedarea();
}
inline void RecMessage::set_allocated_selectedarea(::ZSS::Protocol::SelectedArea* selectedarea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectedarea_;
  }
  if (selectedarea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectedarea);
    if (message_arena != submessage_arena) {
      selectedarea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectedarea, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selectedarea_ = selectedarea;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.RecMessage.selectedArea)
}

// required .ZSS.Protocol.MaintainVision maintainVision = 3;
inline bool RecMessage::_internal_has_maintainvision() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || maintainvision_ != nullptr);
  return value;
}
inline bool RecMessage::has_maintainvision() const {
  return _internal_has_maintainvision();
}
inline void RecMessage::clear_maintainvision() {
  if (maintainvision_ != nullptr) maintainvision_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ZSS::Protocol::MaintainVision& RecMessage::_internal_maintainvision() const {
  const ::ZSS::Protocol::MaintainVision* p = maintainvision_;
  return p != nullptr ? *p : reinterpret_cast<const ::ZSS::Protocol::MaintainVision&>(
      ::ZSS::Protocol::_MaintainVision_default_instance_);
}
inline const ::ZSS::Protocol::MaintainVision& RecMessage::maintainvision() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.maintainVision)
  return _internal_maintainvision();
}
inline void RecMessage::unsafe_arena_set_allocated_maintainvision(
    ::ZSS::Protocol::MaintainVision* maintainvision) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maintainvision_);
  }
  maintainvision_ = maintainvision;
  if (maintainvision) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.Protocol.RecMessage.maintainVision)
}
inline ::ZSS::Protocol::MaintainVision* RecMessage::release_maintainvision() {
  _has_bits_[0] &= ~0x00000002u;
  ::ZSS::Protocol::MaintainVision* temp = maintainvision_;
  maintainvision_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::Protocol::MaintainVision* RecMessage::unsafe_arena_release_maintainvision() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.RecMessage.maintainVision)
  _has_bits_[0] &= ~0x00000002u;
  ::ZSS::Protocol::MaintainVision* temp = maintainvision_;
  maintainvision_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::MaintainVision* RecMessage::_internal_mutable_maintainvision() {
  _has_bits_[0] |= 0x00000002u;
  if (maintainvision_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::MaintainVision>(GetArena());
    maintainvision_ = p;
  }
  return maintainvision_;
}
inline ::ZSS::Protocol::MaintainVision* RecMessage::mutable_maintainvision() {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.maintainVision)
  return _internal_mutable_maintainvision();
}
inline void RecMessage::set_allocated_maintainvision(::ZSS::Protocol::MaintainVision* maintainvision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete maintainvision_;
  }
  if (maintainvision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(maintainvision);
    if (message_arena != submessage_arena) {
      maintainvision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maintainvision, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  maintainvision_ = maintainvision;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.RecMessage.maintainVision)
}

// repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
inline int RecMessage::_internal_debugmsgs_size() const {
  return debugmsgs_.size();
}
inline int RecMessage::debugmsgs_size() const {
  return _internal_debugmsgs_size();
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::mutable_debugmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >*
RecMessage::mutable_debugmsgs() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.RecMessage.debugMsgs)
  return &debugmsgs_;
}
inline const ::ZSS::Protocol::Debug_Msgs& RecMessage::_internal_debugmsgs(int index) const {
  return debugmsgs_.Get(index);
}
inline const ::ZSS::Protocol::Debug_Msgs& RecMessage::debugmsgs(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.debugMsgs)
  return _internal_debugmsgs(index);
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::_internal_add_debugmsgs() {
  return debugmsgs_.Add();
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::add_debugmsgs() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.RecMessage.debugMsgs)
  return _internal_add_debugmsgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Debug_Msgs >&
RecMessage::debugmsgs() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.RecMessage.debugMsgs)
  return debugmsgs_;
}

// optional .ZSS.Protocol.Debug_Msgs athenaDebugMsgs = 5;
inline bool RecMessage::_internal_has_athenadebugmsgs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || athenadebugmsgs_ != nullptr);
  return value;
}
inline bool RecMessage::has_athenadebugmsgs() const {
  return _internal_has_athenadebugmsgs();
}
inline const ::ZSS::Protocol::Debug_Msgs& RecMessage::_internal_athenadebugmsgs() const {
  const ::ZSS::Protocol::Debug_Msgs* p = athenadebugmsgs_;
  return p != nullptr ? *p : reinterpret_cast<const ::ZSS::Protocol::Debug_Msgs&>(
      ::ZSS::Protocol::_Debug_Msgs_default_instance_);
}
inline const ::ZSS::Protocol::Debug_Msgs& RecMessage::athenadebugmsgs() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.RecMessage.athenaDebugMsgs)
  return _internal_athenadebugmsgs();
}
inline void RecMessage::unsafe_arena_set_allocated_athenadebugmsgs(
    ::ZSS::Protocol::Debug_Msgs* athenadebugmsgs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(athenadebugmsgs_);
  }
  athenadebugmsgs_ = athenadebugmsgs;
  if (athenadebugmsgs) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.Protocol.RecMessage.athenaDebugMsgs)
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::release_athenadebugmsgs() {
  _has_bits_[0] &= ~0x00000004u;
  ::ZSS::Protocol::Debug_Msgs* temp = athenadebugmsgs_;
  athenadebugmsgs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::unsafe_arena_release_athenadebugmsgs() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.RecMessage.athenaDebugMsgs)
  _has_bits_[0] &= ~0x00000004u;
  ::ZSS::Protocol::Debug_Msgs* temp = athenadebugmsgs_;
  athenadebugmsgs_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::_internal_mutable_athenadebugmsgs() {
  _has_bits_[0] |= 0x00000004u;
  if (athenadebugmsgs_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::Debug_Msgs>(GetArena());
    athenadebugmsgs_ = p;
  }
  return athenadebugmsgs_;
}
inline ::ZSS::Protocol::Debug_Msgs* RecMessage::mutable_athenadebugmsgs() {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.RecMessage.athenaDebugMsgs)
  return _internal_mutable_athenadebugmsgs();
}
inline void RecMessage::set_allocated_athenadebugmsgs(::ZSS::Protocol::Debug_Msgs* athenadebugmsgs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(athenadebugmsgs_);
  }
  if (athenadebugmsgs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(athenadebugmsgs)->GetArena();
    if (message_arena != submessage_arena) {
      athenadebugmsgs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, athenadebugmsgs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  athenadebugmsgs_ = athenadebugmsgs;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.RecMessage.athenaDebugMsgs)
}

// -------------------------------------------------------------------

// SelectedArea

// required float maxX = 1;
inline bool SelectedArea::_internal_has_maxx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SelectedArea::has_maxx() const {
  return _internal_has_maxx();
}
inline void SelectedArea::clear_maxx() {
  maxx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SelectedArea::_internal_maxx() const {
  return maxx_;
}
inline float SelectedArea::maxx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.maxX)
  return _internal_maxx();
}
inline void SelectedArea::_internal_set_maxx(float value) {
  _has_bits_[0] |= 0x00000001u;
  maxx_ = value;
}
inline void SelectedArea::set_maxx(float value) {
  _internal_set_maxx(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.maxX)
}

// required float maxY = 2;
inline bool SelectedArea::_internal_has_maxy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SelectedArea::has_maxy() const {
  return _internal_has_maxy();
}
inline void SelectedArea::clear_maxy() {
  maxy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SelectedArea::_internal_maxy() const {
  return maxy_;
}
inline float SelectedArea::maxy() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.maxY)
  return _internal_maxy();
}
inline void SelectedArea::_internal_set_maxy(float value) {
  _has_bits_[0] |= 0x00000002u;
  maxy_ = value;
}
inline void SelectedArea::set_maxy(float value) {
  _internal_set_maxy(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.maxY)
}

// required float minX = 3;
inline bool SelectedArea::_internal_has_minx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SelectedArea::has_minx() const {
  return _internal_has_minx();
}
inline void SelectedArea::clear_minx() {
  minx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SelectedArea::_internal_minx() const {
  return minx_;
}
inline float SelectedArea::minx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.minX)
  return _internal_minx();
}
inline void SelectedArea::_internal_set_minx(float value) {
  _has_bits_[0] |= 0x00000004u;
  minx_ = value;
}
inline void SelectedArea::set_minx(float value) {
  _internal_set_minx(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.minX)
}

// required float minY = 4;
inline bool SelectedArea::_internal_has_miny() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SelectedArea::has_miny() const {
  return _internal_has_miny();
}
inline void SelectedArea::clear_miny() {
  miny_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SelectedArea::_internal_miny() const {
  return miny_;
}
inline float SelectedArea::miny() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.SelectedArea.minY)
  return _internal_miny();
}
inline void SelectedArea::_internal_set_miny(float value) {
  _has_bits_[0] |= 0x00000008u;
  miny_ = value;
}
inline void SelectedArea::set_miny(float value) {
  _internal_set_miny(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.SelectedArea.minY)
}

// -------------------------------------------------------------------

// MaintainVision

// required int32 lastTouch = 1;
inline bool MaintainVision::_internal_has_lasttouch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MaintainVision::has_lasttouch() const {
  return _internal_has_lasttouch();
}
inline void MaintainVision::clear_lasttouch() {
  lasttouch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaintainVision::_internal_lasttouch() const {
  return lasttouch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaintainVision::lasttouch() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.lastTouch)
  return _internal_lasttouch();
}
inline void MaintainVision::_internal_set_lasttouch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lasttouch_ = value;
}
inline void MaintainVision::set_lasttouch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lasttouch(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.MaintainVision.lastTouch)
}

// required int32 lastTouchTeam = 2;
inline bool MaintainVision::_internal_has_lasttouchteam() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MaintainVision::has_lasttouchteam() const {
  return _internal_has_lasttouchteam();
}
inline void MaintainVision::clear_lasttouchteam() {
  lasttouchteam_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaintainVision::_internal_lasttouchteam() const {
  return lasttouchteam_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaintainVision::lasttouchteam() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.lastTouchTeam)
  return _internal_lasttouchteam();
}
inline void MaintainVision::_internal_set_lasttouchteam(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lasttouchteam_ = value;
}
inline void MaintainVision::set_lasttouchteam(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lasttouchteam(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.MaintainVision.lastTouchTeam)
}

// repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
inline int MaintainVision::_internal_processmsg_size() const {
  return processmsg_.size();
}
inline int MaintainVision::processmsg_size() const {
  return _internal_processmsg_size();
}
inline void MaintainVision::clear_processmsg() {
  processmsg_.Clear();
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::mutable_processmsg(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
MaintainVision::mutable_processmsg() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.MaintainVision.processMsg)
  return &processmsg_;
}
inline const ::ZSS::Protocol::TeamRobotMsg& MaintainVision::_internal_processmsg(int index) const {
  return processmsg_.Get(index);
}
inline const ::ZSS::Protocol::TeamRobotMsg& MaintainVision::processmsg(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.processMsg)
  return _internal_processmsg(index);
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::_internal_add_processmsg() {
  return processmsg_.Add();
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::add_processmsg() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.MaintainVision.processMsg)
  return _internal_add_processmsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
MaintainVision::processmsg() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.MaintainVision.processMsg)
  return processmsg_;
}

// repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
inline int MaintainVision::_internal_maintain_size() const {
  return maintain_.size();
}
inline int MaintainVision::maintain_size() const {
  return _internal_maintain_size();
}
inline void MaintainVision::clear_maintain() {
  maintain_.Clear();
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::mutable_maintain(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.maintain)
  return maintain_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >*
MaintainVision::mutable_maintain() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.MaintainVision.maintain)
  return &maintain_;
}
inline const ::ZSS::Protocol::TeamRobotMsg& MaintainVision::_internal_maintain(int index) const {
  return maintain_.Get(index);
}
inline const ::ZSS::Protocol::TeamRobotMsg& MaintainVision::maintain(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.maintain)
  return _internal_maintain(index);
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::_internal_add_maintain() {
  return maintain_.Add();
}
inline ::ZSS::Protocol::TeamRobotMsg* MaintainVision::add_maintain() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.MaintainVision.maintain)
  return _internal_add_maintain();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::TeamRobotMsg >&
MaintainVision::maintain() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.MaintainVision.maintain)
  return maintain_;
}

// required .ZSS.Protocol.Balls4Rec balls = 5;
inline bool MaintainVision::_internal_has_balls() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || balls_ != nullptr);
  return value;
}
inline bool MaintainVision::has_balls() const {
  return _internal_has_balls();
}
inline void MaintainVision::clear_balls() {
  if (balls_ != nullptr) balls_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ZSS::Protocol::Balls4Rec& MaintainVision::_internal_balls() const {
  const ::ZSS::Protocol::Balls4Rec* p = balls_;
  return p != nullptr ? *p : reinterpret_cast<const ::ZSS::Protocol::Balls4Rec&>(
      ::ZSS::Protocol::_Balls4Rec_default_instance_);
}
inline const ::ZSS::Protocol::Balls4Rec& MaintainVision::balls() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.MaintainVision.balls)
  return _internal_balls();
}
inline void MaintainVision::unsafe_arena_set_allocated_balls(
    ::ZSS::Protocol::Balls4Rec* balls) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(balls_);
  }
  balls_ = balls;
  if (balls) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.Protocol.MaintainVision.balls)
}
inline ::ZSS::Protocol::Balls4Rec* MaintainVision::release_balls() {
  _has_bits_[0] &= ~0x00000001u;
  ::ZSS::Protocol::Balls4Rec* temp = balls_;
  balls_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::Protocol::Balls4Rec* MaintainVision::unsafe_arena_release_balls() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.MaintainVision.balls)
  _has_bits_[0] &= ~0x00000001u;
  ::ZSS::Protocol::Balls4Rec* temp = balls_;
  balls_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::Balls4Rec* MaintainVision::_internal_mutable_balls() {
  _has_bits_[0] |= 0x00000001u;
  if (balls_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::Balls4Rec>(GetArena());
    balls_ = p;
  }
  return balls_;
}
inline ::ZSS::Protocol::Balls4Rec* MaintainVision::mutable_balls() {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.MaintainVision.balls)
  return _internal_mutable_balls();
}
inline void MaintainVision::set_allocated_balls(::ZSS::Protocol::Balls4Rec* balls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete balls_;
  }
  if (balls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(balls);
    if (message_arena != submessage_arena) {
      balls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balls, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  balls_ = balls;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.MaintainVision.balls)
}

// -------------------------------------------------------------------

// TeamRobotMsg

// repeated .ZSS.Protocol.Robot4Rec robot = 1;
inline int TeamRobotMsg::_internal_robot_size() const {
  return robot_.size();
}
inline int TeamRobotMsg::robot_size() const {
  return _internal_robot_size();
}
inline void TeamRobotMsg::clear_robot() {
  robot_.Clear();
}
inline ::ZSS::Protocol::Robot4Rec* TeamRobotMsg::mutable_robot(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >*
TeamRobotMsg::mutable_robot() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.TeamRobotMsg.robot)
  return &robot_;
}
inline const ::ZSS::Protocol::Robot4Rec& TeamRobotMsg::_internal_robot(int index) const {
  return robot_.Get(index);
}
inline const ::ZSS::Protocol::Robot4Rec& TeamRobotMsg::robot(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.TeamRobotMsg.robot)
  return _internal_robot(index);
}
inline ::ZSS::Protocol::Robot4Rec* TeamRobotMsg::_internal_add_robot() {
  return robot_.Add();
}
inline ::ZSS::Protocol::Robot4Rec* TeamRobotMsg::add_robot() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.TeamRobotMsg.robot)
  return _internal_add_robot();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Robot4Rec >&
TeamRobotMsg::robot() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.TeamRobotMsg.robot)
  return robot_;
}

// -------------------------------------------------------------------

// Robot4Rec

// required double posX = 1;
inline bool Robot4Rec::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Robot4Rec::has_posx() const {
  return _internal_has_posx();
}
inline void Robot4Rec::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Robot4Rec::_internal_posx() const {
  return posx_;
}
inline double Robot4Rec::posx() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.posX)
  return _internal_posx();
}
inline void Robot4Rec::_internal_set_posx(double value) {
  _has_bits_[0] |= 0x00000001u;
  posx_ = value;
}
inline void Robot4Rec::set_posx(double value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.posX)
}

// required double posY = 2;
inline bool Robot4Rec::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Robot4Rec::has_posy() const {
  return _internal_has_posy();
}
inline void Robot4Rec::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Robot4Rec::_internal_posy() const {
  return posy_;
}
inline double Robot4Rec::posy() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.posY)
  return _internal_posy();
}
inline void Robot4Rec::_internal_set_posy(double value) {
  _has_bits_[0] |= 0x00000002u;
  posy_ = value;
}
inline void Robot4Rec::set_posy(double value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.posY)
}

// required double angle = 3;
inline bool Robot4Rec::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Robot4Rec::has_angle() const {
  return _internal_has_angle();
}
inline void Robot4Rec::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Robot4Rec::_internal_angle() const {
  return angle_;
}
inline double Robot4Rec::angle() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.angle)
  return _internal_angle();
}
inline void Robot4Rec::_internal_set_angle(double value) {
  _has_bits_[0] |= 0x00000004u;
  angle_ = value;
}
inline void Robot4Rec::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.angle)
}

// required bool valid = 4;
inline bool Robot4Rec::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Robot4Rec::has_valid() const {
  return _internal_has_valid();
}
inline void Robot4Rec::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Robot4Rec::_internal_valid() const {
  return valid_;
}
inline bool Robot4Rec::valid() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.valid)
  return _internal_valid();
}
inline void Robot4Rec::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  valid_ = value;
}
inline void Robot4Rec::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.valid)
}

// required double imuDir = 5;
inline bool Robot4Rec::_internal_has_imudir() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Robot4Rec::has_imudir() const {
  return _internal_has_imudir();
}
inline void Robot4Rec::clear_imudir() {
  imudir_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Robot4Rec::_internal_imudir() const {
  return imudir_;
}
inline double Robot4Rec::imudir() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.imuDir)
  return _internal_imudir();
}
inline void Robot4Rec::_internal_set_imudir(double value) {
  _has_bits_[0] |= 0x00000008u;
  imudir_ = value;
}
inline void Robot4Rec::set_imudir(double value) {
  _internal_set_imudir(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.imuDir)
}

// required bool imucleaned = 6;
inline bool Robot4Rec::_internal_has_imucleaned() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Robot4Rec::has_imucleaned() const {
  return _internal_has_imucleaned();
}
inline void Robot4Rec::clear_imucleaned() {
  imucleaned_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Robot4Rec::_internal_imucleaned() const {
  return imucleaned_;
}
inline bool Robot4Rec::imucleaned() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.imucleaned)
  return _internal_imucleaned();
}
inline void Robot4Rec::_internal_set_imucleaned(bool value) {
  _has_bits_[0] |= 0x00000080u;
  imucleaned_ = value;
}
inline void Robot4Rec::set_imucleaned(bool value) {
  _internal_set_imucleaned(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.imucleaned)
}

// required double battery = 7;
inline bool Robot4Rec::_internal_has_battery() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Robot4Rec::has_battery() const {
  return _internal_has_battery();
}
inline void Robot4Rec::clear_battery() {
  battery_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Robot4Rec::_internal_battery() const {
  return battery_;
}
inline double Robot4Rec::battery() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.battery)
  return _internal_battery();
}
inline void Robot4Rec::_internal_set_battery(double value) {
  _has_bits_[0] |= 0x00000010u;
  battery_ = value;
}
inline void Robot4Rec::set_battery(double value) {
  _internal_set_battery(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.battery)
}

// required double capacitance = 8;
inline bool Robot4Rec::_internal_has_capacitance() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Robot4Rec::has_capacitance() const {
  return _internal_has_capacitance();
}
inline void Robot4Rec::clear_capacitance() {
  capacitance_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Robot4Rec::_internal_capacitance() const {
  return capacitance_;
}
inline double Robot4Rec::capacitance() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.capacitance)
  return _internal_capacitance();
}
inline void Robot4Rec::_internal_set_capacitance(double value) {
  _has_bits_[0] |= 0x00000020u;
  capacitance_ = value;
}
inline void Robot4Rec::set_capacitance(double value) {
  _internal_set_capacitance(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.capacitance)
}

// optional bool infrared = 9;
inline bool Robot4Rec::_internal_has_infrared() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Robot4Rec::has_infrared() const {
  return _internal_has_infrared();
}
inline void Robot4Rec::clear_infrared() {
  infrared_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Robot4Rec::_internal_infrared() const {
  return infrared_;
}
inline bool Robot4Rec::infrared() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot4Rec.infrared)
  return _internal_infrared();
}
inline void Robot4Rec::_internal_set_infrared(bool value) {
  _has_bits_[0] |= 0x00000100u;
  infrared_ = value;
}
inline void Robot4Rec::set_infrared(bool value) {
  _internal_set_infrared(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot4Rec.infrared)
}

// -------------------------------------------------------------------

// Balls4Rec

// required int32 size = 1;
inline bool Balls4Rec::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Balls4Rec::has_size() const {
  return _internal_has_size();
}
inline void Balls4Rec::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Balls4Rec::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Balls4Rec::size() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Balls4Rec.size)
  return _internal_size();
}
inline void Balls4Rec::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void Balls4Rec::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Balls4Rec.size)
}

// repeated .ZSS.Protocol.Point ball = 2;
inline int Balls4Rec::_internal_ball_size() const {
  return ball_.size();
}
inline int Balls4Rec::ball_size() const {
  return _internal_ball_size();
}
inline ::ZSS::Protocol::Point* Balls4Rec::mutable_ball(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Balls4Rec.ball)
  return ball_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Point >*
Balls4Rec::mutable_ball() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.Protocol.Balls4Rec.ball)
  return &ball_;
}
inline const ::ZSS::Protocol::Point& Balls4Rec::_internal_ball(int index) const {
  return ball_.Get(index);
}
inline const ::ZSS::Protocol::Point& Balls4Rec::ball(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Balls4Rec.ball)
  return _internal_ball(index);
}
inline ::ZSS::Protocol::Point* Balls4Rec::_internal_add_ball() {
  return ball_.Add();
}
inline ::ZSS::Protocol::Point* Balls4Rec::add_ball() {
  // @@protoc_insertion_point(field_add:ZSS.Protocol.Balls4Rec.ball)
  return _internal_add_ball();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::Protocol::Point >&
Balls4Rec::ball() const {
  // @@protoc_insertion_point(field_list:ZSS.Protocol.Balls4Rec.ball)
  return ball_;
}

// required bool valid = 3;
inline bool Balls4Rec::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Balls4Rec::has_valid() const {
  return _internal_has_valid();
}
inline void Balls4Rec::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Balls4Rec::_internal_valid() const {
  return valid_;
}
inline bool Balls4Rec::valid() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Balls4Rec.valid)
  return _internal_valid();
}
inline void Balls4Rec::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  valid_ = value;
}
inline void Balls4Rec::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Balls4Rec.valid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zss_5frec_2eproto
