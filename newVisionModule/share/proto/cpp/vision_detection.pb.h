// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_detection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vision_5fdetection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vision_5fdetection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vision_5fdetection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vision_5fdetection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vision_5fdetection_2eproto;
class Vision_DetectionBall;
class Vision_DetectionBallDefaultTypeInternal;
extern Vision_DetectionBallDefaultTypeInternal _Vision_DetectionBall_default_instance_;
class Vision_DetectionFrame;
class Vision_DetectionFrameDefaultTypeInternal;
extern Vision_DetectionFrameDefaultTypeInternal _Vision_DetectionFrame_default_instance_;
class Vision_DetectionRobot;
class Vision_DetectionRobotDefaultTypeInternal;
extern Vision_DetectionRobotDefaultTypeInternal _Vision_DetectionRobot_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Vision_DetectionBall* Arena::CreateMaybeMessage<::Vision_DetectionBall>(Arena*);
template<> ::Vision_DetectionFrame* Arena::CreateMaybeMessage<::Vision_DetectionFrame>(Arena*);
template<> ::Vision_DetectionRobot* Arena::CreateMaybeMessage<::Vision_DetectionRobot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vision_DetectionBall :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vision_DetectionBall) */ {
 public:
  Vision_DetectionBall();
  virtual ~Vision_DetectionBall();

  Vision_DetectionBall(const Vision_DetectionBall& from);
  Vision_DetectionBall(Vision_DetectionBall&& from) noexcept
    : Vision_DetectionBall() {
    *this = ::std::move(from);
  }

  inline Vision_DetectionBall& operator=(const Vision_DetectionBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vision_DetectionBall& operator=(Vision_DetectionBall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vision_DetectionBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vision_DetectionBall* internal_default_instance() {
    return reinterpret_cast<const Vision_DetectionBall*>(
               &_Vision_DetectionBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vision_DetectionBall& a, Vision_DetectionBall& b) {
    a.Swap(&b);
  }
  inline void Swap(Vision_DetectionBall* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vision_DetectionBall* New() const final {
    return CreateMaybeMessage<Vision_DetectionBall>(nullptr);
  }

  Vision_DetectionBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vision_DetectionBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vision_DetectionBall& from);
  void MergeFrom(const Vision_DetectionBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vision_DetectionBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vision_DetectionBall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vision_5fdetection_2eproto);
    return ::descriptor_table_vision_5fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelXFieldNumber = 1,
    kVelYFieldNumber = 2,
    kAreaFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kHeightFieldNumber = 6,
    kBallStateFieldNumber = 7,
    kLastTouchFieldNumber = 8,
    kValidFieldNumber = 9,
    kRawXFieldNumber = 10,
    kRawYFieldNumber = 11,
    kChipPredictXFieldNumber = 12,
    kChipPredictYFieldNumber = 13,
    kChipBestPredictXFieldNumber = 14,
    kChipBestPredictYFieldNumber = 15,
    kRealXFieldNumber = 16,
    kRealYFieldNumber = 17,
    kRealZFieldNumber = 18,
    kChipVelXFieldNumber = 19,
    kChipVelYFieldNumber = 20,
    kChipVelZFieldNumber = 21,
    kChipSecondPosXFieldNumber = 22,
    kChipSecondPosYFieldNumber = 23,
    kChipFlyTimeFieldNumber = 24,
    kChipRestFlyTimeFieldNumber = 25,
  };
  // optional float vel_x = 1;
  bool has_vel_x() const;
  private:
  bool _internal_has_vel_x() const;
  public:
  void clear_vel_x();
  float vel_x() const;
  void set_vel_x(float value);
  private:
  float _internal_vel_x() const;
  void _internal_set_vel_x(float value);
  public:

  // optional float vel_y = 2;
  bool has_vel_y() const;
  private:
  bool _internal_has_vel_y() const;
  public:
  void clear_vel_y();
  float vel_y() const;
  void set_vel_y(float value);
  private:
  float _internal_vel_y() const;
  void _internal_set_vel_y(float value);
  public:

  // optional uint32 area = 3;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::uint32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float x = 4;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 5;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float height = 6;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // optional uint32 ball_state = 7;
  bool has_ball_state() const;
  private:
  bool _internal_has_ball_state() const;
  public:
  void clear_ball_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 ball_state() const;
  void set_ball_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ball_state() const;
  void _internal_set_ball_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_touch = 8;
  bool has_last_touch() const;
  private:
  bool _internal_has_last_touch() const;
  public:
  void clear_last_touch();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_touch() const;
  void set_last_touch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_touch() const;
  void _internal_set_last_touch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool valid = 9;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // required float raw_x = 10;
  bool has_raw_x() const;
  private:
  bool _internal_has_raw_x() const;
  public:
  void clear_raw_x();
  float raw_x() const;
  void set_raw_x(float value);
  private:
  float _internal_raw_x() const;
  void _internal_set_raw_x(float value);
  public:

  // required float raw_y = 11;
  bool has_raw_y() const;
  private:
  bool _internal_has_raw_y() const;
  public:
  void clear_raw_y();
  float raw_y() const;
  void set_raw_y(float value);
  private:
  float _internal_raw_y() const;
  void _internal_set_raw_y(float value);
  public:

  // optional float chip_predict_x = 12;
  bool has_chip_predict_x() const;
  private:
  bool _internal_has_chip_predict_x() const;
  public:
  void clear_chip_predict_x();
  float chip_predict_x() const;
  void set_chip_predict_x(float value);
  private:
  float _internal_chip_predict_x() const;
  void _internal_set_chip_predict_x(float value);
  public:

  // optional float chip_predict_y = 13;
  bool has_chip_predict_y() const;
  private:
  bool _internal_has_chip_predict_y() const;
  public:
  void clear_chip_predict_y();
  float chip_predict_y() const;
  void set_chip_predict_y(float value);
  private:
  float _internal_chip_predict_y() const;
  void _internal_set_chip_predict_y(float value);
  public:

  // optional float chip_best_predict_x = 14;
  bool has_chip_best_predict_x() const;
  private:
  bool _internal_has_chip_best_predict_x() const;
  public:
  void clear_chip_best_predict_x();
  float chip_best_predict_x() const;
  void set_chip_best_predict_x(float value);
  private:
  float _internal_chip_best_predict_x() const;
  void _internal_set_chip_best_predict_x(float value);
  public:

  // optional float chip_best_predict_y = 15;
  bool has_chip_best_predict_y() const;
  private:
  bool _internal_has_chip_best_predict_y() const;
  public:
  void clear_chip_best_predict_y();
  float chip_best_predict_y() const;
  void set_chip_best_predict_y(float value);
  private:
  float _internal_chip_best_predict_y() const;
  void _internal_set_chip_best_predict_y(float value);
  public:

  // optional float real_x = 16;
  bool has_real_x() const;
  private:
  bool _internal_has_real_x() const;
  public:
  void clear_real_x();
  float real_x() const;
  void set_real_x(float value);
  private:
  float _internal_real_x() const;
  void _internal_set_real_x(float value);
  public:

  // optional float real_y = 17;
  bool has_real_y() const;
  private:
  bool _internal_has_real_y() const;
  public:
  void clear_real_y();
  float real_y() const;
  void set_real_y(float value);
  private:
  float _internal_real_y() const;
  void _internal_set_real_y(float value);
  public:

  // optional float real_z = 18;
  bool has_real_z() const;
  private:
  bool _internal_has_real_z() const;
  public:
  void clear_real_z();
  float real_z() const;
  void set_real_z(float value);
  private:
  float _internal_real_z() const;
  void _internal_set_real_z(float value);
  public:

  // optional float chip_vel_x = 19;
  bool has_chip_vel_x() const;
  private:
  bool _internal_has_chip_vel_x() const;
  public:
  void clear_chip_vel_x();
  float chip_vel_x() const;
  void set_chip_vel_x(float value);
  private:
  float _internal_chip_vel_x() const;
  void _internal_set_chip_vel_x(float value);
  public:

  // optional float chip_vel_y = 20;
  bool has_chip_vel_y() const;
  private:
  bool _internal_has_chip_vel_y() const;
  public:
  void clear_chip_vel_y();
  float chip_vel_y() const;
  void set_chip_vel_y(float value);
  private:
  float _internal_chip_vel_y() const;
  void _internal_set_chip_vel_y(float value);
  public:

  // optional float chip_vel_z = 21;
  bool has_chip_vel_z() const;
  private:
  bool _internal_has_chip_vel_z() const;
  public:
  void clear_chip_vel_z();
  float chip_vel_z() const;
  void set_chip_vel_z(float value);
  private:
  float _internal_chip_vel_z() const;
  void _internal_set_chip_vel_z(float value);
  public:

  // optional float chip_second_pos_x = 22;
  bool has_chip_second_pos_x() const;
  private:
  bool _internal_has_chip_second_pos_x() const;
  public:
  void clear_chip_second_pos_x();
  float chip_second_pos_x() const;
  void set_chip_second_pos_x(float value);
  private:
  float _internal_chip_second_pos_x() const;
  void _internal_set_chip_second_pos_x(float value);
  public:

  // optional float chip_second_pos_y = 23;
  bool has_chip_second_pos_y() const;
  private:
  bool _internal_has_chip_second_pos_y() const;
  public:
  void clear_chip_second_pos_y();
  float chip_second_pos_y() const;
  void set_chip_second_pos_y(float value);
  private:
  float _internal_chip_second_pos_y() const;
  void _internal_set_chip_second_pos_y(float value);
  public:

  // optional float chip_fly_time = 24;
  bool has_chip_fly_time() const;
  private:
  bool _internal_has_chip_fly_time() const;
  public:
  void clear_chip_fly_time();
  float chip_fly_time() const;
  void set_chip_fly_time(float value);
  private:
  float _internal_chip_fly_time() const;
  void _internal_set_chip_fly_time(float value);
  public:

  // optional float chip_rest_fly_time = 25;
  bool has_chip_rest_fly_time() const;
  private:
  bool _internal_has_chip_rest_fly_time() const;
  public:
  void clear_chip_rest_fly_time();
  float chip_rest_fly_time() const;
  void set_chip_rest_fly_time(float value);
  private:
  float _internal_chip_rest_fly_time() const;
  void _internal_set_chip_rest_fly_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vision_DetectionBall)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float vel_x_;
  float vel_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 area_;
  float x_;
  float y_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ball_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_touch_;
  bool valid_;
  float raw_x_;
  float raw_y_;
  float chip_predict_x_;
  float chip_predict_y_;
  float chip_best_predict_x_;
  float chip_best_predict_y_;
  float real_x_;
  float real_y_;
  float real_z_;
  float chip_vel_x_;
  float chip_vel_y_;
  float chip_vel_z_;
  float chip_second_pos_x_;
  float chip_second_pos_y_;
  float chip_fly_time_;
  float chip_rest_fly_time_;
  friend struct ::TableStruct_vision_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class Vision_DetectionRobot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vision_DetectionRobot) */ {
 public:
  Vision_DetectionRobot();
  virtual ~Vision_DetectionRobot();

  Vision_DetectionRobot(const Vision_DetectionRobot& from);
  Vision_DetectionRobot(Vision_DetectionRobot&& from) noexcept
    : Vision_DetectionRobot() {
    *this = ::std::move(from);
  }

  inline Vision_DetectionRobot& operator=(const Vision_DetectionRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vision_DetectionRobot& operator=(Vision_DetectionRobot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vision_DetectionRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vision_DetectionRobot* internal_default_instance() {
    return reinterpret_cast<const Vision_DetectionRobot*>(
               &_Vision_DetectionRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vision_DetectionRobot& a, Vision_DetectionRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(Vision_DetectionRobot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vision_DetectionRobot* New() const final {
    return CreateMaybeMessage<Vision_DetectionRobot>(nullptr);
  }

  Vision_DetectionRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vision_DetectionRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vision_DetectionRobot& from);
  void MergeFrom(const Vision_DetectionRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vision_DetectionRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vision_DetectionRobot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vision_5fdetection_2eproto);
    return ::descriptor_table_vision_5fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kRobotIdFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kVelXFieldNumber = 6,
    kVelYFieldNumber = 7,
    kRotateVelFieldNumber = 8,
    kAccelerateXFieldNumber = 9,
    kAccelerateYFieldNumber = 10,
    kRawXFieldNumber = 11,
    kRawYFieldNumber = 12,
    kRawOrientationFieldNumber = 13,
    kRawVelXFieldNumber = 14,
    kRawVelYFieldNumber = 15,
    kRawRotateVelFieldNumber = 16,
    kImuDirFieldNumber = 17,
    kImuRotateVelFieldNumber = 18,
  };
  // required bool valid = 1;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // optional uint32 robot_id = 2;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id() const;
  void set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_robot_id() const;
  void _internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float orientation = 5;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  float orientation() const;
  void set_orientation(float value);
  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);
  public:

  // optional float vel_x = 6;
  bool has_vel_x() const;
  private:
  bool _internal_has_vel_x() const;
  public:
  void clear_vel_x();
  float vel_x() const;
  void set_vel_x(float value);
  private:
  float _internal_vel_x() const;
  void _internal_set_vel_x(float value);
  public:

  // optional float vel_y = 7;
  bool has_vel_y() const;
  private:
  bool _internal_has_vel_y() const;
  public:
  void clear_vel_y();
  float vel_y() const;
  void set_vel_y(float value);
  private:
  float _internal_vel_y() const;
  void _internal_set_vel_y(float value);
  public:

  // optional float rotate_vel = 8;
  bool has_rotate_vel() const;
  private:
  bool _internal_has_rotate_vel() const;
  public:
  void clear_rotate_vel();
  float rotate_vel() const;
  void set_rotate_vel(float value);
  private:
  float _internal_rotate_vel() const;
  void _internal_set_rotate_vel(float value);
  public:

  // optional float accelerate_x = 9;
  bool has_accelerate_x() const;
  private:
  bool _internal_has_accelerate_x() const;
  public:
  void clear_accelerate_x();
  float accelerate_x() const;
  void set_accelerate_x(float value);
  private:
  float _internal_accelerate_x() const;
  void _internal_set_accelerate_x(float value);
  public:

  // optional float accelerate_y = 10;
  bool has_accelerate_y() const;
  private:
  bool _internal_has_accelerate_y() const;
  public:
  void clear_accelerate_y();
  float accelerate_y() const;
  void set_accelerate_y(float value);
  private:
  float _internal_accelerate_y() const;
  void _internal_set_accelerate_y(float value);
  public:

  // required float raw_x = 11;
  bool has_raw_x() const;
  private:
  bool _internal_has_raw_x() const;
  public:
  void clear_raw_x();
  float raw_x() const;
  void set_raw_x(float value);
  private:
  float _internal_raw_x() const;
  void _internal_set_raw_x(float value);
  public:

  // required float raw_y = 12;
  bool has_raw_y() const;
  private:
  bool _internal_has_raw_y() const;
  public:
  void clear_raw_y();
  float raw_y() const;
  void set_raw_y(float value);
  private:
  float _internal_raw_y() const;
  void _internal_set_raw_y(float value);
  public:

  // optional float raw_orientation = 13;
  bool has_raw_orientation() const;
  private:
  bool _internal_has_raw_orientation() const;
  public:
  void clear_raw_orientation();
  float raw_orientation() const;
  void set_raw_orientation(float value);
  private:
  float _internal_raw_orientation() const;
  void _internal_set_raw_orientation(float value);
  public:

  // optional float raw_vel_x = 14;
  bool has_raw_vel_x() const;
  private:
  bool _internal_has_raw_vel_x() const;
  public:
  void clear_raw_vel_x();
  float raw_vel_x() const;
  void set_raw_vel_x(float value);
  private:
  float _internal_raw_vel_x() const;
  void _internal_set_raw_vel_x(float value);
  public:

  // optional float raw_vel_y = 15;
  bool has_raw_vel_y() const;
  private:
  bool _internal_has_raw_vel_y() const;
  public:
  void clear_raw_vel_y();
  float raw_vel_y() const;
  void set_raw_vel_y(float value);
  private:
  float _internal_raw_vel_y() const;
  void _internal_set_raw_vel_y(float value);
  public:

  // optional float raw_rotate_vel = 16;
  bool has_raw_rotate_vel() const;
  private:
  bool _internal_has_raw_rotate_vel() const;
  public:
  void clear_raw_rotate_vel();
  float raw_rotate_vel() const;
  void set_raw_rotate_vel(float value);
  private:
  float _internal_raw_rotate_vel() const;
  void _internal_set_raw_rotate_vel(float value);
  public:

  // optional float imu_dir = 17;
  bool has_imu_dir() const;
  private:
  bool _internal_has_imu_dir() const;
  public:
  void clear_imu_dir();
  float imu_dir() const;
  void set_imu_dir(float value);
  private:
  float _internal_imu_dir() const;
  void _internal_set_imu_dir(float value);
  public:

  // optional float imu_rotate_vel = 18;
  bool has_imu_rotate_vel() const;
  private:
  bool _internal_has_imu_rotate_vel() const;
  public:
  void clear_imu_rotate_vel();
  float imu_rotate_vel() const;
  void set_imu_rotate_vel(float value);
  private:
  float _internal_imu_rotate_vel() const;
  void _internal_set_imu_rotate_vel(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vision_DetectionRobot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id_;
  float x_;
  float y_;
  float orientation_;
  float vel_x_;
  float vel_y_;
  float rotate_vel_;
  float accelerate_x_;
  float accelerate_y_;
  float raw_x_;
  float raw_y_;
  float raw_orientation_;
  float raw_vel_x_;
  float raw_vel_y_;
  float raw_rotate_vel_;
  float imu_dir_;
  float imu_rotate_vel_;
  friend struct ::TableStruct_vision_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class Vision_DetectionFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vision_DetectionFrame) */ {
 public:
  Vision_DetectionFrame();
  virtual ~Vision_DetectionFrame();

  Vision_DetectionFrame(const Vision_DetectionFrame& from);
  Vision_DetectionFrame(Vision_DetectionFrame&& from) noexcept
    : Vision_DetectionFrame() {
    *this = ::std::move(from);
  }

  inline Vision_DetectionFrame& operator=(const Vision_DetectionFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vision_DetectionFrame& operator=(Vision_DetectionFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vision_DetectionFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vision_DetectionFrame* internal_default_instance() {
    return reinterpret_cast<const Vision_DetectionFrame*>(
               &_Vision_DetectionFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vision_DetectionFrame& a, Vision_DetectionFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(Vision_DetectionFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vision_DetectionFrame* New() const final {
    return CreateMaybeMessage<Vision_DetectionFrame>(nullptr);
  }

  Vision_DetectionFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vision_DetectionFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vision_DetectionFrame& from);
  void MergeFrom(const Vision_DetectionFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vision_DetectionFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vision_DetectionFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vision_5fdetection_2eproto);
    return ::descriptor_table_vision_5fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotsYellowFieldNumber = 2,
    kRobotsBlueFieldNumber = 3,
    kBallsFieldNumber = 1,
  };
  // repeated .Vision_DetectionRobot robots_yellow = 2;
  int robots_yellow_size() const;
  private:
  int _internal_robots_yellow_size() const;
  public:
  void clear_robots_yellow();
  ::Vision_DetectionRobot* mutable_robots_yellow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot >*
      mutable_robots_yellow();
  private:
  const ::Vision_DetectionRobot& _internal_robots_yellow(int index) const;
  ::Vision_DetectionRobot* _internal_add_robots_yellow();
  public:
  const ::Vision_DetectionRobot& robots_yellow(int index) const;
  ::Vision_DetectionRobot* add_robots_yellow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot >&
      robots_yellow() const;

  // repeated .Vision_DetectionRobot robots_blue = 3;
  int robots_blue_size() const;
  private:
  int _internal_robots_blue_size() const;
  public:
  void clear_robots_blue();
  ::Vision_DetectionRobot* mutable_robots_blue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot >*
      mutable_robots_blue();
  private:
  const ::Vision_DetectionRobot& _internal_robots_blue(int index) const;
  ::Vision_DetectionRobot* _internal_add_robots_blue();
  public:
  const ::Vision_DetectionRobot& robots_blue(int index) const;
  ::Vision_DetectionRobot* add_robots_blue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot >&
      robots_blue() const;

  // required .Vision_DetectionBall balls = 1;
  bool has_balls() const;
  private:
  bool _internal_has_balls() const;
  public:
  void clear_balls();
  const ::Vision_DetectionBall& balls() const;
  ::Vision_DetectionBall* release_balls();
  ::Vision_DetectionBall* mutable_balls();
  void set_allocated_balls(::Vision_DetectionBall* balls);
  private:
  const ::Vision_DetectionBall& _internal_balls() const;
  ::Vision_DetectionBall* _internal_mutable_balls();
  public:

  // @@protoc_insertion_point(class_scope:Vision_DetectionFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot > robots_yellow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot > robots_blue_;
  ::Vision_DetectionBall* balls_;
  friend struct ::TableStruct_vision_5fdetection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vision_DetectionBall

// optional float vel_x = 1;
inline bool Vision_DetectionBall::_internal_has_vel_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_vel_x() const {
  return _internal_has_vel_x();
}
inline void Vision_DetectionBall::clear_vel_x() {
  vel_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Vision_DetectionBall::_internal_vel_x() const {
  return vel_x_;
}
inline float Vision_DetectionBall::vel_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.vel_x)
  return _internal_vel_x();
}
inline void Vision_DetectionBall::_internal_set_vel_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  vel_x_ = value;
}
inline void Vision_DetectionBall::set_vel_x(float value) {
  _internal_set_vel_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.vel_x)
}

// optional float vel_y = 2;
inline bool Vision_DetectionBall::_internal_has_vel_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_vel_y() const {
  return _internal_has_vel_y();
}
inline void Vision_DetectionBall::clear_vel_y() {
  vel_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Vision_DetectionBall::_internal_vel_y() const {
  return vel_y_;
}
inline float Vision_DetectionBall::vel_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.vel_y)
  return _internal_vel_y();
}
inline void Vision_DetectionBall::_internal_set_vel_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  vel_y_ = value;
}
inline void Vision_DetectionBall::set_vel_y(float value) {
  _internal_set_vel_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.vel_y)
}

// optional uint32 area = 3;
inline bool Vision_DetectionBall::_internal_has_area() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_area() const {
  return _internal_has_area();
}
inline void Vision_DetectionBall::clear_area() {
  area_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vision_DetectionBall::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vision_DetectionBall::area() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.area)
  return _internal_area();
}
inline void Vision_DetectionBall::_internal_set_area(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  area_ = value;
}
inline void Vision_DetectionBall::set_area(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.area)
}

// required float x = 4;
inline bool Vision_DetectionBall::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_x() const {
  return _internal_has_x();
}
inline void Vision_DetectionBall::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Vision_DetectionBall::_internal_x() const {
  return x_;
}
inline float Vision_DetectionBall::x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.x)
  return _internal_x();
}
inline void Vision_DetectionBall::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
}
inline void Vision_DetectionBall::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.x)
}

// required float y = 5;
inline bool Vision_DetectionBall::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_y() const {
  return _internal_has_y();
}
inline void Vision_DetectionBall::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Vision_DetectionBall::_internal_y() const {
  return y_;
}
inline float Vision_DetectionBall::y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.y)
  return _internal_y();
}
inline void Vision_DetectionBall::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void Vision_DetectionBall::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.y)
}

// optional float height = 6;
inline bool Vision_DetectionBall::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_height() const {
  return _internal_has_height();
}
inline void Vision_DetectionBall::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Vision_DetectionBall::_internal_height() const {
  return height_;
}
inline float Vision_DetectionBall::height() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.height)
  return _internal_height();
}
inline void Vision_DetectionBall::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000020u;
  height_ = value;
}
inline void Vision_DetectionBall::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.height)
}

// optional uint32 ball_state = 7;
inline bool Vision_DetectionBall::_internal_has_ball_state() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_ball_state() const {
  return _internal_has_ball_state();
}
inline void Vision_DetectionBall::clear_ball_state() {
  ball_state_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vision_DetectionBall::_internal_ball_state() const {
  return ball_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vision_DetectionBall::ball_state() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.ball_state)
  return _internal_ball_state();
}
inline void Vision_DetectionBall::_internal_set_ball_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ball_state_ = value;
}
inline void Vision_DetectionBall::set_ball_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ball_state(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.ball_state)
}

// optional uint32 last_touch = 8;
inline bool Vision_DetectionBall::_internal_has_last_touch() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_last_touch() const {
  return _internal_has_last_touch();
}
inline void Vision_DetectionBall::clear_last_touch() {
  last_touch_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vision_DetectionBall::_internal_last_touch() const {
  return last_touch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vision_DetectionBall::last_touch() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.last_touch)
  return _internal_last_touch();
}
inline void Vision_DetectionBall::_internal_set_last_touch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  last_touch_ = value;
}
inline void Vision_DetectionBall::set_last_touch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_touch(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.last_touch)
}

// required bool valid = 9;
inline bool Vision_DetectionBall::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_valid() const {
  return _internal_has_valid();
}
inline void Vision_DetectionBall::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Vision_DetectionBall::_internal_valid() const {
  return valid_;
}
inline bool Vision_DetectionBall::valid() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.valid)
  return _internal_valid();
}
inline void Vision_DetectionBall::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000100u;
  valid_ = value;
}
inline void Vision_DetectionBall::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.valid)
}

// required float raw_x = 10;
inline bool Vision_DetectionBall::_internal_has_raw_x() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_raw_x() const {
  return _internal_has_raw_x();
}
inline void Vision_DetectionBall::clear_raw_x() {
  raw_x_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Vision_DetectionBall::_internal_raw_x() const {
  return raw_x_;
}
inline float Vision_DetectionBall::raw_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.raw_x)
  return _internal_raw_x();
}
inline void Vision_DetectionBall::_internal_set_raw_x(float value) {
  _has_bits_[0] |= 0x00000200u;
  raw_x_ = value;
}
inline void Vision_DetectionBall::set_raw_x(float value) {
  _internal_set_raw_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.raw_x)
}

// required float raw_y = 11;
inline bool Vision_DetectionBall::_internal_has_raw_y() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_raw_y() const {
  return _internal_has_raw_y();
}
inline void Vision_DetectionBall::clear_raw_y() {
  raw_y_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Vision_DetectionBall::_internal_raw_y() const {
  return raw_y_;
}
inline float Vision_DetectionBall::raw_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.raw_y)
  return _internal_raw_y();
}
inline void Vision_DetectionBall::_internal_set_raw_y(float value) {
  _has_bits_[0] |= 0x00000400u;
  raw_y_ = value;
}
inline void Vision_DetectionBall::set_raw_y(float value) {
  _internal_set_raw_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.raw_y)
}

// optional float chip_predict_x = 12;
inline bool Vision_DetectionBall::_internal_has_chip_predict_x() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_predict_x() const {
  return _internal_has_chip_predict_x();
}
inline void Vision_DetectionBall::clear_chip_predict_x() {
  chip_predict_x_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float Vision_DetectionBall::_internal_chip_predict_x() const {
  return chip_predict_x_;
}
inline float Vision_DetectionBall::chip_predict_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_predict_x)
  return _internal_chip_predict_x();
}
inline void Vision_DetectionBall::_internal_set_chip_predict_x(float value) {
  _has_bits_[0] |= 0x00000800u;
  chip_predict_x_ = value;
}
inline void Vision_DetectionBall::set_chip_predict_x(float value) {
  _internal_set_chip_predict_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_predict_x)
}

// optional float chip_predict_y = 13;
inline bool Vision_DetectionBall::_internal_has_chip_predict_y() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_predict_y() const {
  return _internal_has_chip_predict_y();
}
inline void Vision_DetectionBall::clear_chip_predict_y() {
  chip_predict_y_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Vision_DetectionBall::_internal_chip_predict_y() const {
  return chip_predict_y_;
}
inline float Vision_DetectionBall::chip_predict_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_predict_y)
  return _internal_chip_predict_y();
}
inline void Vision_DetectionBall::_internal_set_chip_predict_y(float value) {
  _has_bits_[0] |= 0x00001000u;
  chip_predict_y_ = value;
}
inline void Vision_DetectionBall::set_chip_predict_y(float value) {
  _internal_set_chip_predict_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_predict_y)
}

// optional float chip_best_predict_x = 14;
inline bool Vision_DetectionBall::_internal_has_chip_best_predict_x() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_best_predict_x() const {
  return _internal_has_chip_best_predict_x();
}
inline void Vision_DetectionBall::clear_chip_best_predict_x() {
  chip_best_predict_x_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float Vision_DetectionBall::_internal_chip_best_predict_x() const {
  return chip_best_predict_x_;
}
inline float Vision_DetectionBall::chip_best_predict_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_best_predict_x)
  return _internal_chip_best_predict_x();
}
inline void Vision_DetectionBall::_internal_set_chip_best_predict_x(float value) {
  _has_bits_[0] |= 0x00002000u;
  chip_best_predict_x_ = value;
}
inline void Vision_DetectionBall::set_chip_best_predict_x(float value) {
  _internal_set_chip_best_predict_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_best_predict_x)
}

// optional float chip_best_predict_y = 15;
inline bool Vision_DetectionBall::_internal_has_chip_best_predict_y() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_best_predict_y() const {
  return _internal_has_chip_best_predict_y();
}
inline void Vision_DetectionBall::clear_chip_best_predict_y() {
  chip_best_predict_y_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float Vision_DetectionBall::_internal_chip_best_predict_y() const {
  return chip_best_predict_y_;
}
inline float Vision_DetectionBall::chip_best_predict_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_best_predict_y)
  return _internal_chip_best_predict_y();
}
inline void Vision_DetectionBall::_internal_set_chip_best_predict_y(float value) {
  _has_bits_[0] |= 0x00004000u;
  chip_best_predict_y_ = value;
}
inline void Vision_DetectionBall::set_chip_best_predict_y(float value) {
  _internal_set_chip_best_predict_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_best_predict_y)
}

// optional float real_x = 16;
inline bool Vision_DetectionBall::_internal_has_real_x() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_real_x() const {
  return _internal_has_real_x();
}
inline void Vision_DetectionBall::clear_real_x() {
  real_x_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float Vision_DetectionBall::_internal_real_x() const {
  return real_x_;
}
inline float Vision_DetectionBall::real_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.real_x)
  return _internal_real_x();
}
inline void Vision_DetectionBall::_internal_set_real_x(float value) {
  _has_bits_[0] |= 0x00008000u;
  real_x_ = value;
}
inline void Vision_DetectionBall::set_real_x(float value) {
  _internal_set_real_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.real_x)
}

// optional float real_y = 17;
inline bool Vision_DetectionBall::_internal_has_real_y() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_real_y() const {
  return _internal_has_real_y();
}
inline void Vision_DetectionBall::clear_real_y() {
  real_y_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float Vision_DetectionBall::_internal_real_y() const {
  return real_y_;
}
inline float Vision_DetectionBall::real_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.real_y)
  return _internal_real_y();
}
inline void Vision_DetectionBall::_internal_set_real_y(float value) {
  _has_bits_[0] |= 0x00010000u;
  real_y_ = value;
}
inline void Vision_DetectionBall::set_real_y(float value) {
  _internal_set_real_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.real_y)
}

// optional float real_z = 18;
inline bool Vision_DetectionBall::_internal_has_real_z() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_real_z() const {
  return _internal_has_real_z();
}
inline void Vision_DetectionBall::clear_real_z() {
  real_z_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float Vision_DetectionBall::_internal_real_z() const {
  return real_z_;
}
inline float Vision_DetectionBall::real_z() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.real_z)
  return _internal_real_z();
}
inline void Vision_DetectionBall::_internal_set_real_z(float value) {
  _has_bits_[0] |= 0x00020000u;
  real_z_ = value;
}
inline void Vision_DetectionBall::set_real_z(float value) {
  _internal_set_real_z(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.real_z)
}

// optional float chip_vel_x = 19;
inline bool Vision_DetectionBall::_internal_has_chip_vel_x() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_vel_x() const {
  return _internal_has_chip_vel_x();
}
inline void Vision_DetectionBall::clear_chip_vel_x() {
  chip_vel_x_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float Vision_DetectionBall::_internal_chip_vel_x() const {
  return chip_vel_x_;
}
inline float Vision_DetectionBall::chip_vel_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_vel_x)
  return _internal_chip_vel_x();
}
inline void Vision_DetectionBall::_internal_set_chip_vel_x(float value) {
  _has_bits_[0] |= 0x00040000u;
  chip_vel_x_ = value;
}
inline void Vision_DetectionBall::set_chip_vel_x(float value) {
  _internal_set_chip_vel_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_vel_x)
}

// optional float chip_vel_y = 20;
inline bool Vision_DetectionBall::_internal_has_chip_vel_y() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_vel_y() const {
  return _internal_has_chip_vel_y();
}
inline void Vision_DetectionBall::clear_chip_vel_y() {
  chip_vel_y_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float Vision_DetectionBall::_internal_chip_vel_y() const {
  return chip_vel_y_;
}
inline float Vision_DetectionBall::chip_vel_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_vel_y)
  return _internal_chip_vel_y();
}
inline void Vision_DetectionBall::_internal_set_chip_vel_y(float value) {
  _has_bits_[0] |= 0x00080000u;
  chip_vel_y_ = value;
}
inline void Vision_DetectionBall::set_chip_vel_y(float value) {
  _internal_set_chip_vel_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_vel_y)
}

// optional float chip_vel_z = 21;
inline bool Vision_DetectionBall::_internal_has_chip_vel_z() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_vel_z() const {
  return _internal_has_chip_vel_z();
}
inline void Vision_DetectionBall::clear_chip_vel_z() {
  chip_vel_z_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float Vision_DetectionBall::_internal_chip_vel_z() const {
  return chip_vel_z_;
}
inline float Vision_DetectionBall::chip_vel_z() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_vel_z)
  return _internal_chip_vel_z();
}
inline void Vision_DetectionBall::_internal_set_chip_vel_z(float value) {
  _has_bits_[0] |= 0x00100000u;
  chip_vel_z_ = value;
}
inline void Vision_DetectionBall::set_chip_vel_z(float value) {
  _internal_set_chip_vel_z(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_vel_z)
}

// optional float chip_second_pos_x = 22;
inline bool Vision_DetectionBall::_internal_has_chip_second_pos_x() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_second_pos_x() const {
  return _internal_has_chip_second_pos_x();
}
inline void Vision_DetectionBall::clear_chip_second_pos_x() {
  chip_second_pos_x_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float Vision_DetectionBall::_internal_chip_second_pos_x() const {
  return chip_second_pos_x_;
}
inline float Vision_DetectionBall::chip_second_pos_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_second_pos_x)
  return _internal_chip_second_pos_x();
}
inline void Vision_DetectionBall::_internal_set_chip_second_pos_x(float value) {
  _has_bits_[0] |= 0x00200000u;
  chip_second_pos_x_ = value;
}
inline void Vision_DetectionBall::set_chip_second_pos_x(float value) {
  _internal_set_chip_second_pos_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_second_pos_x)
}

// optional float chip_second_pos_y = 23;
inline bool Vision_DetectionBall::_internal_has_chip_second_pos_y() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_second_pos_y() const {
  return _internal_has_chip_second_pos_y();
}
inline void Vision_DetectionBall::clear_chip_second_pos_y() {
  chip_second_pos_y_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float Vision_DetectionBall::_internal_chip_second_pos_y() const {
  return chip_second_pos_y_;
}
inline float Vision_DetectionBall::chip_second_pos_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_second_pos_y)
  return _internal_chip_second_pos_y();
}
inline void Vision_DetectionBall::_internal_set_chip_second_pos_y(float value) {
  _has_bits_[0] |= 0x00400000u;
  chip_second_pos_y_ = value;
}
inline void Vision_DetectionBall::set_chip_second_pos_y(float value) {
  _internal_set_chip_second_pos_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_second_pos_y)
}

// optional float chip_fly_time = 24;
inline bool Vision_DetectionBall::_internal_has_chip_fly_time() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_fly_time() const {
  return _internal_has_chip_fly_time();
}
inline void Vision_DetectionBall::clear_chip_fly_time() {
  chip_fly_time_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float Vision_DetectionBall::_internal_chip_fly_time() const {
  return chip_fly_time_;
}
inline float Vision_DetectionBall::chip_fly_time() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_fly_time)
  return _internal_chip_fly_time();
}
inline void Vision_DetectionBall::_internal_set_chip_fly_time(float value) {
  _has_bits_[0] |= 0x00800000u;
  chip_fly_time_ = value;
}
inline void Vision_DetectionBall::set_chip_fly_time(float value) {
  _internal_set_chip_fly_time(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_fly_time)
}

// optional float chip_rest_fly_time = 25;
inline bool Vision_DetectionBall::_internal_has_chip_rest_fly_time() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Vision_DetectionBall::has_chip_rest_fly_time() const {
  return _internal_has_chip_rest_fly_time();
}
inline void Vision_DetectionBall::clear_chip_rest_fly_time() {
  chip_rest_fly_time_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float Vision_DetectionBall::_internal_chip_rest_fly_time() const {
  return chip_rest_fly_time_;
}
inline float Vision_DetectionBall::chip_rest_fly_time() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionBall.chip_rest_fly_time)
  return _internal_chip_rest_fly_time();
}
inline void Vision_DetectionBall::_internal_set_chip_rest_fly_time(float value) {
  _has_bits_[0] |= 0x01000000u;
  chip_rest_fly_time_ = value;
}
inline void Vision_DetectionBall::set_chip_rest_fly_time(float value) {
  _internal_set_chip_rest_fly_time(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionBall.chip_rest_fly_time)
}

// -------------------------------------------------------------------

// Vision_DetectionRobot

// required bool valid = 1;
inline bool Vision_DetectionRobot::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_valid() const {
  return _internal_has_valid();
}
inline void Vision_DetectionRobot::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Vision_DetectionRobot::_internal_valid() const {
  return valid_;
}
inline bool Vision_DetectionRobot::valid() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.valid)
  return _internal_valid();
}
inline void Vision_DetectionRobot::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  valid_ = value;
}
inline void Vision_DetectionRobot::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.valid)
}

// optional uint32 robot_id = 2;
inline bool Vision_DetectionRobot::_internal_has_robot_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_robot_id() const {
  return _internal_has_robot_id();
}
inline void Vision_DetectionRobot::clear_robot_id() {
  robot_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vision_DetectionRobot::_internal_robot_id() const {
  return robot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vision_DetectionRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.robot_id)
  return _internal_robot_id();
}
inline void Vision_DetectionRobot::_internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  robot_id_ = value;
}
inline void Vision_DetectionRobot::set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.robot_id)
}

// required float x = 3;
inline bool Vision_DetectionRobot::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_x() const {
  return _internal_has_x();
}
inline void Vision_DetectionRobot::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Vision_DetectionRobot::_internal_x() const {
  return x_;
}
inline float Vision_DetectionRobot::x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.x)
  return _internal_x();
}
inline void Vision_DetectionRobot::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void Vision_DetectionRobot::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.x)
}

// required float y = 4;
inline bool Vision_DetectionRobot::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_y() const {
  return _internal_has_y();
}
inline void Vision_DetectionRobot::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Vision_DetectionRobot::_internal_y() const {
  return y_;
}
inline float Vision_DetectionRobot::y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.y)
  return _internal_y();
}
inline void Vision_DetectionRobot::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void Vision_DetectionRobot::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.y)
}

// optional float orientation = 5;
inline bool Vision_DetectionRobot::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_orientation() const {
  return _internal_has_orientation();
}
inline void Vision_DetectionRobot::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Vision_DetectionRobot::_internal_orientation() const {
  return orientation_;
}
inline float Vision_DetectionRobot::orientation() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.orientation)
  return _internal_orientation();
}
inline void Vision_DetectionRobot::_internal_set_orientation(float value) {
  _has_bits_[0] |= 0x00000010u;
  orientation_ = value;
}
inline void Vision_DetectionRobot::set_orientation(float value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.orientation)
}

// optional float vel_x = 6;
inline bool Vision_DetectionRobot::_internal_has_vel_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_vel_x() const {
  return _internal_has_vel_x();
}
inline void Vision_DetectionRobot::clear_vel_x() {
  vel_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Vision_DetectionRobot::_internal_vel_x() const {
  return vel_x_;
}
inline float Vision_DetectionRobot::vel_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.vel_x)
  return _internal_vel_x();
}
inline void Vision_DetectionRobot::_internal_set_vel_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  vel_x_ = value;
}
inline void Vision_DetectionRobot::set_vel_x(float value) {
  _internal_set_vel_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.vel_x)
}

// optional float vel_y = 7;
inline bool Vision_DetectionRobot::_internal_has_vel_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_vel_y() const {
  return _internal_has_vel_y();
}
inline void Vision_DetectionRobot::clear_vel_y() {
  vel_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Vision_DetectionRobot::_internal_vel_y() const {
  return vel_y_;
}
inline float Vision_DetectionRobot::vel_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.vel_y)
  return _internal_vel_y();
}
inline void Vision_DetectionRobot::_internal_set_vel_y(float value) {
  _has_bits_[0] |= 0x00000040u;
  vel_y_ = value;
}
inline void Vision_DetectionRobot::set_vel_y(float value) {
  _internal_set_vel_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.vel_y)
}

// optional float rotate_vel = 8;
inline bool Vision_DetectionRobot::_internal_has_rotate_vel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_rotate_vel() const {
  return _internal_has_rotate_vel();
}
inline void Vision_DetectionRobot::clear_rotate_vel() {
  rotate_vel_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Vision_DetectionRobot::_internal_rotate_vel() const {
  return rotate_vel_;
}
inline float Vision_DetectionRobot::rotate_vel() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.rotate_vel)
  return _internal_rotate_vel();
}
inline void Vision_DetectionRobot::_internal_set_rotate_vel(float value) {
  _has_bits_[0] |= 0x00000080u;
  rotate_vel_ = value;
}
inline void Vision_DetectionRobot::set_rotate_vel(float value) {
  _internal_set_rotate_vel(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.rotate_vel)
}

// optional float accelerate_x = 9;
inline bool Vision_DetectionRobot::_internal_has_accelerate_x() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_accelerate_x() const {
  return _internal_has_accelerate_x();
}
inline void Vision_DetectionRobot::clear_accelerate_x() {
  accelerate_x_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Vision_DetectionRobot::_internal_accelerate_x() const {
  return accelerate_x_;
}
inline float Vision_DetectionRobot::accelerate_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.accelerate_x)
  return _internal_accelerate_x();
}
inline void Vision_DetectionRobot::_internal_set_accelerate_x(float value) {
  _has_bits_[0] |= 0x00000100u;
  accelerate_x_ = value;
}
inline void Vision_DetectionRobot::set_accelerate_x(float value) {
  _internal_set_accelerate_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.accelerate_x)
}

// optional float accelerate_y = 10;
inline bool Vision_DetectionRobot::_internal_has_accelerate_y() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_accelerate_y() const {
  return _internal_has_accelerate_y();
}
inline void Vision_DetectionRobot::clear_accelerate_y() {
  accelerate_y_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Vision_DetectionRobot::_internal_accelerate_y() const {
  return accelerate_y_;
}
inline float Vision_DetectionRobot::accelerate_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.accelerate_y)
  return _internal_accelerate_y();
}
inline void Vision_DetectionRobot::_internal_set_accelerate_y(float value) {
  _has_bits_[0] |= 0x00000200u;
  accelerate_y_ = value;
}
inline void Vision_DetectionRobot::set_accelerate_y(float value) {
  _internal_set_accelerate_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.accelerate_y)
}

// required float raw_x = 11;
inline bool Vision_DetectionRobot::_internal_has_raw_x() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_raw_x() const {
  return _internal_has_raw_x();
}
inline void Vision_DetectionRobot::clear_raw_x() {
  raw_x_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Vision_DetectionRobot::_internal_raw_x() const {
  return raw_x_;
}
inline float Vision_DetectionRobot::raw_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_x)
  return _internal_raw_x();
}
inline void Vision_DetectionRobot::_internal_set_raw_x(float value) {
  _has_bits_[0] |= 0x00000400u;
  raw_x_ = value;
}
inline void Vision_DetectionRobot::set_raw_x(float value) {
  _internal_set_raw_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_x)
}

// required float raw_y = 12;
inline bool Vision_DetectionRobot::_internal_has_raw_y() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_raw_y() const {
  return _internal_has_raw_y();
}
inline void Vision_DetectionRobot::clear_raw_y() {
  raw_y_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float Vision_DetectionRobot::_internal_raw_y() const {
  return raw_y_;
}
inline float Vision_DetectionRobot::raw_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_y)
  return _internal_raw_y();
}
inline void Vision_DetectionRobot::_internal_set_raw_y(float value) {
  _has_bits_[0] |= 0x00000800u;
  raw_y_ = value;
}
inline void Vision_DetectionRobot::set_raw_y(float value) {
  _internal_set_raw_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_y)
}

// optional float raw_orientation = 13;
inline bool Vision_DetectionRobot::_internal_has_raw_orientation() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_raw_orientation() const {
  return _internal_has_raw_orientation();
}
inline void Vision_DetectionRobot::clear_raw_orientation() {
  raw_orientation_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Vision_DetectionRobot::_internal_raw_orientation() const {
  return raw_orientation_;
}
inline float Vision_DetectionRobot::raw_orientation() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_orientation)
  return _internal_raw_orientation();
}
inline void Vision_DetectionRobot::_internal_set_raw_orientation(float value) {
  _has_bits_[0] |= 0x00001000u;
  raw_orientation_ = value;
}
inline void Vision_DetectionRobot::set_raw_orientation(float value) {
  _internal_set_raw_orientation(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_orientation)
}

// optional float raw_vel_x = 14;
inline bool Vision_DetectionRobot::_internal_has_raw_vel_x() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_raw_vel_x() const {
  return _internal_has_raw_vel_x();
}
inline void Vision_DetectionRobot::clear_raw_vel_x() {
  raw_vel_x_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float Vision_DetectionRobot::_internal_raw_vel_x() const {
  return raw_vel_x_;
}
inline float Vision_DetectionRobot::raw_vel_x() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_vel_x)
  return _internal_raw_vel_x();
}
inline void Vision_DetectionRobot::_internal_set_raw_vel_x(float value) {
  _has_bits_[0] |= 0x00002000u;
  raw_vel_x_ = value;
}
inline void Vision_DetectionRobot::set_raw_vel_x(float value) {
  _internal_set_raw_vel_x(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_vel_x)
}

// optional float raw_vel_y = 15;
inline bool Vision_DetectionRobot::_internal_has_raw_vel_y() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_raw_vel_y() const {
  return _internal_has_raw_vel_y();
}
inline void Vision_DetectionRobot::clear_raw_vel_y() {
  raw_vel_y_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float Vision_DetectionRobot::_internal_raw_vel_y() const {
  return raw_vel_y_;
}
inline float Vision_DetectionRobot::raw_vel_y() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_vel_y)
  return _internal_raw_vel_y();
}
inline void Vision_DetectionRobot::_internal_set_raw_vel_y(float value) {
  _has_bits_[0] |= 0x00004000u;
  raw_vel_y_ = value;
}
inline void Vision_DetectionRobot::set_raw_vel_y(float value) {
  _internal_set_raw_vel_y(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_vel_y)
}

// optional float raw_rotate_vel = 16;
inline bool Vision_DetectionRobot::_internal_has_raw_rotate_vel() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_raw_rotate_vel() const {
  return _internal_has_raw_rotate_vel();
}
inline void Vision_DetectionRobot::clear_raw_rotate_vel() {
  raw_rotate_vel_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float Vision_DetectionRobot::_internal_raw_rotate_vel() const {
  return raw_rotate_vel_;
}
inline float Vision_DetectionRobot::raw_rotate_vel() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.raw_rotate_vel)
  return _internal_raw_rotate_vel();
}
inline void Vision_DetectionRobot::_internal_set_raw_rotate_vel(float value) {
  _has_bits_[0] |= 0x00008000u;
  raw_rotate_vel_ = value;
}
inline void Vision_DetectionRobot::set_raw_rotate_vel(float value) {
  _internal_set_raw_rotate_vel(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.raw_rotate_vel)
}

// optional float imu_dir = 17;
inline bool Vision_DetectionRobot::_internal_has_imu_dir() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_imu_dir() const {
  return _internal_has_imu_dir();
}
inline void Vision_DetectionRobot::clear_imu_dir() {
  imu_dir_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float Vision_DetectionRobot::_internal_imu_dir() const {
  return imu_dir_;
}
inline float Vision_DetectionRobot::imu_dir() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.imu_dir)
  return _internal_imu_dir();
}
inline void Vision_DetectionRobot::_internal_set_imu_dir(float value) {
  _has_bits_[0] |= 0x00010000u;
  imu_dir_ = value;
}
inline void Vision_DetectionRobot::set_imu_dir(float value) {
  _internal_set_imu_dir(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.imu_dir)
}

// optional float imu_rotate_vel = 18;
inline bool Vision_DetectionRobot::_internal_has_imu_rotate_vel() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Vision_DetectionRobot::has_imu_rotate_vel() const {
  return _internal_has_imu_rotate_vel();
}
inline void Vision_DetectionRobot::clear_imu_rotate_vel() {
  imu_rotate_vel_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float Vision_DetectionRobot::_internal_imu_rotate_vel() const {
  return imu_rotate_vel_;
}
inline float Vision_DetectionRobot::imu_rotate_vel() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionRobot.imu_rotate_vel)
  return _internal_imu_rotate_vel();
}
inline void Vision_DetectionRobot::_internal_set_imu_rotate_vel(float value) {
  _has_bits_[0] |= 0x00020000u;
  imu_rotate_vel_ = value;
}
inline void Vision_DetectionRobot::set_imu_rotate_vel(float value) {
  _internal_set_imu_rotate_vel(value);
  // @@protoc_insertion_point(field_set:Vision_DetectionRobot.imu_rotate_vel)
}

// -------------------------------------------------------------------

// Vision_DetectionFrame

// required .Vision_DetectionBall balls = 1;
inline bool Vision_DetectionFrame::_internal_has_balls() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || balls_ != nullptr);
  return value;
}
inline bool Vision_DetectionFrame::has_balls() const {
  return _internal_has_balls();
}
inline void Vision_DetectionFrame::clear_balls() {
  if (balls_ != nullptr) balls_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Vision_DetectionBall& Vision_DetectionFrame::_internal_balls() const {
  const ::Vision_DetectionBall* p = balls_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vision_DetectionBall*>(
      &::_Vision_DetectionBall_default_instance_);
}
inline const ::Vision_DetectionBall& Vision_DetectionFrame::balls() const {
  // @@protoc_insertion_point(field_get:Vision_DetectionFrame.balls)
  return _internal_balls();
}
inline ::Vision_DetectionBall* Vision_DetectionFrame::release_balls() {
  // @@protoc_insertion_point(field_release:Vision_DetectionFrame.balls)
  _has_bits_[0] &= ~0x00000001u;
  ::Vision_DetectionBall* temp = balls_;
  balls_ = nullptr;
  return temp;
}
inline ::Vision_DetectionBall* Vision_DetectionFrame::_internal_mutable_balls() {
  _has_bits_[0] |= 0x00000001u;
  if (balls_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vision_DetectionBall>(GetArenaNoVirtual());
    balls_ = p;
  }
  return balls_;
}
inline ::Vision_DetectionBall* Vision_DetectionFrame::mutable_balls() {
  // @@protoc_insertion_point(field_mutable:Vision_DetectionFrame.balls)
  return _internal_mutable_balls();
}
inline void Vision_DetectionFrame::set_allocated_balls(::Vision_DetectionBall* balls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete balls_;
  }
  if (balls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      balls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balls, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  balls_ = balls;
  // @@protoc_insertion_point(field_set_allocated:Vision_DetectionFrame.balls)
}

// repeated .Vision_DetectionRobot robots_yellow = 2;
inline int Vision_DetectionFrame::_internal_robots_yellow_size() const {
  return robots_yellow_.size();
}
inline int Vision_DetectionFrame::robots_yellow_size() const {
  return _internal_robots_yellow_size();
}
inline void Vision_DetectionFrame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline ::Vision_DetectionRobot* Vision_DetectionFrame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:Vision_DetectionFrame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot >*
Vision_DetectionFrame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:Vision_DetectionFrame.robots_yellow)
  return &robots_yellow_;
}
inline const ::Vision_DetectionRobot& Vision_DetectionFrame::_internal_robots_yellow(int index) const {
  return robots_yellow_.Get(index);
}
inline const ::Vision_DetectionRobot& Vision_DetectionFrame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:Vision_DetectionFrame.robots_yellow)
  return _internal_robots_yellow(index);
}
inline ::Vision_DetectionRobot* Vision_DetectionFrame::_internal_add_robots_yellow() {
  return robots_yellow_.Add();
}
inline ::Vision_DetectionRobot* Vision_DetectionFrame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:Vision_DetectionFrame.robots_yellow)
  return _internal_add_robots_yellow();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot >&
Vision_DetectionFrame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:Vision_DetectionFrame.robots_yellow)
  return robots_yellow_;
}

// repeated .Vision_DetectionRobot robots_blue = 3;
inline int Vision_DetectionFrame::_internal_robots_blue_size() const {
  return robots_blue_.size();
}
inline int Vision_DetectionFrame::robots_blue_size() const {
  return _internal_robots_blue_size();
}
inline void Vision_DetectionFrame::clear_robots_blue() {
  robots_blue_.Clear();
}
inline ::Vision_DetectionRobot* Vision_DetectionFrame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:Vision_DetectionFrame.robots_blue)
  return robots_blue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot >*
Vision_DetectionFrame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:Vision_DetectionFrame.robots_blue)
  return &robots_blue_;
}
inline const ::Vision_DetectionRobot& Vision_DetectionFrame::_internal_robots_blue(int index) const {
  return robots_blue_.Get(index);
}
inline const ::Vision_DetectionRobot& Vision_DetectionFrame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:Vision_DetectionFrame.robots_blue)
  return _internal_robots_blue(index);
}
inline ::Vision_DetectionRobot* Vision_DetectionFrame::_internal_add_robots_blue() {
  return robots_blue_.Add();
}
inline ::Vision_DetectionRobot* Vision_DetectionFrame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:Vision_DetectionFrame.robots_blue)
  return _internal_add_robots_blue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vision_DetectionRobot >&
Vision_DetectionFrame::robots_blue() const {
  // @@protoc_insertion_point(field_list:Vision_DetectionFrame.robots_blue)
  return robots_blue_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vision_5fdetection_2eproto
