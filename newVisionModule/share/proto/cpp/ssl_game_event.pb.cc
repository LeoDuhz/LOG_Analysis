// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_event.proto

#include "ssl_game_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Game_Event_Originator_ssl_5fgame_5fevent_2eproto;
class Game_Event_OriginatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Game_Event_Originator> _instance;
} _Game_Event_Originator_default_instance_;
class Game_EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Game_Event> _instance;
} _Game_Event_default_instance_;
static void InitDefaultsscc_info_Game_Event_ssl_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Game_Event_default_instance_;
    new (ptr) ::Game_Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Game_Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Game_Event_ssl_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Game_Event_ssl_5fgame_5fevent_2eproto}, {
      &scc_info_Game_Event_Originator_ssl_5fgame_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Game_Event_Originator_ssl_5fgame_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Game_Event_Originator_default_instance_;
    new (ptr) ::Game_Event_Originator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Game_Event_Originator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Game_Event_Originator_ssl_5fgame_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Game_Event_Originator_ssl_5fgame_5fevent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgame_5fevent_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fgame_5fevent_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgame_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgame_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Game_Event_Originator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Game_Event_Originator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Game_Event_Originator, team_),
  PROTOBUF_FIELD_OFFSET(::Game_Event_Originator, botid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Game_Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Game_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Game_Event, gameeventtype_),
  PROTOBUF_FIELD_OFFSET(::Game_Event, originator_),
  PROTOBUF_FIELD_OFFSET(::Game_Event, message_),
  2,
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Game_Event_Originator)},
  { 9, 17, sizeof(::Game_Event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Game_Event_Originator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Game_Event_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgame_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ssl_game_event.proto\"\356\005\n\nGame_Event\0220\n"
  "\rgameEventType\030\001 \002(\0162\031.Game_Event.GameEv"
  "entType\022*\n\noriginator\030\002 \001(\0132\026.Game_Event"
  ".Originator\022\017\n\007message\030\003 \001(\t\032;\n\nOriginat"
  "or\022\036\n\004team\030\001 \002(\0162\020.Game_Event.Team\022\r\n\005bo"
  "tId\030\002 \001(\r\"\371\003\n\rGameEventType\022\013\n\007UNKNOWN\020\000"
  "\022\n\n\006CUSTOM\020\001\022\025\n\021NUMBER_OF_PLAYERS\020\002\022\023\n\017B"
  "ALL_LEFT_FIELD\020\003\022\010\n\004GOAL\020\004\022\020\n\014KICK_TIMEO"
  "UT\020\005\022\027\n\023NO_PROGRESS_IN_GAME\020\006\022\021\n\rBOT_COL"
  "LISION\020\007\022\025\n\021MULTIPLE_DEFENDER\020\010\022\037\n\033MULTI"
  "PLE_DEFENDER_PARTIALLY\020\t\022\034\n\030ATTACKER_IN_"
  "DEFENSE_AREA\020\n\022\t\n\005ICING\020\013\022\016\n\nBALL_SPEED\020"
  "\014\022\024\n\020ROBOT_STOP_SPEED\020\r\022\022\n\016BALL_DRIBBLIN"
  "G\020\016\022\031\n\025ATTACKER_TOUCH_KEEPER\020\017\022\020\n\014DOUBLE"
  "_TOUCH\020\020\022\034\n\030ATTACKER_TO_DEFENCE_AREA\020\021\022#"
  "\n\037DEFENDER_TO_KICK_POINT_DISTANCE\020\022\022\020\n\014B"
  "ALL_HOLDING\020\023\022\021\n\rINDIRECT_GOAL\020\024\022\031\n\025BALL"
  "_PLACEMENT_FAILED\020\025\022\020\n\014CHIP_ON_GOAL\020\026\"8\n"
  "\004Team\022\020\n\014TEAM_UNKNOWN\020\000\022\017\n\013TEAM_YELLOW\020\001"
  "\022\r\n\tTEAM_BLUE\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgame_5fevent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgame_5fevent_2eproto_sccs[2] = {
  &scc_info_Game_Event_ssl_5fgame_5fevent_2eproto.base,
  &scc_info_Game_Event_Originator_ssl_5fgame_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgame_5fevent_2eproto_once;
static bool descriptor_table_ssl_5fgame_5fevent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fevent_2eproto = {
  &descriptor_table_ssl_5fgame_5fevent_2eproto_initialized, descriptor_table_protodef_ssl_5fgame_5fevent_2eproto, "ssl_game_event.proto", 775,
  &descriptor_table_ssl_5fgame_5fevent_2eproto_once, descriptor_table_ssl_5fgame_5fevent_2eproto_sccs, descriptor_table_ssl_5fgame_5fevent_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ssl_5fgame_5fevent_2eproto::offsets,
  file_level_metadata_ssl_5fgame_5fevent_2eproto, 2, file_level_enum_descriptors_ssl_5fgame_5fevent_2eproto, file_level_service_descriptors_ssl_5fgame_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgame_5fevent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgame_5fevent_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Game_Event_GameEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgame_5fevent_2eproto);
  return file_level_enum_descriptors_ssl_5fgame_5fevent_2eproto[0];
}
bool Game_Event_GameEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Game_Event_GameEventType Game_Event::UNKNOWN;
constexpr Game_Event_GameEventType Game_Event::CUSTOM;
constexpr Game_Event_GameEventType Game_Event::NUMBER_OF_PLAYERS;
constexpr Game_Event_GameEventType Game_Event::BALL_LEFT_FIELD;
constexpr Game_Event_GameEventType Game_Event::GOAL;
constexpr Game_Event_GameEventType Game_Event::KICK_TIMEOUT;
constexpr Game_Event_GameEventType Game_Event::NO_PROGRESS_IN_GAME;
constexpr Game_Event_GameEventType Game_Event::BOT_COLLISION;
constexpr Game_Event_GameEventType Game_Event::MULTIPLE_DEFENDER;
constexpr Game_Event_GameEventType Game_Event::MULTIPLE_DEFENDER_PARTIALLY;
constexpr Game_Event_GameEventType Game_Event::ATTACKER_IN_DEFENSE_AREA;
constexpr Game_Event_GameEventType Game_Event::ICING;
constexpr Game_Event_GameEventType Game_Event::BALL_SPEED;
constexpr Game_Event_GameEventType Game_Event::ROBOT_STOP_SPEED;
constexpr Game_Event_GameEventType Game_Event::BALL_DRIBBLING;
constexpr Game_Event_GameEventType Game_Event::ATTACKER_TOUCH_KEEPER;
constexpr Game_Event_GameEventType Game_Event::DOUBLE_TOUCH;
constexpr Game_Event_GameEventType Game_Event::ATTACKER_TO_DEFENCE_AREA;
constexpr Game_Event_GameEventType Game_Event::DEFENDER_TO_KICK_POINT_DISTANCE;
constexpr Game_Event_GameEventType Game_Event::BALL_HOLDING;
constexpr Game_Event_GameEventType Game_Event::INDIRECT_GOAL;
constexpr Game_Event_GameEventType Game_Event::BALL_PLACEMENT_FAILED;
constexpr Game_Event_GameEventType Game_Event::CHIP_ON_GOAL;
constexpr Game_Event_GameEventType Game_Event::GameEventType_MIN;
constexpr Game_Event_GameEventType Game_Event::GameEventType_MAX;
constexpr int Game_Event::GameEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Game_Event_Team_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgame_5fevent_2eproto);
  return file_level_enum_descriptors_ssl_5fgame_5fevent_2eproto[1];
}
bool Game_Event_Team_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Game_Event_Team Game_Event::TEAM_UNKNOWN;
constexpr Game_Event_Team Game_Event::TEAM_YELLOW;
constexpr Game_Event_Team Game_Event::TEAM_BLUE;
constexpr Game_Event_Team Game_Event::Team_MIN;
constexpr Game_Event_Team Game_Event::Team_MAX;
constexpr int Game_Event::Team_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Game_Event_Originator::InitAsDefaultInstance() {
}
class Game_Event_Originator::_Internal {
 public:
  using HasBits = decltype(std::declval<Game_Event_Originator>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_botid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Game_Event_Originator::Game_Event_Originator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Game_Event.Originator)
}
Game_Event_Originator::Game_Event_Originator(const Game_Event_Originator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&botid_) -
    reinterpret_cast<char*>(&team_)) + sizeof(botid_));
  // @@protoc_insertion_point(copy_constructor:Game_Event.Originator)
}

void Game_Event_Originator::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&botid_) -
      reinterpret_cast<char*>(&team_)) + sizeof(botid_));
}

Game_Event_Originator::~Game_Event_Originator() {
  // @@protoc_insertion_point(destructor:Game_Event.Originator)
  SharedDtor();
}

void Game_Event_Originator::SharedDtor() {
}

void Game_Event_Originator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Game_Event_Originator& Game_Event_Originator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Game_Event_Originator_ssl_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Game_Event_Originator::Clear() {
// @@protoc_insertion_point(message_clear_start:Game_Event.Originator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&botid_) -
        reinterpret_cast<char*>(&team_)) + sizeof(botid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Game_Event_Originator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Game_Event.Team team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Game_Event_Team_IsValid(val))) {
            _internal_set_team(static_cast<::Game_Event_Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 botId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_botid(&has_bits);
          botid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Game_Event_Originator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Game_Event.Originator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Game_Event.Team team = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team(), target);
  }

  // optional uint32 botId = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_botid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Game_Event.Originator)
  return target;
}

size_t Game_Event_Originator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Game_Event.Originator)
  size_t total_size = 0;

  // required .Game_Event.Team team = 1;
  if (has_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 botId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_botid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Game_Event_Originator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Game_Event.Originator)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_Event_Originator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Game_Event_Originator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Game_Event.Originator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Game_Event.Originator)
    MergeFrom(*source);
  }
}

void Game_Event_Originator::MergeFrom(const Game_Event_Originator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Game_Event.Originator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      botid_ = from.botid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Game_Event_Originator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Game_Event.Originator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_Event_Originator::CopyFrom(const Game_Event_Originator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Game_Event.Originator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_Event_Originator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Game_Event_Originator::InternalSwap(Game_Event_Originator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
  swap(botid_, other->botid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Game_Event_Originator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Game_Event::InitAsDefaultInstance() {
  ::_Game_Event_default_instance_._instance.get_mutable()->originator_ = const_cast< ::Game_Event_Originator*>(
      ::Game_Event_Originator::internal_default_instance());
}
class Game_Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Game_Event>()._has_bits_);
  static void set_has_gameeventtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Game_Event_Originator& originator(const Game_Event* msg);
  static void set_has_originator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Game_Event_Originator&
Game_Event::_Internal::originator(const Game_Event* msg) {
  return *msg->originator_;
}
Game_Event::Game_Event()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Game_Event)
}
Game_Event::Game_Event(const Game_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from._internal_has_originator()) {
    originator_ = new ::Game_Event_Originator(*from.originator_);
  } else {
    originator_ = nullptr;
  }
  gameeventtype_ = from.gameeventtype_;
  // @@protoc_insertion_point(copy_constructor:Game_Event)
}

void Game_Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Game_Event_ssl_5fgame_5fevent_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&originator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameeventtype_) -
      reinterpret_cast<char*>(&originator_)) + sizeof(gameeventtype_));
}

Game_Event::~Game_Event() {
  // @@protoc_insertion_point(destructor:Game_Event)
  SharedDtor();
}

void Game_Event::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete originator_;
}

void Game_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Game_Event& Game_Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Game_Event_ssl_5fgame_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Game_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:Game_Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(originator_ != nullptr);
      originator_->Clear();
    }
  }
  gameeventtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Game_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Game_Event.GameEventType gameEventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Game_Event_GameEventType_IsValid(val))) {
            _internal_set_gameeventtype(static_cast<::Game_Event_GameEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Game_Event.Originator originator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_originator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_message(), ptr, ctx, "Game_Event.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Game_Event::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Game_Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Game_Event.GameEventType gameEventType = 1;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gameeventtype(), target);
  }

  // optional .Game_Event.Originator originator = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::originator(this), target, stream);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Game_Event.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Game_Event)
  return target;
}

size_t Game_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Game_Event)
  size_t total_size = 0;

  // required .Game_Event.GameEventType gameEventType = 1;
  if (has_gameeventtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gameeventtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .Game_Event.Originator originator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *originator_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Game_Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Game_Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Game_Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Game_Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Game_Event)
    MergeFrom(*source);
  }
}

void Game_Event::MergeFrom(const Game_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Game_Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_originator()->::Game_Event_Originator::MergeFrom(from._internal_originator());
    }
    if (cached_has_bits & 0x00000004u) {
      gameeventtype_ = from.gameeventtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Game_Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Game_Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_Event::CopyFrom(const Game_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Game_Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_originator()) {
    if (!this->originator_->IsInitialized()) return false;
  }
  return true;
}

void Game_Event::InternalSwap(Game_Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(originator_, other->originator_);
  swap(gameeventtype_, other->gameeventtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Game_Event::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Game_Event_Originator* Arena::CreateMaybeMessage< ::Game_Event_Originator >(Arena* arena) {
  return Arena::CreateInternal< ::Game_Event_Originator >(arena);
}
template<> PROTOBUF_NOINLINE ::Game_Event* Arena::CreateMaybeMessage< ::Game_Event >(Arena* arena) {
  return Arena::CreateInternal< ::Game_Event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
