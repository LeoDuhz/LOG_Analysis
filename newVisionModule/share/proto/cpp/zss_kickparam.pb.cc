// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_kickparam.proto

#include "zss_kickparam.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_zss_5fkickparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chip_Param_zss_5fkickparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fkickparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Flat_Param_zss_5fkickparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fkickparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Robot_zss_5fkickparam_2eproto;
namespace ZSS {
namespace Protocol {
class Robot_ParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot_Param> _instance;
} _Robot_Param_default_instance_;
class Flat_ParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Flat_Param> _instance;
} _Flat_Param_default_instance_;
class Chip_ParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chip_Param> _instance;
} _Chip_Param_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot> _instance;
} _Robot_default_instance_;
}  // namespace Protocol
}  // namespace ZSS
static void InitDefaultsscc_info_Chip_Param_zss_5fkickparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_Chip_Param_default_instance_;
    new (ptr) ::ZSS::Protocol::Chip_Param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::Chip_Param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chip_Param_zss_5fkickparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Chip_Param_zss_5fkickparam_2eproto}, {}};

static void InitDefaultsscc_info_Flat_Param_zss_5fkickparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_Flat_Param_default_instance_;
    new (ptr) ::ZSS::Protocol::Flat_Param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::Flat_Param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Flat_Param_zss_5fkickparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Flat_Param_zss_5fkickparam_2eproto}, {}};

static void InitDefaultsscc_info_Robot_zss_5fkickparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_Robot_default_instance_;
    new (ptr) ::ZSS::Protocol::Robot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::Robot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Robot_zss_5fkickparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Robot_zss_5fkickparam_2eproto}, {}};

static void InitDefaultsscc_info_Robot_Param_zss_5fkickparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_Robot_Param_default_instance_;
    new (ptr) ::ZSS::Protocol::Robot_Param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::Robot_Param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Robot_Param_zss_5fkickparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Robot_Param_zss_5fkickparam_2eproto}, {
      &scc_info_Robot_zss_5fkickparam_2eproto.base,
      &scc_info_Chip_Param_zss_5fkickparam_2eproto.base,
      &scc_info_Flat_Param_zss_5fkickparam_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zss_5fkickparam_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zss_5fkickparam_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zss_5fkickparam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zss_5fkickparam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Param, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Param, robot_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Param, chipparam_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot_Param, flatparam_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Flat_Param, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Flat_Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Flat_Param, fa_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Flat_Param, fb_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Flat_Param, fc_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Flat_Param, fmax_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Flat_Param, fmin_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Chip_Param, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Chip_Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Chip_Param, ca_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Chip_Param, cb_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Chip_Param, cc_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Chip_Param, cmax_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Chip_Param, cmin_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot, team_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot, id_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ZSS::Protocol::Robot_Param)},
  { 11, 21, sizeof(::ZSS::Protocol::Flat_Param)},
  { 26, 36, sizeof(::ZSS::Protocol::Chip_Param)},
  { 41, 48, sizeof(::ZSS::Protocol::Robot)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Robot_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Flat_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Chip_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Robot_default_instance_),
};

const char descriptor_table_protodef_zss_5fkickparam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023zss_kickparam.proto\022\014ZSS.Protocol\"\213\001\n\013"
  "Robot_Param\022\"\n\005robot\030\001 \002(\0132\023.ZSS.Protoco"
  "l.Robot\022+\n\tchipparam\030\002 \002(\0132\030.ZSS.Protoco"
  "l.Chip_Param\022+\n\tflatparam\030\003 \002(\0132\030.ZSS.Pr"
  "otocol.Flat_Param\"L\n\nFlat_Param\022\n\n\002fa\030\001 "
  "\002(\001\022\n\n\002fb\030\002 \002(\001\022\n\n\002fc\030\003 \002(\001\022\014\n\004fmax\030\004 \002("
  "\001\022\014\n\004fmin\030\005 \002(\001\"L\n\nChip_Param\022\n\n\002ca\030\001 \002("
  "\001\022\n\n\002cb\030\002 \002(\001\022\n\n\002cc\030\003 \002(\001\022\014\n\004cmax\030\004 \002(\001\022"
  "\014\n\004cmin\030\005 \002(\001\"!\n\005Robot\022\014\n\004team\030\001 \002(\005\022\n\n\002"
  "id\030\002 \002(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zss_5fkickparam_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zss_5fkickparam_2eproto_sccs[4] = {
  &scc_info_Chip_Param_zss_5fkickparam_2eproto.base,
  &scc_info_Flat_Param_zss_5fkickparam_2eproto.base,
  &scc_info_Robot_zss_5fkickparam_2eproto.base,
  &scc_info_Robot_Param_zss_5fkickparam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zss_5fkickparam_2eproto_once;
static bool descriptor_table_zss_5fkickparam_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5fkickparam_2eproto = {
  &descriptor_table_zss_5fkickparam_2eproto_initialized, descriptor_table_protodef_zss_5fkickparam_2eproto, "zss_kickparam.proto", 368,
  &descriptor_table_zss_5fkickparam_2eproto_once, descriptor_table_zss_5fkickparam_2eproto_sccs, descriptor_table_zss_5fkickparam_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_zss_5fkickparam_2eproto::offsets,
  file_level_metadata_zss_5fkickparam_2eproto, 4, file_level_enum_descriptors_zss_5fkickparam_2eproto, file_level_service_descriptors_zss_5fkickparam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zss_5fkickparam_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zss_5fkickparam_2eproto), true);
namespace ZSS {
namespace Protocol {

// ===================================================================

void Robot_Param::InitAsDefaultInstance() {
  ::ZSS::Protocol::_Robot_Param_default_instance_._instance.get_mutable()->robot_ = const_cast< ::ZSS::Protocol::Robot*>(
      ::ZSS::Protocol::Robot::internal_default_instance());
  ::ZSS::Protocol::_Robot_Param_default_instance_._instance.get_mutable()->chipparam_ = const_cast< ::ZSS::Protocol::Chip_Param*>(
      ::ZSS::Protocol::Chip_Param::internal_default_instance());
  ::ZSS::Protocol::_Robot_Param_default_instance_._instance.get_mutable()->flatparam_ = const_cast< ::ZSS::Protocol::Flat_Param*>(
      ::ZSS::Protocol::Flat_Param::internal_default_instance());
}
class Robot_Param::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot_Param>()._has_bits_);
  static const ::ZSS::Protocol::Robot& robot(const Robot_Param* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ZSS::Protocol::Chip_Param& chipparam(const Robot_Param* msg);
  static void set_has_chipparam(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ZSS::Protocol::Flat_Param& flatparam(const Robot_Param* msg);
  static void set_has_flatparam(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ZSS::Protocol::Robot&
Robot_Param::_Internal::robot(const Robot_Param* msg) {
  return *msg->robot_;
}
const ::ZSS::Protocol::Chip_Param&
Robot_Param::_Internal::chipparam(const Robot_Param* msg) {
  return *msg->chipparam_;
}
const ::ZSS::Protocol::Flat_Param&
Robot_Param::_Internal::flatparam(const Robot_Param* msg) {
  return *msg->flatparam_;
}
Robot_Param::Robot_Param()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robot_Param)
}
Robot_Param::Robot_Param(const Robot_Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_robot()) {
    robot_ = new ::ZSS::Protocol::Robot(*from.robot_);
  } else {
    robot_ = nullptr;
  }
  if (from._internal_has_chipparam()) {
    chipparam_ = new ::ZSS::Protocol::Chip_Param(*from.chipparam_);
  } else {
    chipparam_ = nullptr;
  }
  if (from._internal_has_flatparam()) {
    flatparam_ = new ::ZSS::Protocol::Flat_Param(*from.flatparam_);
  } else {
    flatparam_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot_Param)
}

void Robot_Param::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Robot_Param_zss_5fkickparam_2eproto.base);
  ::memset(&robot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flatparam_) -
      reinterpret_cast<char*>(&robot_)) + sizeof(flatparam_));
}

Robot_Param::~Robot_Param() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot_Param)
  SharedDtor();
}

void Robot_Param::SharedDtor() {
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete chipparam_;
  if (this != internal_default_instance()) delete flatparam_;
}

void Robot_Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot_Param& Robot_Param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_Param_zss_5fkickparam_2eproto.base);
  return *internal_default_instance();
}


void Robot_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robot_Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_ != nullptr);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chipparam_ != nullptr);
      chipparam_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(flatparam_ != nullptr);
      flatparam_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Robot_Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ZSS.Protocol.Robot robot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ZSS.Protocol.Chip_Param chipparam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chipparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ZSS.Protocol.Flat_Param flatparam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot_Param::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot_Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ZSS.Protocol.Robot robot = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::robot(this), target, stream);
  }

  // required .ZSS.Protocol.Chip_Param chipparam = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::chipparam(this), target, stream);
  }

  // required .ZSS.Protocol.Flat_Param flatparam = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::flatparam(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot_Param)
  return target;
}

size_t Robot_Param::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Robot_Param)
  size_t total_size = 0;

  if (has_robot()) {
    // required .ZSS.Protocol.Robot robot = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_);
  }

  if (has_chipparam()) {
    // required .ZSS.Protocol.Chip_Param chipparam = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chipparam_);
  }

  if (has_flatparam()) {
    // required .ZSS.Protocol.Flat_Param flatparam = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flatparam_);
  }

  return total_size;
}
size_t Robot_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robot_Param)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ZSS.Protocol.Robot robot = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_);

    // required .ZSS.Protocol.Chip_Param chipparam = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chipparam_);

    // required .ZSS.Protocol.Flat_Param flatparam = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flatparam_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot_Param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robot_Param)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot_Param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot_Param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robot_Param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robot_Param)
    MergeFrom(*source);
  }
}

void Robot_Param::MergeFrom(const Robot_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robot_Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_robot()->::ZSS::Protocol::Robot::MergeFrom(from._internal_robot());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chipparam()->::ZSS::Protocol::Chip_Param::MergeFrom(from._internal_chipparam());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_flatparam()->::ZSS::Protocol::Flat_Param::MergeFrom(from._internal_flatparam());
    }
  }
}

void Robot_Param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robot_Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Param::CopyFrom(const Robot_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robot_Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Param::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_robot()) {
    if (!this->robot_->IsInitialized()) return false;
  }
  if (has_chipparam()) {
    if (!this->chipparam_->IsInitialized()) return false;
  }
  if (has_flatparam()) {
    if (!this->flatparam_->IsInitialized()) return false;
  }
  return true;
}

void Robot_Param::InternalSwap(Robot_Param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(robot_, other->robot_);
  swap(chipparam_, other->chipparam_);
  swap(flatparam_, other->flatparam_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Flat_Param::InitAsDefaultInstance() {
}
class Flat_Param::_Internal {
 public:
  using HasBits = decltype(std::declval<Flat_Param>()._has_bits_);
  static void set_has_fa(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fmax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fmin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Flat_Param::Flat_Param()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Flat_Param)
}
Flat_Param::Flat_Param(const Flat_Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fa_, &from.fa_,
    static_cast<size_t>(reinterpret_cast<char*>(&fmin_) -
    reinterpret_cast<char*>(&fa_)) + sizeof(fmin_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Flat_Param)
}

void Flat_Param::SharedCtor() {
  ::memset(&fa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fmin_) -
      reinterpret_cast<char*>(&fa_)) + sizeof(fmin_));
}

Flat_Param::~Flat_Param() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Flat_Param)
  SharedDtor();
}

void Flat_Param::SharedDtor() {
}

void Flat_Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Flat_Param& Flat_Param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Flat_Param_zss_5fkickparam_2eproto.base);
  return *internal_default_instance();
}


void Flat_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Flat_Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&fa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fmin_) -
        reinterpret_cast<char*>(&fa_)) + sizeof(fmin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Flat_Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double fa = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_fa(&has_bits);
          fa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double fb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_fb(&has_bits);
          fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double fc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_fc(&has_bits);
          fc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double fmax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_fmax(&has_bits);
          fmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double fmin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_fmin(&has_bits);
          fmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Flat_Param::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Flat_Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double fa = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_fa(), target);
  }

  // required double fb = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fb(), target);
  }

  // required double fc = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fc(), target);
  }

  // required double fmax = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fmax(), target);
  }

  // required double fmin = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_fmin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Flat_Param)
  return target;
}

size_t Flat_Param::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Flat_Param)
  size_t total_size = 0;

  if (has_fa()) {
    // required double fa = 1;
    total_size += 1 + 8;
  }

  if (has_fb()) {
    // required double fb = 2;
    total_size += 1 + 8;
  }

  if (has_fc()) {
    // required double fc = 3;
    total_size += 1 + 8;
  }

  if (has_fmax()) {
    // required double fmax = 4;
    total_size += 1 + 8;
  }

  if (has_fmin()) {
    // required double fmin = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Flat_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Flat_Param)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double fa = 1;
    total_size += 1 + 8;

    // required double fb = 2;
    total_size += 1 + 8;

    // required double fc = 3;
    total_size += 1 + 8;

    // required double fmax = 4;
    total_size += 1 + 8;

    // required double fmin = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Flat_Param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Flat_Param)
  GOOGLE_DCHECK_NE(&from, this);
  const Flat_Param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Flat_Param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Flat_Param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Flat_Param)
    MergeFrom(*source);
  }
}

void Flat_Param::MergeFrom(const Flat_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Flat_Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      fa_ = from.fa_;
    }
    if (cached_has_bits & 0x00000002u) {
      fb_ = from.fb_;
    }
    if (cached_has_bits & 0x00000004u) {
      fc_ = from.fc_;
    }
    if (cached_has_bits & 0x00000008u) {
      fmax_ = from.fmax_;
    }
    if (cached_has_bits & 0x00000010u) {
      fmin_ = from.fmin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Flat_Param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Flat_Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flat_Param::CopyFrom(const Flat_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Flat_Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flat_Param::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Flat_Param::InternalSwap(Flat_Param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fa_, other->fa_);
  swap(fb_, other->fb_);
  swap(fc_, other->fc_);
  swap(fmax_, other->fmax_);
  swap(fmin_, other->fmin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Flat_Param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Chip_Param::InitAsDefaultInstance() {
}
class Chip_Param::_Internal {
 public:
  using HasBits = decltype(std::declval<Chip_Param>()._has_bits_);
  static void set_has_ca(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cmax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cmin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Chip_Param::Chip_Param()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Chip_Param)
}
Chip_Param::Chip_Param(const Chip_Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ca_, &from.ca_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmin_) -
    reinterpret_cast<char*>(&ca_)) + sizeof(cmin_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Chip_Param)
}

void Chip_Param::SharedCtor() {
  ::memset(&ca_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmin_) -
      reinterpret_cast<char*>(&ca_)) + sizeof(cmin_));
}

Chip_Param::~Chip_Param() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Chip_Param)
  SharedDtor();
}

void Chip_Param::SharedDtor() {
}

void Chip_Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chip_Param& Chip_Param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chip_Param_zss_5fkickparam_2eproto.base);
  return *internal_default_instance();
}


void Chip_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Chip_Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ca_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmin_) -
        reinterpret_cast<char*>(&ca_)) + sizeof(cmin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Chip_Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double ca = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ca(&has_bits);
          ca_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double cb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cb(&has_bits);
          cb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double cc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_cc(&has_bits);
          cc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double cmax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_cmax(&has_bits);
          cmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double cmin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_cmin(&has_bits);
          cmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chip_Param::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Chip_Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double ca = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ca(), target);
  }

  // required double cb = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cb(), target);
  }

  // required double cc = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cc(), target);
  }

  // required double cmax = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cmax(), target);
  }

  // required double cmin = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cmin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Chip_Param)
  return target;
}

size_t Chip_Param::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Chip_Param)
  size_t total_size = 0;

  if (has_ca()) {
    // required double ca = 1;
    total_size += 1 + 8;
  }

  if (has_cb()) {
    // required double cb = 2;
    total_size += 1 + 8;
  }

  if (has_cc()) {
    // required double cc = 3;
    total_size += 1 + 8;
  }

  if (has_cmax()) {
    // required double cmax = 4;
    total_size += 1 + 8;
  }

  if (has_cmin()) {
    // required double cmin = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Chip_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Chip_Param)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double ca = 1;
    total_size += 1 + 8;

    // required double cb = 2;
    total_size += 1 + 8;

    // required double cc = 3;
    total_size += 1 + 8;

    // required double cmax = 4;
    total_size += 1 + 8;

    // required double cmin = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chip_Param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Chip_Param)
  GOOGLE_DCHECK_NE(&from, this);
  const Chip_Param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chip_Param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Chip_Param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Chip_Param)
    MergeFrom(*source);
  }
}

void Chip_Param::MergeFrom(const Chip_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Chip_Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ca_ = from.ca_;
    }
    if (cached_has_bits & 0x00000002u) {
      cb_ = from.cb_;
    }
    if (cached_has_bits & 0x00000004u) {
      cc_ = from.cc_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmax_ = from.cmax_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmin_ = from.cmin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chip_Param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Chip_Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chip_Param::CopyFrom(const Chip_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Chip_Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chip_Param::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Chip_Param::InternalSwap(Chip_Param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ca_, other->ca_);
  swap(cb_, other->cb_);
  swap(cc_, other->cc_);
  swap(cmax_, other->cmax_);
  swap(cmin_, other->cmin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chip_Param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Robot::InitAsDefaultInstance() {
}
class Robot::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Robot::Robot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robot)
}
Robot::Robot(const Robot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&team_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot)
}

void Robot::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&team_)) + sizeof(id_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
}

void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot& Robot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_zss_5fkickparam_2eproto.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&team_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Robot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team(), target);
  }

  // required int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot)
  return target;
}

size_t Robot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Robot)
  size_t total_size = 0;

  if (has_team()) {
    // required int32 team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team());
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team());

    // required int32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Robot::InternalSwap(Robot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_, other->team_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Robot_Param* Arena::CreateMaybeMessage< ::ZSS::Protocol::Robot_Param >(Arena* arena) {
  return Arena::CreateInternal< ::ZSS::Protocol::Robot_Param >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Flat_Param* Arena::CreateMaybeMessage< ::ZSS::Protocol::Flat_Param >(Arena* arena) {
  return Arena::CreateInternal< ::ZSS::Protocol::Flat_Param >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Chip_Param* Arena::CreateMaybeMessage< ::ZSS::Protocol::Chip_Param >(Arena* arena) {
  return Arena::CreateInternal< ::ZSS::Protocol::Chip_Param >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Robot* Arena::CreateMaybeMessage< ::ZSS::Protocol::Robot >(Arena* arena) {
  return Arena::CreateInternal< ::ZSS::Protocol::Robot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
