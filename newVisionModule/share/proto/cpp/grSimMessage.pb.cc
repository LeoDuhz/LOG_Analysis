// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grSimMessage.proto

#include "grSimMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace grSimMessage {
class grSimInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<grSimInfo> _instance;
} _grSimInfo_default_instance_;
}  // namespace grSimMessage
static void InitDefaultsscc_info_grSimInfo_grSimMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grSimMessage::_grSimInfo_default_instance_;
    new (ptr) ::grSimMessage::grSimInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grSimMessage::grSimInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_grSimInfo_grSimMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_grSimInfo_grSimMessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grSimMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grSimMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grSimMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grSimMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::grSimMessage::grSimInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grSimMessage::grSimInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grSimMessage::grSimInfo, id_),
  PROTOBUF_FIELD_OFFSET(::grSimMessage::grSimInfo, isinfrared_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::grSimMessage::grSimInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grSimMessage::_grSimInfo_default_instance_),
};

const char descriptor_table_protodef_grSimMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022grSimMessage.proto\022\014grSimMessage\"+\n\tgr"
  "SimInfo\022\n\n\002id\030\001 \002(\r\022\022\n\nisInfrared\030\002 \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grSimMessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_grSimMessage_2eproto_sccs[1] = {
  &scc_info_grSimInfo_grSimMessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grSimMessage_2eproto_once;
static bool descriptor_table_grSimMessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grSimMessage_2eproto = {
  &descriptor_table_grSimMessage_2eproto_initialized, descriptor_table_protodef_grSimMessage_2eproto, "grSimMessage.proto", 79,
  &descriptor_table_grSimMessage_2eproto_once, descriptor_table_grSimMessage_2eproto_sccs, descriptor_table_grSimMessage_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_grSimMessage_2eproto::offsets,
  file_level_metadata_grSimMessage_2eproto, 1, file_level_enum_descriptors_grSimMessage_2eproto, file_level_service_descriptors_grSimMessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_grSimMessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_grSimMessage_2eproto), true);
namespace grSimMessage {

// ===================================================================

void grSimInfo::InitAsDefaultInstance() {
}
class grSimInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<grSimInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isinfrared(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

grSimInfo::grSimInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grSimMessage.grSimInfo)
}
grSimInfo::grSimInfo(const grSimInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isinfrared_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isinfrared_));
  // @@protoc_insertion_point(copy_constructor:grSimMessage.grSimInfo)
}

void grSimInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isinfrared_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isinfrared_));
}

grSimInfo::~grSimInfo() {
  // @@protoc_insertion_point(destructor:grSimMessage.grSimInfo)
  SharedDtor();
}

void grSimInfo::SharedDtor() {
}

void grSimInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const grSimInfo& grSimInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_grSimInfo_grSimMessage_2eproto.base);
  return *internal_default_instance();
}


void grSimInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:grSimMessage.grSimInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isinfrared_) -
        reinterpret_cast<char*>(&id_)) + sizeof(isinfrared_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* grSimInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isInfrared = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isinfrared(&has_bits);
          isinfrared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* grSimInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grSimMessage.grSimInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bool isInfrared = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isinfrared(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grSimMessage.grSimInfo)
  return target;
}

size_t grSimInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grSimMessage.grSimInfo)
  size_t total_size = 0;

  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isInfrared = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void grSimInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grSimMessage.grSimInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const grSimInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<grSimInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grSimMessage.grSimInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grSimMessage.grSimInfo)
    MergeFrom(*source);
  }
}

void grSimInfo::MergeFrom(const grSimInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grSimMessage.grSimInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      isinfrared_ = from.isinfrared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void grSimInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grSimMessage.grSimInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grSimInfo::CopyFrom(const grSimInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grSimMessage.grSimInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grSimInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void grSimInfo::InternalSwap(grSimInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(isinfrared_, other->isinfrared_);
}

::PROTOBUF_NAMESPACE_ID::Metadata grSimInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grSimMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grSimMessage::grSimInfo* Arena::CreateMaybeMessage< ::grSimMessage::grSimInfo >(Arena* arena) {
  return Arena::CreateInternal< ::grSimMessage::grSimInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
