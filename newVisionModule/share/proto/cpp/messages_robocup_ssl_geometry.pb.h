// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto;
class SSL_FieldCicularArc;
class SSL_FieldCicularArcDefaultTypeInternal;
extern SSL_FieldCicularArcDefaultTypeInternal _SSL_FieldCicularArc_default_instance_;
class SSL_FieldLineSegment;
class SSL_FieldLineSegmentDefaultTypeInternal;
extern SSL_FieldLineSegmentDefaultTypeInternal _SSL_FieldLineSegment_default_instance_;
class SSL_GeometryCameraCalibration;
class SSL_GeometryCameraCalibrationDefaultTypeInternal;
extern SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;
class SSL_GeometryData;
class SSL_GeometryDataDefaultTypeInternal;
extern SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;
class SSL_GeometryFieldSize;
class SSL_GeometryFieldSizeDefaultTypeInternal;
extern SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;
class Vector2f;
class Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSL_FieldCicularArc* Arena::CreateMaybeMessage<::SSL_FieldCicularArc>(Arena*);
template<> ::SSL_FieldLineSegment* Arena::CreateMaybeMessage<::SSL_FieldLineSegment>(Arena*);
template<> ::SSL_GeometryCameraCalibration* Arena::CreateMaybeMessage<::SSL_GeometryCameraCalibration>(Arena*);
template<> ::SSL_GeometryData* Arena::CreateMaybeMessage<::SSL_GeometryData>(Arena*);
template<> ::SSL_GeometryFieldSize* Arena::CreateMaybeMessage<::SSL_GeometryFieldSize>(Arena*);
template<> ::Vector2f* Arena::CreateMaybeMessage<::Vector2f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vector2f :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector2f) */ {
 public:
  Vector2f();
  virtual ~Vector2f();

  Vector2f(const Vector2f& from);
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2f* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2f* New() const final {
    return CreateMaybeMessage<Vector2f>(nullptr);
  }

  Vector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2f& from);
  void MergeFrom(const Vector2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector2f";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto);
    return ::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vector2f)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_FieldLineSegment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_FieldLineSegment) */ {
 public:
  SSL_FieldLineSegment();
  virtual ~SSL_FieldLineSegment();

  SSL_FieldLineSegment(const SSL_FieldLineSegment& from);
  SSL_FieldLineSegment(SSL_FieldLineSegment&& from) noexcept
    : SSL_FieldLineSegment() {
    *this = ::std::move(from);
  }

  inline SSL_FieldLineSegment& operator=(const SSL_FieldLineSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_FieldLineSegment& operator=(SSL_FieldLineSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_FieldLineSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_FieldLineSegment* internal_default_instance() {
    return reinterpret_cast<const SSL_FieldLineSegment*>(
               &_SSL_FieldLineSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSL_FieldLineSegment& a, SSL_FieldLineSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_FieldLineSegment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_FieldLineSegment* New() const final {
    return CreateMaybeMessage<SSL_FieldLineSegment>(nullptr);
  }

  SSL_FieldLineSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_FieldLineSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_FieldLineSegment& from);
  void MergeFrom(const SSL_FieldLineSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_FieldLineSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_FieldLineSegment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto);
    return ::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kP1FieldNumber = 2,
    kP2FieldNumber = 3,
    kThicknessFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .Vector2f p1 = 2;
  bool has_p1() const;
  private:
  bool _internal_has_p1() const;
  public:
  void clear_p1();
  const ::Vector2f& p1() const;
  ::Vector2f* release_p1();
  ::Vector2f* mutable_p1();
  void set_allocated_p1(::Vector2f* p1);
  private:
  const ::Vector2f& _internal_p1() const;
  ::Vector2f* _internal_mutable_p1();
  public:

  // required .Vector2f p2 = 3;
  bool has_p2() const;
  private:
  bool _internal_has_p2() const;
  public:
  void clear_p2();
  const ::Vector2f& p2() const;
  ::Vector2f* release_p2();
  ::Vector2f* mutable_p2();
  void set_allocated_p2(::Vector2f* p2);
  private:
  const ::Vector2f& _internal_p2() const;
  ::Vector2f* _internal_mutable_p2();
  public:

  // required float thickness = 4;
  bool has_thickness() const;
  private:
  bool _internal_has_thickness() const;
  public:
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_FieldLineSegment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Vector2f* p1_;
  ::Vector2f* p2_;
  float thickness_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_FieldCicularArc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_FieldCicularArc) */ {
 public:
  SSL_FieldCicularArc();
  virtual ~SSL_FieldCicularArc();

  SSL_FieldCicularArc(const SSL_FieldCicularArc& from);
  SSL_FieldCicularArc(SSL_FieldCicularArc&& from) noexcept
    : SSL_FieldCicularArc() {
    *this = ::std::move(from);
  }

  inline SSL_FieldCicularArc& operator=(const SSL_FieldCicularArc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_FieldCicularArc& operator=(SSL_FieldCicularArc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_FieldCicularArc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_FieldCicularArc* internal_default_instance() {
    return reinterpret_cast<const SSL_FieldCicularArc*>(
               &_SSL_FieldCicularArc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSL_FieldCicularArc& a, SSL_FieldCicularArc& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_FieldCicularArc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_FieldCicularArc* New() const final {
    return CreateMaybeMessage<SSL_FieldCicularArc>(nullptr);
  }

  SSL_FieldCicularArc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_FieldCicularArc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_FieldCicularArc& from);
  void MergeFrom(const SSL_FieldCicularArc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_FieldCicularArc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_FieldCicularArc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto);
    return ::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCenterFieldNumber = 2,
    kRadiusFieldNumber = 3,
    kA1FieldNumber = 4,
    kA2FieldNumber = 5,
    kThicknessFieldNumber = 6,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .Vector2f center = 2;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::Vector2f& center() const;
  ::Vector2f* release_center();
  ::Vector2f* mutable_center();
  void set_allocated_center(::Vector2f* center);
  private:
  const ::Vector2f& _internal_center() const;
  ::Vector2f* _internal_mutable_center();
  public:

  // required float radius = 3;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // required float a1 = 4;
  bool has_a1() const;
  private:
  bool _internal_has_a1() const;
  public:
  void clear_a1();
  float a1() const;
  void set_a1(float value);
  private:
  float _internal_a1() const;
  void _internal_set_a1(float value);
  public:

  // required float a2 = 5;
  bool has_a2() const;
  private:
  bool _internal_has_a2() const;
  public:
  void clear_a2();
  float a2() const;
  void set_a2(float value);
  private:
  float _internal_a2() const;
  void _internal_set_a2(float value);
  public:

  // required float thickness = 6;
  bool has_thickness() const;
  private:
  bool _internal_has_thickness() const;
  public:
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_FieldCicularArc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Vector2f* center_;
  float radius_;
  float a1_;
  float a2_;
  float thickness_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryFieldSize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryFieldSize) */ {
 public:
  SSL_GeometryFieldSize();
  virtual ~SSL_GeometryFieldSize();

  SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from);
  SSL_GeometryFieldSize(SSL_GeometryFieldSize&& from) noexcept
    : SSL_GeometryFieldSize() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryFieldSize& operator=(const SSL_GeometryFieldSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryFieldSize& operator=(SSL_GeometryFieldSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_GeometryFieldSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_GeometryFieldSize* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryFieldSize*>(
               &_SSL_GeometryFieldSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSL_GeometryFieldSize& a, SSL_GeometryFieldSize& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryFieldSize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_GeometryFieldSize* New() const final {
    return CreateMaybeMessage<SSL_GeometryFieldSize>(nullptr);
  }

  SSL_GeometryFieldSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_GeometryFieldSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_GeometryFieldSize& from);
  void MergeFrom(const SSL_GeometryFieldSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryFieldSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_GeometryFieldSize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto);
    return ::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldLinesFieldNumber = 6,
    kFieldArcsFieldNumber = 7,
    kFieldLengthFieldNumber = 1,
    kFieldWidthFieldNumber = 2,
    kGoalWidthFieldNumber = 3,
    kGoalDepthFieldNumber = 4,
    kBoundaryWidthFieldNumber = 5,
  };
  // repeated .SSL_FieldLineSegment field_lines = 6;
  int field_lines_size() const;
  private:
  int _internal_field_lines_size() const;
  public:
  void clear_field_lines();
  ::SSL_FieldLineSegment* mutable_field_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment >*
      mutable_field_lines();
  private:
  const ::SSL_FieldLineSegment& _internal_field_lines(int index) const;
  ::SSL_FieldLineSegment* _internal_add_field_lines();
  public:
  const ::SSL_FieldLineSegment& field_lines(int index) const;
  ::SSL_FieldLineSegment* add_field_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment >&
      field_lines() const;

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  int field_arcs_size() const;
  private:
  int _internal_field_arcs_size() const;
  public:
  void clear_field_arcs();
  ::SSL_FieldCicularArc* mutable_field_arcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCicularArc >*
      mutable_field_arcs();
  private:
  const ::SSL_FieldCicularArc& _internal_field_arcs(int index) const;
  ::SSL_FieldCicularArc* _internal_add_field_arcs();
  public:
  const ::SSL_FieldCicularArc& field_arcs(int index) const;
  ::SSL_FieldCicularArc* add_field_arcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCicularArc >&
      field_arcs() const;

  // required int32 field_length = 1;
  bool has_field_length() const;
  private:
  bool _internal_has_field_length() const;
  public:
  void clear_field_length();
  ::PROTOBUF_NAMESPACE_ID::int32 field_length() const;
  void set_field_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_length() const;
  void _internal_set_field_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 field_width = 2;
  bool has_field_width() const;
  private:
  bool _internal_has_field_width() const;
  public:
  void clear_field_width();
  ::PROTOBUF_NAMESPACE_ID::int32 field_width() const;
  void set_field_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_width() const;
  void _internal_set_field_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 goal_width = 3;
  bool has_goal_width() const;
  private:
  bool _internal_has_goal_width() const;
  public:
  void clear_goal_width();
  ::PROTOBUF_NAMESPACE_ID::int32 goal_width() const;
  void set_goal_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goal_width() const;
  void _internal_set_goal_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 goal_depth = 4;
  bool has_goal_depth() const;
  private:
  bool _internal_has_goal_depth() const;
  public:
  void clear_goal_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 goal_depth() const;
  void set_goal_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goal_depth() const;
  void _internal_set_goal_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 boundary_width = 5;
  bool has_boundary_width() const;
  private:
  bool _internal_has_boundary_width() const;
  public:
  void clear_boundary_width();
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_width() const;
  void set_boundary_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boundary_width() const;
  void _internal_set_boundary_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_GeometryFieldSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment > field_lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCicularArc > field_arcs_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 goal_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 goal_depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_width_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryCameraCalibration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryCameraCalibration) */ {
 public:
  SSL_GeometryCameraCalibration();
  virtual ~SSL_GeometryCameraCalibration();

  SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from);
  SSL_GeometryCameraCalibration(SSL_GeometryCameraCalibration&& from) noexcept
    : SSL_GeometryCameraCalibration() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryCameraCalibration& operator=(const SSL_GeometryCameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryCameraCalibration& operator=(SSL_GeometryCameraCalibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_GeometryCameraCalibration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_GeometryCameraCalibration* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryCameraCalibration*>(
               &_SSL_GeometryCameraCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSL_GeometryCameraCalibration& a, SSL_GeometryCameraCalibration& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryCameraCalibration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_GeometryCameraCalibration* New() const final {
    return CreateMaybeMessage<SSL_GeometryCameraCalibration>(nullptr);
  }

  SSL_GeometryCameraCalibration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_GeometryCameraCalibration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_GeometryCameraCalibration& from);
  void MergeFrom(const SSL_GeometryCameraCalibration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryCameraCalibration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_GeometryCameraCalibration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto);
    return ::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 1,
    kFocalLengthFieldNumber = 2,
    kPrincipalPointXFieldNumber = 3,
    kPrincipalPointYFieldNumber = 4,
    kDistortionFieldNumber = 5,
    kQ0FieldNumber = 6,
    kQ1FieldNumber = 7,
    kQ2FieldNumber = 8,
    kQ3FieldNumber = 9,
    kTxFieldNumber = 10,
    kTyFieldNumber = 11,
    kTzFieldNumber = 12,
    kDerivedCameraWorldTxFieldNumber = 13,
    kDerivedCameraWorldTyFieldNumber = 14,
    kDerivedCameraWorldTzFieldNumber = 15,
  };
  // required uint32 camera_id = 1;
  bool has_camera_id() const;
  private:
  bool _internal_has_camera_id() const;
  public:
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float focal_length = 2;
  bool has_focal_length() const;
  private:
  bool _internal_has_focal_length() const;
  public:
  void clear_focal_length();
  float focal_length() const;
  void set_focal_length(float value);
  private:
  float _internal_focal_length() const;
  void _internal_set_focal_length(float value);
  public:

  // required float principal_point_x = 3;
  bool has_principal_point_x() const;
  private:
  bool _internal_has_principal_point_x() const;
  public:
  void clear_principal_point_x();
  float principal_point_x() const;
  void set_principal_point_x(float value);
  private:
  float _internal_principal_point_x() const;
  void _internal_set_principal_point_x(float value);
  public:

  // required float principal_point_y = 4;
  bool has_principal_point_y() const;
  private:
  bool _internal_has_principal_point_y() const;
  public:
  void clear_principal_point_y();
  float principal_point_y() const;
  void set_principal_point_y(float value);
  private:
  float _internal_principal_point_y() const;
  void _internal_set_principal_point_y(float value);
  public:

  // required float distortion = 5;
  bool has_distortion() const;
  private:
  bool _internal_has_distortion() const;
  public:
  void clear_distortion();
  float distortion() const;
  void set_distortion(float value);
  private:
  float _internal_distortion() const;
  void _internal_set_distortion(float value);
  public:

  // required float q0 = 6;
  bool has_q0() const;
  private:
  bool _internal_has_q0() const;
  public:
  void clear_q0();
  float q0() const;
  void set_q0(float value);
  private:
  float _internal_q0() const;
  void _internal_set_q0(float value);
  public:

  // required float q1 = 7;
  bool has_q1() const;
  private:
  bool _internal_has_q1() const;
  public:
  void clear_q1();
  float q1() const;
  void set_q1(float value);
  private:
  float _internal_q1() const;
  void _internal_set_q1(float value);
  public:

  // required float q2 = 8;
  bool has_q2() const;
  private:
  bool _internal_has_q2() const;
  public:
  void clear_q2();
  float q2() const;
  void set_q2(float value);
  private:
  float _internal_q2() const;
  void _internal_set_q2(float value);
  public:

  // required float q3 = 9;
  bool has_q3() const;
  private:
  bool _internal_has_q3() const;
  public:
  void clear_q3();
  float q3() const;
  void set_q3(float value);
  private:
  float _internal_q3() const;
  void _internal_set_q3(float value);
  public:

  // required float tx = 10;
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  float tx() const;
  void set_tx(float value);
  private:
  float _internal_tx() const;
  void _internal_set_tx(float value);
  public:

  // required float ty = 11;
  bool has_ty() const;
  private:
  bool _internal_has_ty() const;
  public:
  void clear_ty();
  float ty() const;
  void set_ty(float value);
  private:
  float _internal_ty() const;
  void _internal_set_ty(float value);
  public:

  // required float tz = 12;
  bool has_tz() const;
  private:
  bool _internal_has_tz() const;
  public:
  void clear_tz();
  float tz() const;
  void set_tz(float value);
  private:
  float _internal_tz() const;
  void _internal_set_tz(float value);
  public:

  // optional float derived_camera_world_tx = 13;
  bool has_derived_camera_world_tx() const;
  private:
  bool _internal_has_derived_camera_world_tx() const;
  public:
  void clear_derived_camera_world_tx();
  float derived_camera_world_tx() const;
  void set_derived_camera_world_tx(float value);
  private:
  float _internal_derived_camera_world_tx() const;
  void _internal_set_derived_camera_world_tx(float value);
  public:

  // optional float derived_camera_world_ty = 14;
  bool has_derived_camera_world_ty() const;
  private:
  bool _internal_has_derived_camera_world_ty() const;
  public:
  void clear_derived_camera_world_ty();
  float derived_camera_world_ty() const;
  void set_derived_camera_world_ty(float value);
  private:
  float _internal_derived_camera_world_ty() const;
  void _internal_set_derived_camera_world_ty(float value);
  public:

  // optional float derived_camera_world_tz = 15;
  bool has_derived_camera_world_tz() const;
  private:
  bool _internal_has_derived_camera_world_tz() const;
  public:
  void clear_derived_camera_world_tz();
  float derived_camera_world_tz() const;
  void set_derived_camera_world_tz(float value);
  private:
  float _internal_derived_camera_world_tz() const;
  void _internal_set_derived_camera_world_tz(float value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_GeometryCameraCalibration)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 camera_id_;
  float focal_length_;
  float principal_point_x_;
  float principal_point_y_;
  float distortion_;
  float q0_;
  float q1_;
  float q2_;
  float q3_;
  float tx_;
  float ty_;
  float tz_;
  float derived_camera_world_tx_;
  float derived_camera_world_ty_;
  float derived_camera_world_tz_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryData) */ {
 public:
  SSL_GeometryData();
  virtual ~SSL_GeometryData();

  SSL_GeometryData(const SSL_GeometryData& from);
  SSL_GeometryData(SSL_GeometryData&& from) noexcept
    : SSL_GeometryData() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryData& operator=(const SSL_GeometryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryData& operator=(SSL_GeometryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_GeometryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_GeometryData* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryData*>(
               &_SSL_GeometryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SSL_GeometryData& a, SSL_GeometryData& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_GeometryData* New() const final {
    return CreateMaybeMessage<SSL_GeometryData>(nullptr);
  }

  SSL_GeometryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_GeometryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_GeometryData& from);
  void MergeFrom(const SSL_GeometryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_GeometryData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto);
    return ::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  int calib_size() const;
  private:
  int _internal_calib_size() const;
  public:
  void clear_calib();
  ::SSL_GeometryCameraCalibration* mutable_calib(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
      mutable_calib();
  private:
  const ::SSL_GeometryCameraCalibration& _internal_calib(int index) const;
  ::SSL_GeometryCameraCalibration* _internal_add_calib();
  public:
  const ::SSL_GeometryCameraCalibration& calib(int index) const;
  ::SSL_GeometryCameraCalibration* add_calib();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
      calib() const;

  // required .SSL_GeometryFieldSize field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::SSL_GeometryFieldSize& field() const;
  ::SSL_GeometryFieldSize* release_field();
  ::SSL_GeometryFieldSize* mutable_field();
  void set_allocated_field(::SSL_GeometryFieldSize* field);
  private:
  const ::SSL_GeometryFieldSize& _internal_field() const;
  ::SSL_GeometryFieldSize* _internal_mutable_field();
  public:

  // @@protoc_insertion_point(class_scope:SSL_GeometryData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration > calib_;
  ::SSL_GeometryFieldSize* field_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2f

// required float x = 1;
inline bool Vector2f::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector2f::has_x() const {
  return _internal_has_x();
}
inline void Vector2f::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Vector2f::_internal_x() const {
  return x_;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:Vector2f.x)
  return _internal_x();
}
inline void Vector2f::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Vector2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector2f.x)
}

// required float y = 2;
inline bool Vector2f::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector2f::has_y() const {
  return _internal_has_y();
}
inline void Vector2f::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Vector2f::_internal_y() const {
  return y_;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:Vector2f.y)
  return _internal_y();
}
inline void Vector2f::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Vector2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector2f.y)
}

// -------------------------------------------------------------------

// SSL_FieldLineSegment

// required string name = 1;
inline bool SSL_FieldLineSegment::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_FieldLineSegment::has_name() const {
  return _internal_has_name();
}
inline void SSL_FieldLineSegment::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSL_FieldLineSegment::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.name)
  return _internal_name();
}
inline void SSL_FieldLineSegment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.name)
}
inline std::string* SSL_FieldLineSegment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.name)
  return _internal_mutable_name();
}
inline const std::string& SSL_FieldLineSegment::_internal_name() const {
  return name_.GetNoArena();
}
inline void SSL_FieldLineSegment::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSL_FieldLineSegment::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSL_FieldLineSegment.name)
}
inline void SSL_FieldLineSegment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_FieldLineSegment.name)
}
inline void SSL_FieldLineSegment::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_FieldLineSegment.name)
}
inline std::string* SSL_FieldLineSegment::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSL_FieldLineSegment::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSL_FieldLineSegment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.name)
}

// required .Vector2f p1 = 2;
inline bool SSL_FieldLineSegment::_internal_has_p1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || p1_ != nullptr);
  return value;
}
inline bool SSL_FieldLineSegment::has_p1() const {
  return _internal_has_p1();
}
inline void SSL_FieldLineSegment::clear_p1() {
  if (p1_ != nullptr) p1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector2f& SSL_FieldLineSegment::_internal_p1() const {
  const ::Vector2f* p = p1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector2f*>(
      &::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldLineSegment::p1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p1)
  return _internal_p1();
}
inline ::Vector2f* SSL_FieldLineSegment::release_p1() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p1)
  _has_bits_[0] &= ~0x00000002u;
  ::Vector2f* temp = p1_;
  p1_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldLineSegment::_internal_mutable_p1() {
  _has_bits_[0] |= 0x00000002u;
  if (p1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2f>(GetArenaNoVirtual());
    p1_ = p;
  }
  return p1_;
}
inline ::Vector2f* SSL_FieldLineSegment::mutable_p1() {
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p1)
  return _internal_mutable_p1();
}
inline void SSL_FieldLineSegment::set_allocated_p1(::Vector2f* p1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p1_;
  }
  if (p1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p1)
}

// required .Vector2f p2 = 3;
inline bool SSL_FieldLineSegment::_internal_has_p2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || p2_ != nullptr);
  return value;
}
inline bool SSL_FieldLineSegment::has_p2() const {
  return _internal_has_p2();
}
inline void SSL_FieldLineSegment::clear_p2() {
  if (p2_ != nullptr) p2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Vector2f& SSL_FieldLineSegment::_internal_p2() const {
  const ::Vector2f* p = p2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector2f*>(
      &::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldLineSegment::p2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p2)
  return _internal_p2();
}
inline ::Vector2f* SSL_FieldLineSegment::release_p2() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p2)
  _has_bits_[0] &= ~0x00000004u;
  ::Vector2f* temp = p2_;
  p2_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldLineSegment::_internal_mutable_p2() {
  _has_bits_[0] |= 0x00000004u;
  if (p2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2f>(GetArenaNoVirtual());
    p2_ = p;
  }
  return p2_;
}
inline ::Vector2f* SSL_FieldLineSegment::mutable_p2() {
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p2)
  return _internal_mutable_p2();
}
inline void SSL_FieldLineSegment::set_allocated_p2(::Vector2f* p2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p2_;
  }
  if (p2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  p2_ = p2;
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p2)
}

// required float thickness = 4;
inline bool SSL_FieldLineSegment::_internal_has_thickness() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_FieldLineSegment::has_thickness() const {
  return _internal_has_thickness();
}
inline void SSL_FieldLineSegment::clear_thickness() {
  thickness_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SSL_FieldLineSegment::_internal_thickness() const {
  return thickness_;
}
inline float SSL_FieldLineSegment::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.thickness)
  return _internal_thickness();
}
inline void SSL_FieldLineSegment::_internal_set_thickness(float value) {
  _has_bits_[0] |= 0x00000008u;
  thickness_ = value;
}
inline void SSL_FieldLineSegment::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.thickness)
}

// -------------------------------------------------------------------

// SSL_FieldCicularArc

// required string name = 1;
inline bool SSL_FieldCicularArc::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_FieldCicularArc::has_name() const {
  return _internal_has_name();
}
inline void SSL_FieldCicularArc::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSL_FieldCicularArc::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.name)
  return _internal_name();
}
inline void SSL_FieldCicularArc::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.name)
}
inline std::string* SSL_FieldCicularArc::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SSL_FieldCicularArc.name)
  return _internal_mutable_name();
}
inline const std::string& SSL_FieldCicularArc::_internal_name() const {
  return name_.GetNoArena();
}
inline void SSL_FieldCicularArc::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSL_FieldCicularArc::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSL_FieldCicularArc.name)
}
inline void SSL_FieldCicularArc::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_FieldCicularArc.name)
}
inline void SSL_FieldCicularArc::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_FieldCicularArc.name)
}
inline std::string* SSL_FieldCicularArc::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSL_FieldCicularArc::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldCicularArc.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSL_FieldCicularArc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCicularArc.name)
}

// required .Vector2f center = 2;
inline bool SSL_FieldCicularArc::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || center_ != nullptr);
  return value;
}
inline bool SSL_FieldCicularArc::has_center() const {
  return _internal_has_center();
}
inline void SSL_FieldCicularArc::clear_center() {
  if (center_ != nullptr) center_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector2f& SSL_FieldCicularArc::_internal_center() const {
  const ::Vector2f* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector2f*>(
      &::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldCicularArc::center() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.center)
  return _internal_center();
}
inline ::Vector2f* SSL_FieldCicularArc::release_center() {
  // @@protoc_insertion_point(field_release:SSL_FieldCicularArc.center)
  _has_bits_[0] &= ~0x00000002u;
  ::Vector2f* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldCicularArc::_internal_mutable_center() {
  _has_bits_[0] |= 0x00000002u;
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2f>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::Vector2f* SSL_FieldCicularArc::mutable_center() {
  // @@protoc_insertion_point(field_mutable:SSL_FieldCicularArc.center)
  return _internal_mutable_center();
}
inline void SSL_FieldCicularArc::set_allocated_center(::Vector2f* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCicularArc.center)
}

// required float radius = 3;
inline bool SSL_FieldCicularArc::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_FieldCicularArc::has_radius() const {
  return _internal_has_radius();
}
inline void SSL_FieldCicularArc::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SSL_FieldCicularArc::_internal_radius() const {
  return radius_;
}
inline float SSL_FieldCicularArc::radius() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.radius)
  return _internal_radius();
}
inline void SSL_FieldCicularArc::_internal_set_radius(float value) {
  _has_bits_[0] |= 0x00000004u;
  radius_ = value;
}
inline void SSL_FieldCicularArc::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.radius)
}

// required float a1 = 4;
inline bool SSL_FieldCicularArc::_internal_has_a1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_FieldCicularArc::has_a1() const {
  return _internal_has_a1();
}
inline void SSL_FieldCicularArc::clear_a1() {
  a1_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SSL_FieldCicularArc::_internal_a1() const {
  return a1_;
}
inline float SSL_FieldCicularArc::a1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.a1)
  return _internal_a1();
}
inline void SSL_FieldCicularArc::_internal_set_a1(float value) {
  _has_bits_[0] |= 0x00000008u;
  a1_ = value;
}
inline void SSL_FieldCicularArc::set_a1(float value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.a1)
}

// required float a2 = 5;
inline bool SSL_FieldCicularArc::_internal_has_a2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_FieldCicularArc::has_a2() const {
  return _internal_has_a2();
}
inline void SSL_FieldCicularArc::clear_a2() {
  a2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SSL_FieldCicularArc::_internal_a2() const {
  return a2_;
}
inline float SSL_FieldCicularArc::a2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.a2)
  return _internal_a2();
}
inline void SSL_FieldCicularArc::_internal_set_a2(float value) {
  _has_bits_[0] |= 0x00000010u;
  a2_ = value;
}
inline void SSL_FieldCicularArc::set_a2(float value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.a2)
}

// required float thickness = 6;
inline bool SSL_FieldCicularArc::_internal_has_thickness() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_FieldCicularArc::has_thickness() const {
  return _internal_has_thickness();
}
inline void SSL_FieldCicularArc::clear_thickness() {
  thickness_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SSL_FieldCicularArc::_internal_thickness() const {
  return thickness_;
}
inline float SSL_FieldCicularArc::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.thickness)
  return _internal_thickness();
}
inline void SSL_FieldCicularArc::_internal_set_thickness(float value) {
  _has_bits_[0] |= 0x00000020u;
  thickness_ = value;
}
inline void SSL_FieldCicularArc::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.thickness)
}

// -------------------------------------------------------------------

// SSL_GeometryFieldSize

// required int32 field_length = 1;
inline bool SSL_GeometryFieldSize::_internal_has_field_length() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_field_length() const {
  return _internal_has_field_length();
}
inline void SSL_GeometryFieldSize::clear_field_length() {
  field_length_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_field_length() const {
  return field_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_length)
  return _internal_field_length();
}
inline void SSL_GeometryFieldSize::_internal_set_field_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  field_length_ = value;
}
inline void SSL_GeometryFieldSize::set_field_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_length(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_length)
}

// required int32 field_width = 2;
inline bool SSL_GeometryFieldSize::_internal_has_field_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_field_width() const {
  return _internal_has_field_width();
}
inline void SSL_GeometryFieldSize::clear_field_width() {
  field_width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_field_width() const {
  return field_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_width)
  return _internal_field_width();
}
inline void SSL_GeometryFieldSize::_internal_set_field_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  field_width_ = value;
}
inline void SSL_GeometryFieldSize::set_field_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_width(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_width)
}

// required int32 goal_width = 3;
inline bool SSL_GeometryFieldSize::_internal_has_goal_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_width() const {
  return _internal_has_goal_width();
}
inline void SSL_GeometryFieldSize::clear_goal_width() {
  goal_width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_goal_width() const {
  return goal_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_width)
  return _internal_goal_width();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  goal_width_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goal_width(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_width)
}

// required int32 goal_depth = 4;
inline bool SSL_GeometryFieldSize::_internal_has_goal_depth() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_depth() const {
  return _internal_has_goal_depth();
}
inline void SSL_GeometryFieldSize::clear_goal_depth() {
  goal_depth_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_goal_depth() const {
  return goal_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_depth)
  return _internal_goal_depth();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  goal_depth_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goal_depth(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_depth)
}

// required int32 boundary_width = 5;
inline bool SSL_GeometryFieldSize::_internal_has_boundary_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_boundary_width() const {
  return _internal_has_boundary_width();
}
inline void SSL_GeometryFieldSize::clear_boundary_width() {
  boundary_width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::_internal_boundary_width() const {
  return boundary_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.boundary_width)
  return _internal_boundary_width();
}
inline void SSL_GeometryFieldSize::_internal_set_boundary_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  boundary_width_ = value;
}
inline void SSL_GeometryFieldSize::set_boundary_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boundary_width(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.boundary_width)
}

// repeated .SSL_FieldLineSegment field_lines = 6;
inline int SSL_GeometryFieldSize::_internal_field_lines_size() const {
  return field_lines_.size();
}
inline int SSL_GeometryFieldSize::field_lines_size() const {
  return _internal_field_lines_size();
}
inline void SSL_GeometryFieldSize::clear_field_lines() {
  field_lines_.Clear();
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::mutable_field_lines(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment >*
SSL_GeometryFieldSize::mutable_field_lines() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_lines)
  return &field_lines_;
}
inline const ::SSL_FieldLineSegment& SSL_GeometryFieldSize::_internal_field_lines(int index) const {
  return field_lines_.Get(index);
}
inline const ::SSL_FieldLineSegment& SSL_GeometryFieldSize::field_lines(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_lines)
  return _internal_field_lines(index);
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::_internal_add_field_lines() {
  return field_lines_.Add();
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::add_field_lines() {
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_lines)
  return _internal_add_field_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment >&
SSL_GeometryFieldSize::field_lines() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_lines)
  return field_lines_;
}

// repeated .SSL_FieldCicularArc field_arcs = 7;
inline int SSL_GeometryFieldSize::_internal_field_arcs_size() const {
  return field_arcs_.size();
}
inline int SSL_GeometryFieldSize::field_arcs_size() const {
  return _internal_field_arcs_size();
}
inline void SSL_GeometryFieldSize::clear_field_arcs() {
  field_arcs_.Clear();
}
inline ::SSL_FieldCicularArc* SSL_GeometryFieldSize::mutable_field_arcs(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCicularArc >*
SSL_GeometryFieldSize::mutable_field_arcs() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_arcs)
  return &field_arcs_;
}
inline const ::SSL_FieldCicularArc& SSL_GeometryFieldSize::_internal_field_arcs(int index) const {
  return field_arcs_.Get(index);
}
inline const ::SSL_FieldCicularArc& SSL_GeometryFieldSize::field_arcs(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_arcs)
  return _internal_field_arcs(index);
}
inline ::SSL_FieldCicularArc* SSL_GeometryFieldSize::_internal_add_field_arcs() {
  return field_arcs_.Add();
}
inline ::SSL_FieldCicularArc* SSL_GeometryFieldSize::add_field_arcs() {
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_arcs)
  return _internal_add_field_arcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCicularArc >&
SSL_GeometryFieldSize::field_arcs() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_;
}

// -------------------------------------------------------------------

// SSL_GeometryCameraCalibration

// required uint32 camera_id = 1;
inline bool SSL_GeometryCameraCalibration::_internal_has_camera_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_camera_id() const {
  return _internal_has_camera_id();
}
inline void SSL_GeometryCameraCalibration::clear_camera_id() {
  camera_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_GeometryCameraCalibration::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_GeometryCameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.camera_id)
  return _internal_camera_id();
}
inline void SSL_GeometryCameraCalibration::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  camera_id_ = value;
}
inline void SSL_GeometryCameraCalibration::set_camera_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.camera_id)
}

// required float focal_length = 2;
inline bool SSL_GeometryCameraCalibration::_internal_has_focal_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_focal_length() const {
  return _internal_has_focal_length();
}
inline void SSL_GeometryCameraCalibration::clear_focal_length() {
  focal_length_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SSL_GeometryCameraCalibration::_internal_focal_length() const {
  return focal_length_;
}
inline float SSL_GeometryCameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.focal_length)
  return _internal_focal_length();
}
inline void SSL_GeometryCameraCalibration::_internal_set_focal_length(float value) {
  _has_bits_[0] |= 0x00000002u;
  focal_length_ = value;
}
inline void SSL_GeometryCameraCalibration::set_focal_length(float value) {
  _internal_set_focal_length(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.focal_length)
}

// required float principal_point_x = 3;
inline bool SSL_GeometryCameraCalibration::_internal_has_principal_point_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_principal_point_x() const {
  return _internal_has_principal_point_x();
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_x() {
  principal_point_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SSL_GeometryCameraCalibration::_internal_principal_point_x() const {
  return principal_point_x_;
}
inline float SSL_GeometryCameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_x)
  return _internal_principal_point_x();
}
inline void SSL_GeometryCameraCalibration::_internal_set_principal_point_x(float value) {
  _has_bits_[0] |= 0x00000004u;
  principal_point_x_ = value;
}
inline void SSL_GeometryCameraCalibration::set_principal_point_x(float value) {
  _internal_set_principal_point_x(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_x)
}

// required float principal_point_y = 4;
inline bool SSL_GeometryCameraCalibration::_internal_has_principal_point_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_principal_point_y() const {
  return _internal_has_principal_point_y();
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_y() {
  principal_point_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float SSL_GeometryCameraCalibration::_internal_principal_point_y() const {
  return principal_point_y_;
}
inline float SSL_GeometryCameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_y)
  return _internal_principal_point_y();
}
inline void SSL_GeometryCameraCalibration::_internal_set_principal_point_y(float value) {
  _has_bits_[0] |= 0x00000008u;
  principal_point_y_ = value;
}
inline void SSL_GeometryCameraCalibration::set_principal_point_y(float value) {
  _internal_set_principal_point_y(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_y)
}

// required float distortion = 5;
inline bool SSL_GeometryCameraCalibration::_internal_has_distortion() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_distortion() const {
  return _internal_has_distortion();
}
inline void SSL_GeometryCameraCalibration::clear_distortion() {
  distortion_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SSL_GeometryCameraCalibration::_internal_distortion() const {
  return distortion_;
}
inline float SSL_GeometryCameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.distortion)
  return _internal_distortion();
}
inline void SSL_GeometryCameraCalibration::_internal_set_distortion(float value) {
  _has_bits_[0] |= 0x00000010u;
  distortion_ = value;
}
inline void SSL_GeometryCameraCalibration::set_distortion(float value) {
  _internal_set_distortion(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.distortion)
}

// required float q0 = 6;
inline bool SSL_GeometryCameraCalibration::_internal_has_q0() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_q0() const {
  return _internal_has_q0();
}
inline void SSL_GeometryCameraCalibration::clear_q0() {
  q0_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SSL_GeometryCameraCalibration::_internal_q0() const {
  return q0_;
}
inline float SSL_GeometryCameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q0)
  return _internal_q0();
}
inline void SSL_GeometryCameraCalibration::_internal_set_q0(float value) {
  _has_bits_[0] |= 0x00000020u;
  q0_ = value;
}
inline void SSL_GeometryCameraCalibration::set_q0(float value) {
  _internal_set_q0(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q0)
}

// required float q1 = 7;
inline bool SSL_GeometryCameraCalibration::_internal_has_q1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_q1() const {
  return _internal_has_q1();
}
inline void SSL_GeometryCameraCalibration::clear_q1() {
  q1_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SSL_GeometryCameraCalibration::_internal_q1() const {
  return q1_;
}
inline float SSL_GeometryCameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q1)
  return _internal_q1();
}
inline void SSL_GeometryCameraCalibration::_internal_set_q1(float value) {
  _has_bits_[0] |= 0x00000040u;
  q1_ = value;
}
inline void SSL_GeometryCameraCalibration::set_q1(float value) {
  _internal_set_q1(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q1)
}

// required float q2 = 8;
inline bool SSL_GeometryCameraCalibration::_internal_has_q2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_q2() const {
  return _internal_has_q2();
}
inline void SSL_GeometryCameraCalibration::clear_q2() {
  q2_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SSL_GeometryCameraCalibration::_internal_q2() const {
  return q2_;
}
inline float SSL_GeometryCameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q2)
  return _internal_q2();
}
inline void SSL_GeometryCameraCalibration::_internal_set_q2(float value) {
  _has_bits_[0] |= 0x00000080u;
  q2_ = value;
}
inline void SSL_GeometryCameraCalibration::set_q2(float value) {
  _internal_set_q2(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q2)
}

// required float q3 = 9;
inline bool SSL_GeometryCameraCalibration::_internal_has_q3() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_q3() const {
  return _internal_has_q3();
}
inline void SSL_GeometryCameraCalibration::clear_q3() {
  q3_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float SSL_GeometryCameraCalibration::_internal_q3() const {
  return q3_;
}
inline float SSL_GeometryCameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q3)
  return _internal_q3();
}
inline void SSL_GeometryCameraCalibration::_internal_set_q3(float value) {
  _has_bits_[0] |= 0x00000100u;
  q3_ = value;
}
inline void SSL_GeometryCameraCalibration::set_q3(float value) {
  _internal_set_q3(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q3)
}

// required float tx = 10;
inline bool SSL_GeometryCameraCalibration::_internal_has_tx() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_tx() const {
  return _internal_has_tx();
}
inline void SSL_GeometryCameraCalibration::clear_tx() {
  tx_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float SSL_GeometryCameraCalibration::_internal_tx() const {
  return tx_;
}
inline float SSL_GeometryCameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tx)
  return _internal_tx();
}
inline void SSL_GeometryCameraCalibration::_internal_set_tx(float value) {
  _has_bits_[0] |= 0x00000200u;
  tx_ = value;
}
inline void SSL_GeometryCameraCalibration::set_tx(float value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tx)
}

// required float ty = 11;
inline bool SSL_GeometryCameraCalibration::_internal_has_ty() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_ty() const {
  return _internal_has_ty();
}
inline void SSL_GeometryCameraCalibration::clear_ty() {
  ty_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float SSL_GeometryCameraCalibration::_internal_ty() const {
  return ty_;
}
inline float SSL_GeometryCameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.ty)
  return _internal_ty();
}
inline void SSL_GeometryCameraCalibration::_internal_set_ty(float value) {
  _has_bits_[0] |= 0x00000400u;
  ty_ = value;
}
inline void SSL_GeometryCameraCalibration::set_ty(float value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.ty)
}

// required float tz = 12;
inline bool SSL_GeometryCameraCalibration::_internal_has_tz() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_tz() const {
  return _internal_has_tz();
}
inline void SSL_GeometryCameraCalibration::clear_tz() {
  tz_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float SSL_GeometryCameraCalibration::_internal_tz() const {
  return tz_;
}
inline float SSL_GeometryCameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tz)
  return _internal_tz();
}
inline void SSL_GeometryCameraCalibration::_internal_set_tz(float value) {
  _has_bits_[0] |= 0x00000800u;
  tz_ = value;
}
inline void SSL_GeometryCameraCalibration::set_tz(float value) {
  _internal_set_tz(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tz)
}

// optional float derived_camera_world_tx = 13;
inline bool SSL_GeometryCameraCalibration::_internal_has_derived_camera_world_tx() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tx() const {
  return _internal_has_derived_camera_world_tx();
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tx() {
  derived_camera_world_tx_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_tx() const {
  return derived_camera_world_tx_;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tx)
  return _internal_derived_camera_world_tx();
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_tx(float value) {
  _has_bits_[0] |= 0x00001000u;
  derived_camera_world_tx_ = value;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tx(float value) {
  _internal_set_derived_camera_world_tx(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tx)
}

// optional float derived_camera_world_ty = 14;
inline bool SSL_GeometryCameraCalibration::_internal_has_derived_camera_world_ty() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_ty() const {
  return _internal_has_derived_camera_world_ty();
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_ty() {
  derived_camera_world_ty_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_ty() const {
  return derived_camera_world_ty_;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_ty)
  return _internal_derived_camera_world_ty();
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_ty(float value) {
  _has_bits_[0] |= 0x00002000u;
  derived_camera_world_ty_ = value;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_ty(float value) {
  _internal_set_derived_camera_world_ty(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_ty)
}

// optional float derived_camera_world_tz = 15;
inline bool SSL_GeometryCameraCalibration::_internal_has_derived_camera_world_tz() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tz() const {
  return _internal_has_derived_camera_world_tz();
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tz() {
  derived_camera_world_tz_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_tz() const {
  return derived_camera_world_tz_;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tz)
  return _internal_derived_camera_world_tz();
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_tz(float value) {
  _has_bits_[0] |= 0x00004000u;
  derived_camera_world_tz_ = value;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tz(float value) {
  _internal_set_derived_camera_world_tz(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tz)
}

// -------------------------------------------------------------------

// SSL_GeometryData

// required .SSL_GeometryFieldSize field = 1;
inline bool SSL_GeometryData::_internal_has_field() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || field_ != nullptr);
  return value;
}
inline bool SSL_GeometryData::has_field() const {
  return _internal_has_field();
}
inline void SSL_GeometryData::clear_field() {
  if (field_ != nullptr) field_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SSL_GeometryFieldSize& SSL_GeometryData::_internal_field() const {
  const ::SSL_GeometryFieldSize* p = field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_GeometryFieldSize*>(
      &::_SSL_GeometryFieldSize_default_instance_);
}
inline const ::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.field)
  return _internal_field();
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  // @@protoc_insertion_point(field_release:SSL_GeometryData.field)
  _has_bits_[0] &= ~0x00000001u;
  ::SSL_GeometryFieldSize* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::_internal_mutable_field() {
  _has_bits_[0] |= 0x00000001u;
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_GeometryFieldSize>(GetArenaNoVirtual());
    field_ = p;
  }
  return field_;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.field)
  return _internal_mutable_field();
}
inline void SSL_GeometryData::set_allocated_field(::SSL_GeometryFieldSize* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
inline int SSL_GeometryData::_internal_calib_size() const {
  return calib_.size();
}
inline int SSL_GeometryData::calib_size() const {
  return _internal_calib_size();
}
inline void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.calib)
  return calib_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryData.calib)
  return &calib_;
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::_internal_calib(int index) const {
  return calib_.Get(index);
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.calib)
  return _internal_calib(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::_internal_add_calib() {
  return calib_.Add();
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  // @@protoc_insertion_point(field_add:SSL_GeometryData.calib)
  return _internal_add_calib();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryData.calib)
  return calib_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fgeometry_2eproto
