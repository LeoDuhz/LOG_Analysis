// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_kickparam.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zss_5fkickparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zss_5fkickparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zss_5fkickparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zss_5fkickparam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5fkickparam_2eproto;
namespace ZSS {
namespace Protocol {
class Chip_Param;
class Chip_ParamDefaultTypeInternal;
extern Chip_ParamDefaultTypeInternal _Chip_Param_default_instance_;
class Flat_Param;
class Flat_ParamDefaultTypeInternal;
extern Flat_ParamDefaultTypeInternal _Flat_Param_default_instance_;
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
class Robot_Param;
class Robot_ParamDefaultTypeInternal;
extern Robot_ParamDefaultTypeInternal _Robot_Param_default_instance_;
}  // namespace Protocol
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> ::ZSS::Protocol::Chip_Param* Arena::CreateMaybeMessage<::ZSS::Protocol::Chip_Param>(Arena*);
template<> ::ZSS::Protocol::Flat_Param* Arena::CreateMaybeMessage<::ZSS::Protocol::Flat_Param>(Arena*);
template<> ::ZSS::Protocol::Robot* Arena::CreateMaybeMessage<::ZSS::Protocol::Robot>(Arena*);
template<> ::ZSS::Protocol::Robot_Param* Arena::CreateMaybeMessage<::ZSS::Protocol::Robot_Param>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ZSS {
namespace Protocol {

// ===================================================================

class Robot_Param :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Robot_Param) */ {
 public:
  Robot_Param();
  virtual ~Robot_Param();

  Robot_Param(const Robot_Param& from);
  Robot_Param(Robot_Param&& from) noexcept
    : Robot_Param() {
    *this = ::std::move(from);
  }

  inline Robot_Param& operator=(const Robot_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot_Param& operator=(Robot_Param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot_Param& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot_Param* internal_default_instance() {
    return reinterpret_cast<const Robot_Param*>(
               &_Robot_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Robot_Param& a, Robot_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot_Param* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot_Param* New() const final {
    return CreateMaybeMessage<Robot_Param>(nullptr);
  }

  Robot_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot_Param& from);
  void MergeFrom(const Robot_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Robot_Param";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fkickparam_2eproto);
    return ::descriptor_table_zss_5fkickparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotFieldNumber = 1,
    kChipparamFieldNumber = 2,
    kFlatparamFieldNumber = 3,
  };
  // required .ZSS.Protocol.Robot robot = 1;
  bool has_robot() const;
  private:
  bool _internal_has_robot() const;
  public:
  void clear_robot();
  const ::ZSS::Protocol::Robot& robot() const;
  ::ZSS::Protocol::Robot* release_robot();
  ::ZSS::Protocol::Robot* mutable_robot();
  void set_allocated_robot(::ZSS::Protocol::Robot* robot);
  private:
  const ::ZSS::Protocol::Robot& _internal_robot() const;
  ::ZSS::Protocol::Robot* _internal_mutable_robot();
  public:

  // required .ZSS.Protocol.Chip_Param chipparam = 2;
  bool has_chipparam() const;
  private:
  bool _internal_has_chipparam() const;
  public:
  void clear_chipparam();
  const ::ZSS::Protocol::Chip_Param& chipparam() const;
  ::ZSS::Protocol::Chip_Param* release_chipparam();
  ::ZSS::Protocol::Chip_Param* mutable_chipparam();
  void set_allocated_chipparam(::ZSS::Protocol::Chip_Param* chipparam);
  private:
  const ::ZSS::Protocol::Chip_Param& _internal_chipparam() const;
  ::ZSS::Protocol::Chip_Param* _internal_mutable_chipparam();
  public:

  // required .ZSS.Protocol.Flat_Param flatparam = 3;
  bool has_flatparam() const;
  private:
  bool _internal_has_flatparam() const;
  public:
  void clear_flatparam();
  const ::ZSS::Protocol::Flat_Param& flatparam() const;
  ::ZSS::Protocol::Flat_Param* release_flatparam();
  ::ZSS::Protocol::Flat_Param* mutable_flatparam();
  void set_allocated_flatparam(::ZSS::Protocol::Flat_Param* flatparam);
  private:
  const ::ZSS::Protocol::Flat_Param& _internal_flatparam() const;
  ::ZSS::Protocol::Flat_Param* _internal_mutable_flatparam();
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Robot_Param)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ZSS::Protocol::Robot* robot_;
  ::ZSS::Protocol::Chip_Param* chipparam_;
  ::ZSS::Protocol::Flat_Param* flatparam_;
  friend struct ::TableStruct_zss_5fkickparam_2eproto;
};
// -------------------------------------------------------------------

class Flat_Param :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Flat_Param) */ {
 public:
  Flat_Param();
  virtual ~Flat_Param();

  Flat_Param(const Flat_Param& from);
  Flat_Param(Flat_Param&& from) noexcept
    : Flat_Param() {
    *this = ::std::move(from);
  }

  inline Flat_Param& operator=(const Flat_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flat_Param& operator=(Flat_Param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Flat_Param& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Flat_Param* internal_default_instance() {
    return reinterpret_cast<const Flat_Param*>(
               &_Flat_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Flat_Param& a, Flat_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Flat_Param* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Flat_Param* New() const final {
    return CreateMaybeMessage<Flat_Param>(nullptr);
  }

  Flat_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Flat_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Flat_Param& from);
  void MergeFrom(const Flat_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flat_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Flat_Param";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fkickparam_2eproto);
    return ::descriptor_table_zss_5fkickparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaFieldNumber = 1,
    kFbFieldNumber = 2,
    kFcFieldNumber = 3,
    kFmaxFieldNumber = 4,
    kFminFieldNumber = 5,
  };
  // required double fa = 1;
  bool has_fa() const;
  private:
  bool _internal_has_fa() const;
  public:
  void clear_fa();
  double fa() const;
  void set_fa(double value);
  private:
  double _internal_fa() const;
  void _internal_set_fa(double value);
  public:

  // required double fb = 2;
  bool has_fb() const;
  private:
  bool _internal_has_fb() const;
  public:
  void clear_fb();
  double fb() const;
  void set_fb(double value);
  private:
  double _internal_fb() const;
  void _internal_set_fb(double value);
  public:

  // required double fc = 3;
  bool has_fc() const;
  private:
  bool _internal_has_fc() const;
  public:
  void clear_fc();
  double fc() const;
  void set_fc(double value);
  private:
  double _internal_fc() const;
  void _internal_set_fc(double value);
  public:

  // required double fmax = 4;
  bool has_fmax() const;
  private:
  bool _internal_has_fmax() const;
  public:
  void clear_fmax();
  double fmax() const;
  void set_fmax(double value);
  private:
  double _internal_fmax() const;
  void _internal_set_fmax(double value);
  public:

  // required double fmin = 5;
  bool has_fmin() const;
  private:
  bool _internal_has_fmin() const;
  public:
  void clear_fmin();
  double fmin() const;
  void set_fmin(double value);
  private:
  double _internal_fmin() const;
  void _internal_set_fmin(double value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Flat_Param)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double fa_;
  double fb_;
  double fc_;
  double fmax_;
  double fmin_;
  friend struct ::TableStruct_zss_5fkickparam_2eproto;
};
// -------------------------------------------------------------------

class Chip_Param :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Chip_Param) */ {
 public:
  Chip_Param();
  virtual ~Chip_Param();

  Chip_Param(const Chip_Param& from);
  Chip_Param(Chip_Param&& from) noexcept
    : Chip_Param() {
    *this = ::std::move(from);
  }

  inline Chip_Param& operator=(const Chip_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chip_Param& operator=(Chip_Param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chip_Param& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chip_Param* internal_default_instance() {
    return reinterpret_cast<const Chip_Param*>(
               &_Chip_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Chip_Param& a, Chip_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Chip_Param* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chip_Param* New() const final {
    return CreateMaybeMessage<Chip_Param>(nullptr);
  }

  Chip_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chip_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chip_Param& from);
  void MergeFrom(const Chip_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chip_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Chip_Param";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fkickparam_2eproto);
    return ::descriptor_table_zss_5fkickparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaFieldNumber = 1,
    kCbFieldNumber = 2,
    kCcFieldNumber = 3,
    kCmaxFieldNumber = 4,
    kCminFieldNumber = 5,
  };
  // required double ca = 1;
  bool has_ca() const;
  private:
  bool _internal_has_ca() const;
  public:
  void clear_ca();
  double ca() const;
  void set_ca(double value);
  private:
  double _internal_ca() const;
  void _internal_set_ca(double value);
  public:

  // required double cb = 2;
  bool has_cb() const;
  private:
  bool _internal_has_cb() const;
  public:
  void clear_cb();
  double cb() const;
  void set_cb(double value);
  private:
  double _internal_cb() const;
  void _internal_set_cb(double value);
  public:

  // required double cc = 3;
  bool has_cc() const;
  private:
  bool _internal_has_cc() const;
  public:
  void clear_cc();
  double cc() const;
  void set_cc(double value);
  private:
  double _internal_cc() const;
  void _internal_set_cc(double value);
  public:

  // required double cmax = 4;
  bool has_cmax() const;
  private:
  bool _internal_has_cmax() const;
  public:
  void clear_cmax();
  double cmax() const;
  void set_cmax(double value);
  private:
  double _internal_cmax() const;
  void _internal_set_cmax(double value);
  public:

  // required double cmin = 5;
  bool has_cmin() const;
  private:
  bool _internal_has_cmin() const;
  public:
  void clear_cmin();
  double cmin() const;
  void set_cmin(double value);
  private:
  double _internal_cmin() const;
  void _internal_set_cmin(double value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Chip_Param)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double ca_;
  double cb_;
  double cc_;
  double cmax_;
  double cmin_;
  friend struct ::TableStruct_zss_5fkickparam_2eproto;
};
// -------------------------------------------------------------------

class Robot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.Protocol.Robot) */ {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(nullptr);
  }

  Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.Protocol.Robot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fkickparam_2eproto);
    return ::descriptor_table_zss_5fkickparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // required int32 team = 1;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::PROTOBUF_NAMESPACE_ID::int32 team() const;
  void set_team(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team() const;
  void _internal_set_team(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.Protocol.Robot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_zss_5fkickparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Robot_Param

// required .ZSS.Protocol.Robot robot = 1;
inline bool Robot_Param::_internal_has_robot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || robot_ != nullptr);
  return value;
}
inline bool Robot_Param::has_robot() const {
  return _internal_has_robot();
}
inline void Robot_Param::clear_robot() {
  if (robot_ != nullptr) robot_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ZSS::Protocol::Robot& Robot_Param::_internal_robot() const {
  const ::ZSS::Protocol::Robot* p = robot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::Protocol::Robot*>(
      &::ZSS::Protocol::_Robot_default_instance_);
}
inline const ::ZSS::Protocol::Robot& Robot_Param::robot() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Param.robot)
  return _internal_robot();
}
inline ::ZSS::Protocol::Robot* Robot_Param::release_robot() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Robot_Param.robot)
  _has_bits_[0] &= ~0x00000001u;
  ::ZSS::Protocol::Robot* temp = robot_;
  robot_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::Robot* Robot_Param::_internal_mutable_robot() {
  _has_bits_[0] |= 0x00000001u;
  if (robot_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::Robot>(GetArenaNoVirtual());
    robot_ = p;
  }
  return robot_;
}
inline ::ZSS::Protocol::Robot* Robot_Param::mutable_robot() {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Robot_Param.robot)
  return _internal_mutable_robot();
}
inline void Robot_Param::set_allocated_robot(::ZSS::Protocol::Robot* robot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete robot_;
  }
  if (robot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      robot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Robot_Param.robot)
}

// required .ZSS.Protocol.Chip_Param chipparam = 2;
inline bool Robot_Param::_internal_has_chipparam() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chipparam_ != nullptr);
  return value;
}
inline bool Robot_Param::has_chipparam() const {
  return _internal_has_chipparam();
}
inline void Robot_Param::clear_chipparam() {
  if (chipparam_ != nullptr) chipparam_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ZSS::Protocol::Chip_Param& Robot_Param::_internal_chipparam() const {
  const ::ZSS::Protocol::Chip_Param* p = chipparam_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::Protocol::Chip_Param*>(
      &::ZSS::Protocol::_Chip_Param_default_instance_);
}
inline const ::ZSS::Protocol::Chip_Param& Robot_Param::chipparam() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Param.chipparam)
  return _internal_chipparam();
}
inline ::ZSS::Protocol::Chip_Param* Robot_Param::release_chipparam() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Robot_Param.chipparam)
  _has_bits_[0] &= ~0x00000002u;
  ::ZSS::Protocol::Chip_Param* temp = chipparam_;
  chipparam_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::Chip_Param* Robot_Param::_internal_mutable_chipparam() {
  _has_bits_[0] |= 0x00000002u;
  if (chipparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::Chip_Param>(GetArenaNoVirtual());
    chipparam_ = p;
  }
  return chipparam_;
}
inline ::ZSS::Protocol::Chip_Param* Robot_Param::mutable_chipparam() {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Robot_Param.chipparam)
  return _internal_mutable_chipparam();
}
inline void Robot_Param::set_allocated_chipparam(::ZSS::Protocol::Chip_Param* chipparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chipparam_;
  }
  if (chipparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chipparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chipparam, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chipparam_ = chipparam;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Robot_Param.chipparam)
}

// required .ZSS.Protocol.Flat_Param flatparam = 3;
inline bool Robot_Param::_internal_has_flatparam() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || flatparam_ != nullptr);
  return value;
}
inline bool Robot_Param::has_flatparam() const {
  return _internal_has_flatparam();
}
inline void Robot_Param::clear_flatparam() {
  if (flatparam_ != nullptr) flatparam_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ZSS::Protocol::Flat_Param& Robot_Param::_internal_flatparam() const {
  const ::ZSS::Protocol::Flat_Param* p = flatparam_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::Protocol::Flat_Param*>(
      &::ZSS::Protocol::_Flat_Param_default_instance_);
}
inline const ::ZSS::Protocol::Flat_Param& Robot_Param::flatparam() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot_Param.flatparam)
  return _internal_flatparam();
}
inline ::ZSS::Protocol::Flat_Param* Robot_Param::release_flatparam() {
  // @@protoc_insertion_point(field_release:ZSS.Protocol.Robot_Param.flatparam)
  _has_bits_[0] &= ~0x00000004u;
  ::ZSS::Protocol::Flat_Param* temp = flatparam_;
  flatparam_ = nullptr;
  return temp;
}
inline ::ZSS::Protocol::Flat_Param* Robot_Param::_internal_mutable_flatparam() {
  _has_bits_[0] |= 0x00000004u;
  if (flatparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::Protocol::Flat_Param>(GetArenaNoVirtual());
    flatparam_ = p;
  }
  return flatparam_;
}
inline ::ZSS::Protocol::Flat_Param* Robot_Param::mutable_flatparam() {
  // @@protoc_insertion_point(field_mutable:ZSS.Protocol.Robot_Param.flatparam)
  return _internal_mutable_flatparam();
}
inline void Robot_Param::set_allocated_flatparam(::ZSS::Protocol::Flat_Param* flatparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete flatparam_;
  }
  if (flatparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flatparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatparam, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  flatparam_ = flatparam;
  // @@protoc_insertion_point(field_set_allocated:ZSS.Protocol.Robot_Param.flatparam)
}

// -------------------------------------------------------------------

// Flat_Param

// required double fa = 1;
inline bool Flat_Param::_internal_has_fa() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Flat_Param::has_fa() const {
  return _internal_has_fa();
}
inline void Flat_Param::clear_fa() {
  fa_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Flat_Param::_internal_fa() const {
  return fa_;
}
inline double Flat_Param::fa() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Flat_Param.fa)
  return _internal_fa();
}
inline void Flat_Param::_internal_set_fa(double value) {
  _has_bits_[0] |= 0x00000001u;
  fa_ = value;
}
inline void Flat_Param::set_fa(double value) {
  _internal_set_fa(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Flat_Param.fa)
}

// required double fb = 2;
inline bool Flat_Param::_internal_has_fb() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Flat_Param::has_fb() const {
  return _internal_has_fb();
}
inline void Flat_Param::clear_fb() {
  fb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Flat_Param::_internal_fb() const {
  return fb_;
}
inline double Flat_Param::fb() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Flat_Param.fb)
  return _internal_fb();
}
inline void Flat_Param::_internal_set_fb(double value) {
  _has_bits_[0] |= 0x00000002u;
  fb_ = value;
}
inline void Flat_Param::set_fb(double value) {
  _internal_set_fb(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Flat_Param.fb)
}

// required double fc = 3;
inline bool Flat_Param::_internal_has_fc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Flat_Param::has_fc() const {
  return _internal_has_fc();
}
inline void Flat_Param::clear_fc() {
  fc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Flat_Param::_internal_fc() const {
  return fc_;
}
inline double Flat_Param::fc() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Flat_Param.fc)
  return _internal_fc();
}
inline void Flat_Param::_internal_set_fc(double value) {
  _has_bits_[0] |= 0x00000004u;
  fc_ = value;
}
inline void Flat_Param::set_fc(double value) {
  _internal_set_fc(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Flat_Param.fc)
}

// required double fmax = 4;
inline bool Flat_Param::_internal_has_fmax() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Flat_Param::has_fmax() const {
  return _internal_has_fmax();
}
inline void Flat_Param::clear_fmax() {
  fmax_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Flat_Param::_internal_fmax() const {
  return fmax_;
}
inline double Flat_Param::fmax() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Flat_Param.fmax)
  return _internal_fmax();
}
inline void Flat_Param::_internal_set_fmax(double value) {
  _has_bits_[0] |= 0x00000008u;
  fmax_ = value;
}
inline void Flat_Param::set_fmax(double value) {
  _internal_set_fmax(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Flat_Param.fmax)
}

// required double fmin = 5;
inline bool Flat_Param::_internal_has_fmin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Flat_Param::has_fmin() const {
  return _internal_has_fmin();
}
inline void Flat_Param::clear_fmin() {
  fmin_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Flat_Param::_internal_fmin() const {
  return fmin_;
}
inline double Flat_Param::fmin() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Flat_Param.fmin)
  return _internal_fmin();
}
inline void Flat_Param::_internal_set_fmin(double value) {
  _has_bits_[0] |= 0x00000010u;
  fmin_ = value;
}
inline void Flat_Param::set_fmin(double value) {
  _internal_set_fmin(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Flat_Param.fmin)
}

// -------------------------------------------------------------------

// Chip_Param

// required double ca = 1;
inline bool Chip_Param::_internal_has_ca() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chip_Param::has_ca() const {
  return _internal_has_ca();
}
inline void Chip_Param::clear_ca() {
  ca_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Chip_Param::_internal_ca() const {
  return ca_;
}
inline double Chip_Param::ca() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Chip_Param.ca)
  return _internal_ca();
}
inline void Chip_Param::_internal_set_ca(double value) {
  _has_bits_[0] |= 0x00000001u;
  ca_ = value;
}
inline void Chip_Param::set_ca(double value) {
  _internal_set_ca(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Chip_Param.ca)
}

// required double cb = 2;
inline bool Chip_Param::_internal_has_cb() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Chip_Param::has_cb() const {
  return _internal_has_cb();
}
inline void Chip_Param::clear_cb() {
  cb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Chip_Param::_internal_cb() const {
  return cb_;
}
inline double Chip_Param::cb() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Chip_Param.cb)
  return _internal_cb();
}
inline void Chip_Param::_internal_set_cb(double value) {
  _has_bits_[0] |= 0x00000002u;
  cb_ = value;
}
inline void Chip_Param::set_cb(double value) {
  _internal_set_cb(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Chip_Param.cb)
}

// required double cc = 3;
inline bool Chip_Param::_internal_has_cc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chip_Param::has_cc() const {
  return _internal_has_cc();
}
inline void Chip_Param::clear_cc() {
  cc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Chip_Param::_internal_cc() const {
  return cc_;
}
inline double Chip_Param::cc() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Chip_Param.cc)
  return _internal_cc();
}
inline void Chip_Param::_internal_set_cc(double value) {
  _has_bits_[0] |= 0x00000004u;
  cc_ = value;
}
inline void Chip_Param::set_cc(double value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Chip_Param.cc)
}

// required double cmax = 4;
inline bool Chip_Param::_internal_has_cmax() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Chip_Param::has_cmax() const {
  return _internal_has_cmax();
}
inline void Chip_Param::clear_cmax() {
  cmax_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Chip_Param::_internal_cmax() const {
  return cmax_;
}
inline double Chip_Param::cmax() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Chip_Param.cmax)
  return _internal_cmax();
}
inline void Chip_Param::_internal_set_cmax(double value) {
  _has_bits_[0] |= 0x00000008u;
  cmax_ = value;
}
inline void Chip_Param::set_cmax(double value) {
  _internal_set_cmax(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Chip_Param.cmax)
}

// required double cmin = 5;
inline bool Chip_Param::_internal_has_cmin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Chip_Param::has_cmin() const {
  return _internal_has_cmin();
}
inline void Chip_Param::clear_cmin() {
  cmin_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Chip_Param::_internal_cmin() const {
  return cmin_;
}
inline double Chip_Param::cmin() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Chip_Param.cmin)
  return _internal_cmin();
}
inline void Chip_Param::_internal_set_cmin(double value) {
  _has_bits_[0] |= 0x00000010u;
  cmin_ = value;
}
inline void Chip_Param::set_cmin(double value) {
  _internal_set_cmin(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Chip_Param.cmin)
}

// -------------------------------------------------------------------

// Robot

// required int32 team = 1;
inline bool Robot::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Robot::has_team() const {
  return _internal_has_team();
}
inline void Robot::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_team() const {
  return team_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::team() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot.team)
  return _internal_team();
}
inline void Robot::_internal_set_team(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  team_ = value;
}
inline void Robot::set_team(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot.team)
}

// required int32 id = 2;
inline bool Robot::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Robot::has_id() const {
  return _internal_has_id();
}
inline void Robot::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::id() const {
  // @@protoc_insertion_point(field_get:ZSS.Protocol.Robot.id)
  return _internal_id();
}
inline void Robot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Robot::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ZSS.Protocol.Robot.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zss_5fkickparam_2eproto
