// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_team.proto

#include "ssl_game_controller_team.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fteam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AdvantageChoice_ssl_5fgame_5fcontroller_5fteam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerReply_ssl_5fgame_5fcontroller_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fevent_5f2019_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgame_5fevent_5f2019_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fevent_5f2019_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotCrashUnique_ssl_5fgame_5fevent_5f2019_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fevent_5f2019_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameEvent_BotPushedBot_ssl_5fgame_5fevent_5f2019_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto;
class TeamRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamRegistration> _instance;
} _TeamRegistration_default_instance_;
class TeamToControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamToController> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 desired_keeper_;
  int advantage_response_;
  bool substitute_bot_;
  bool ping_;
} _TeamToController_default_instance_;
class ControllerToTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControllerToTeam> _instance;
  const ::ControllerReply* controller_reply_;
  const ::AdvantageChoice* advantage_choice_;
} _ControllerToTeam_default_instance_;
class AdvantageChoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvantageChoice> _instance;
} _AdvantageChoice_default_instance_;
static void InitDefaultsscc_info_AdvantageChoice_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdvantageChoice_default_instance_;
    new (ptr) ::AdvantageChoice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdvantageChoice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AdvantageChoice_ssl_5fgame_5fcontroller_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AdvantageChoice_ssl_5fgame_5fcontroller_5fteam_2eproto}, {
      &scc_info_GameEvent_BotCrashUnique_ssl_5fgame_5fevent_5f2019_2eproto.base,
      &scc_info_GameEvent_BotPushedBot_ssl_5fgame_5fevent_5f2019_2eproto.base,
      &scc_info_GameEvent_AttackerTouchedOpponentInDefenseArea_ssl_5fgame_5fevent_5f2019_2eproto.base,}};

static void InitDefaultsscc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ControllerToTeam_default_instance_;
    new (ptr) ::ControllerToTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControllerToTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto}, {
      &scc_info_ControllerReply_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,
      &scc_info_AdvantageChoice_ssl_5fgame_5fcontroller_5fteam_2eproto.base,}};

static void InitDefaultsscc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeamRegistration_default_instance_;
    new (ptr) ::TeamRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeamRegistration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto}, {
      &scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeamToController_default_instance_;
    new (ptr) ::TeamToController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeamToController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto}, {
      &scc_info_Signature_ssl_5fgame_5fcontroller_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fgame_5fcontroller_5fteam_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, team_name_),
  PROTOBUF_FIELD_OFFSET(::TeamRegistration, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TeamToController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeamToController, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TeamToController, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeamToController, signature_),
  offsetof(::TeamToControllerDefaultTypeInternal, desired_keeper_),
  offsetof(::TeamToControllerDefaultTypeInternal, advantage_response_),
  offsetof(::TeamToControllerDefaultTypeInternal, substitute_bot_),
  offsetof(::TeamToControllerDefaultTypeInternal, ping_),
  PROTOBUF_FIELD_OFFSET(::TeamToController, msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControllerToTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ControllerToTeam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ControllerToTeamDefaultTypeInternal, controller_reply_),
  offsetof(::ControllerToTeamDefaultTypeInternal, advantage_choice_),
  PROTOBUF_FIELD_OFFSET(::ControllerToTeam, msg_),
  PROTOBUF_FIELD_OFFSET(::AdvantageChoice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AdvantageChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AdvantageChoice, foul_),
  PROTOBUF_FIELD_OFFSET(::AdvantageChoice, bot_crash_unique_),
  PROTOBUF_FIELD_OFFSET(::AdvantageChoice, bot_pushed_bot_),
  PROTOBUF_FIELD_OFFSET(::AdvantageChoice, attacker_touched_opponent_in_defense_area_),
  3,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TeamRegistration)},
  { 9, 20, sizeof(::TeamToController)},
  { 25, -1, sizeof(::ControllerToTeam)},
  { 33, 42, sizeof(::AdvantageChoice)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TeamRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TeamToController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ControllerToTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AdvantageChoice_default_instance_),
};

const char descriptor_table_protodef_ssl_5fgame_5fcontroller_5fteam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036ssl_game_controller_team.proto\032\031ssl_ga"
  "me_event_2019.proto\032 ssl_game_controller"
  "_common.proto\"D\n\020TeamRegistration\022\021\n\ttea"
  "m_name\030\001 \002(\t\022\035\n\tsignature\030\002 \001(\0132\n.Signat"
  "ure\"\377\001\n\020TeamToController\022\035\n\tsignature\030\001 "
  "\001(\0132\n.Signature\022\030\n\016desired_keeper\030\002 \001(\005H"
  "\000\022A\n\022advantage_response\030\003 \001(\0162#.TeamToCo"
  "ntroller.AdvantageResponseH\000\022\030\n\016substitu"
  "te_bot\030\004 \001(\010H\000\022\016\n\004ping\030\005 \001(\010H\000\">\n\021Advant"
  "ageResponse\022\r\n\tUNDECIDED\020\000\022\010\n\004STOP\020\000\022\014\n\010"
  "CONTINUE\020\001\032\002\020\001B\005\n\003msg\"u\n\020ControllerToTea"
  "m\022,\n\020controller_reply\030\001 \001(\0132\020.Controller"
  "ReplyH\000\022,\n\020advantage_choice\030\002 \001(\0132\020.Adva"
  "ntageChoiceH\000B\005\n\003msg\"\340\002\n\017AdvantageChoice"
  "\022#\n\004foul\030\001 \002(\0162\025.AdvantageChoice.Foul\0223\n"
  "\020bot_crash_unique\030\002 \001(\0132\031.GameEvent.BotC"
  "rashUnique\022/\n\016bot_pushed_bot\030\003 \001(\0132\027.Gam"
  "eEvent.BotPushedBot\022b\n)attacker_touched_"
  "opponent_in_defense_area\030\004 \001(\0132/.GameEve"
  "nt.AttackerTouchedOpponentInDefenseArea\""
  "^\n\004Foul\022\013\n\007UNKNOWN\020\000\022\r\n\tCOLLISION\020\001\022\013\n\007P"
  "USHING\020\002\022-\n)ATTACKER_TOUCHED_OPPONENT_IN"
  "_DEFENSE_AREA\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_deps[2] = {
  &::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgame_5fevent_5f2019_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_sccs[4] = {
  &scc_info_AdvantageChoice_ssl_5fgame_5fcontroller_5fteam_2eproto.base,
  &scc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto.base,
  &scc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto.base,
  &scc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fgame_5fcontroller_5fteam_2eproto, "ssl_game_controller_team.proto", 895,
  &descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_once, descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_sccs, descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_ssl_5fgame_5fcontroller_5fteam_2eproto::offsets,
  file_level_metadata_ssl_5fgame_5fcontroller_5fteam_2eproto, 4, file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto, file_level_service_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fgame_5fcontroller_5fteam_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamToController_AdvantageResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto);
  return file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto[0];
}
bool TeamToController_AdvantageResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TeamToController_AdvantageResponse TeamToController::UNDECIDED;
constexpr TeamToController_AdvantageResponse TeamToController::STOP;
constexpr TeamToController_AdvantageResponse TeamToController::CONTINUE;
constexpr TeamToController_AdvantageResponse TeamToController::AdvantageResponse_MIN;
constexpr TeamToController_AdvantageResponse TeamToController::AdvantageResponse_MAX;
constexpr int TeamToController::AdvantageResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdvantageChoice_Foul_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgame_5fcontroller_5fteam_2eproto);
  return file_level_enum_descriptors_ssl_5fgame_5fcontroller_5fteam_2eproto[1];
}
bool AdvantageChoice_Foul_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AdvantageChoice_Foul AdvantageChoice::UNKNOWN;
constexpr AdvantageChoice_Foul AdvantageChoice::COLLISION;
constexpr AdvantageChoice_Foul AdvantageChoice::PUSHING;
constexpr AdvantageChoice_Foul AdvantageChoice::ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
constexpr AdvantageChoice_Foul AdvantageChoice::Foul_MIN;
constexpr AdvantageChoice_Foul AdvantageChoice::Foul_MAX;
constexpr int AdvantageChoice::Foul_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TeamRegistration::InitAsDefaultInstance() {
  ::_TeamRegistration_default_instance_._instance.get_mutable()->signature_ = const_cast< ::Signature*>(
      ::Signature::internal_default_instance());
}
class TeamRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamRegistration>()._has_bits_);
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Signature& signature(const TeamRegistration* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::Signature&
TeamRegistration::_Internal::signature(const TeamRegistration* msg) {
  return *msg->signature_;
}
void TeamRegistration::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TeamRegistration::TeamRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeamRegistration)
}
TeamRegistration::TeamRegistration(const TeamRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_team_name(),
      GetArena());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TeamRegistration)
}

void TeamRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_ = nullptr;
}

TeamRegistration::~TeamRegistration() {
  // @@protoc_insertion_point(destructor:TeamRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void TeamRegistration::ArenaDtor(void* object) {
  TeamRegistration* _this = reinterpret_cast< TeamRegistration* >(object);
  (void)_this;
}
void TeamRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamRegistration& TeamRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamRegistration_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  return *internal_default_instance();
}


void TeamRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string team_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TeamRegistration.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Signature signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TeamRegistration.team_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team_name(), target);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRegistration)
  return target;
}

size_t TeamRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRegistration)
  size_t total_size = 0;

  // required string team_name = 1;
  if (_internal_has_team_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Signature signature = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRegistration)
    MergeFrom(*source);
  }
}

void TeamRegistration::MergeFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signature()->::Signature::MergeFrom(from._internal_signature());
    }
  }
}

void TeamRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRegistration::CopyFrom(const TeamRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRegistration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamRegistration::InternalSwap(TeamRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(signature_, other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamToController::InitAsDefaultInstance() {
  ::_TeamToController_default_instance_._instance.get_mutable()->signature_ = const_cast< ::Signature*>(
      ::Signature::internal_default_instance());
  ::_TeamToController_default_instance_.desired_keeper_ = 0;
  ::_TeamToController_default_instance_.advantage_response_ = 0;
  ::_TeamToController_default_instance_.substitute_bot_ = false;
  ::_TeamToController_default_instance_.ping_ = false;
}
class TeamToController::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamToController>()._has_bits_);
  static const ::Signature& signature(const TeamToController* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Signature&
TeamToController::_Internal::signature(const TeamToController* msg) {
  return *msg->signature_;
}
void TeamToController::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TeamToController::TeamToController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeamToController)
}
TeamToController::TeamToController(const TeamToController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    signature_ = new ::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      _internal_set_desired_keeper(from._internal_desired_keeper());
      break;
    }
    case kAdvantageResponse: {
      _internal_set_advantage_response(from._internal_advantage_response());
      break;
    }
    case kSubstituteBot: {
      _internal_set_substitute_bot(from._internal_substitute_bot());
      break;
    }
    case kPing: {
      _internal_set_ping(from._internal_ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TeamToController)
}

void TeamToController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  signature_ = nullptr;
  clear_has_msg();
}

TeamToController::~TeamToController() {
  // @@protoc_insertion_point(destructor:TeamToController)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamToController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signature_;
  if (has_msg()) {
    clear_msg();
  }
}

void TeamToController::ArenaDtor(void* object) {
  TeamToController* _this = reinterpret_cast< TeamToController* >(object);
  (void)_this;
}
void TeamToController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamToController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamToController& TeamToController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamToController_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  return *internal_default_instance();
}


void TeamToController::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:TeamToController)
  switch (msg_case()) {
    case kDesiredKeeper: {
      // No need to clear
      break;
    }
    case kAdvantageResponse: {
      // No need to clear
      break;
    }
    case kSubstituteBot: {
      // No need to clear
      break;
    }
    case kPing: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void TeamToController::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamToController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != nullptr);
    signature_->Clear();
  }
  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamToController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Signature signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 desired_keeper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_desired_keeper(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TeamToController.AdvantageResponse advantage_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TeamToController_AdvantageResponse_IsValid(val))) {
            _internal_set_advantage_response(static_cast<::TeamToController_AdvantageResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // bool substitute_bot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_substitute_bot(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_ping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamToController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeamToController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::signature(this), target, stream);
  }

  switch (msg_case()) {
    case kDesiredKeeper: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_desired_keeper(), target);
      break;
    }
    case kAdvantageResponse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_advantage_response(), target);
      break;
    }
    case kSubstituteBot: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_substitute_bot(), target);
      break;
    }
    case kPing: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ping(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamToController)
  return target;
}

size_t TeamToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamToController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Signature signature = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  switch (msg_case()) {
    // int32 desired_keeper = 2;
    case kDesiredKeeper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_desired_keeper());
      break;
    }
    // .TeamToController.AdvantageResponse advantage_response = 3;
    case kAdvantageResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_advantage_response());
      break;
    }
    // bool substitute_bot = 4;
    case kSubstituteBot: {
      total_size += 1 + 1;
      break;
    }
    // bool ping = 5;
    case kPing: {
      total_size += 1 + 1;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamToController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamToController)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamToController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamToController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamToController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamToController)
    MergeFrom(*source);
  }
}

void TeamToController::MergeFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_signature()) {
    _internal_mutable_signature()->::Signature::MergeFrom(from._internal_signature());
  }
  switch (from.msg_case()) {
    case kDesiredKeeper: {
      _internal_set_desired_keeper(from._internal_desired_keeper());
      break;
    }
    case kAdvantageResponse: {
      _internal_set_advantage_response(from._internal_advantage_response());
      break;
    }
    case kSubstituteBot: {
      _internal_set_substitute_bot(from._internal_substitute_bot());
      break;
    }
    case kPing: {
      _internal_set_ping(from._internal_ping());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void TeamToController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamToController::CopyFrom(const TeamToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamToController::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  return true;
}

void TeamToController::InternalSwap(TeamToController* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(signature_, other->signature_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamToController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControllerToTeam::InitAsDefaultInstance() {
  ::_ControllerToTeam_default_instance_.controller_reply_ = const_cast< ::ControllerReply*>(
      ::ControllerReply::internal_default_instance());
  ::_ControllerToTeam_default_instance_.advantage_choice_ = const_cast< ::AdvantageChoice*>(
      ::AdvantageChoice::internal_default_instance());
}
class ControllerToTeam::_Internal {
 public:
  static const ::ControllerReply& controller_reply(const ControllerToTeam* msg);
  static const ::AdvantageChoice& advantage_choice(const ControllerToTeam* msg);
};

const ::ControllerReply&
ControllerToTeam::_Internal::controller_reply(const ControllerToTeam* msg) {
  return *msg->msg_.controller_reply_;
}
const ::AdvantageChoice&
ControllerToTeam::_Internal::advantage_choice(const ControllerToTeam* msg) {
  return *msg->msg_.advantage_choice_;
}
void ControllerToTeam::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (controller_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controller_reply)->GetArena();
    if (message_arena != submessage_arena) {
      controller_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
    msg_.controller_reply_ = controller_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToTeam.controller_reply)
}
void ControllerToTeam::clear_controller_reply() {
  if (_internal_has_controller_reply()) {
    if (GetArena() == nullptr) {
      delete msg_.controller_reply_;
    }
    clear_has_msg();
  }
}
void ControllerToTeam::set_allocated_advantage_choice(::AdvantageChoice* advantage_choice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (advantage_choice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(advantage_choice);
    if (message_arena != submessage_arena) {
      advantage_choice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advantage_choice, submessage_arena);
    }
    set_has_advantage_choice();
    msg_.advantage_choice_ = advantage_choice;
  }
  // @@protoc_insertion_point(field_set_allocated:ControllerToTeam.advantage_choice)
}
ControllerToTeam::ControllerToTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ControllerToTeam)
}
ControllerToTeam::ControllerToTeam(const ControllerToTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kControllerReply: {
      _internal_mutable_controller_reply()->::ControllerReply::MergeFrom(from._internal_controller_reply());
      break;
    }
    case kAdvantageChoice: {
      _internal_mutable_advantage_choice()->::AdvantageChoice::MergeFrom(from._internal_advantage_choice());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ControllerToTeam)
}

void ControllerToTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  clear_has_msg();
}

ControllerToTeam::~ControllerToTeam() {
  // @@protoc_insertion_point(destructor:ControllerToTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControllerToTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ControllerToTeam::ArenaDtor(void* object) {
  ControllerToTeam* _this = reinterpret_cast< ControllerToTeam* >(object);
  (void)_this;
}
void ControllerToTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerToTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerToTeam& ControllerToTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControllerToTeam_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  return *internal_default_instance();
}


void ControllerToTeam::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ControllerToTeam)
  switch (msg_case()) {
    case kControllerReply: {
      if (GetArena() == nullptr) {
        delete msg_.controller_reply_;
      }
      break;
    }
    case kAdvantageChoice: {
      if (GetArena() == nullptr) {
        delete msg_.advantage_choice_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ControllerToTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerToTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ControllerReply controller_reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AdvantageChoice advantage_choice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_advantage_choice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerToTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControllerToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (msg_case()) {
    case kControllerReply: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::controller_reply(this), target, stream);
      break;
    }
    case kAdvantageChoice: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::advantage_choice(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerToTeam)
  return target;
}

size_t ControllerToTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerToTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .ControllerReply controller_reply = 1;
    case kControllerReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.controller_reply_);
      break;
    }
    // .AdvantageChoice advantage_choice = 2;
    case kAdvantageChoice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.advantage_choice_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerToTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControllerToTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerToTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerToTeam)
    MergeFrom(*source);
  }
}

void ControllerToTeam::MergeFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kControllerReply: {
      _internal_mutable_controller_reply()->::ControllerReply::MergeFrom(from._internal_controller_reply());
      break;
    }
    case kAdvantageChoice: {
      _internal_mutable_advantage_choice()->::AdvantageChoice::MergeFrom(from._internal_advantage_choice());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ControllerToTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToTeam::CopyFrom(const ControllerToTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToTeam::IsInitialized() const {
  switch (msg_case()) {
    case kControllerReply: {
      break;
    }
    case kAdvantageChoice: {
      if (has_advantage_choice()) {
        if (!this->advantage_choice().IsInitialized()) return false;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return true;
}

void ControllerToTeam::InternalSwap(ControllerToTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerToTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvantageChoice::InitAsDefaultInstance() {
  ::_AdvantageChoice_default_instance_._instance.get_mutable()->bot_crash_unique_ = const_cast< ::GameEvent_BotCrashUnique*>(
      ::GameEvent_BotCrashUnique::internal_default_instance());
  ::_AdvantageChoice_default_instance_._instance.get_mutable()->bot_pushed_bot_ = const_cast< ::GameEvent_BotPushedBot*>(
      ::GameEvent_BotPushedBot::internal_default_instance());
  ::_AdvantageChoice_default_instance_._instance.get_mutable()->attacker_touched_opponent_in_defense_area_ = const_cast< ::GameEvent_AttackerTouchedOpponentInDefenseArea*>(
      ::GameEvent_AttackerTouchedOpponentInDefenseArea::internal_default_instance());
}
class AdvantageChoice::_Internal {
 public:
  using HasBits = decltype(std::declval<AdvantageChoice>()._has_bits_);
  static void set_has_foul(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::GameEvent_BotCrashUnique& bot_crash_unique(const AdvantageChoice* msg);
  static void set_has_bot_crash_unique(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GameEvent_BotPushedBot& bot_pushed_bot(const AdvantageChoice* msg);
  static void set_has_bot_pushed_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area(const AdvantageChoice* msg);
  static void set_has_attacker_touched_opponent_in_defense_area(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::GameEvent_BotCrashUnique&
AdvantageChoice::_Internal::bot_crash_unique(const AdvantageChoice* msg) {
  return *msg->bot_crash_unique_;
}
const ::GameEvent_BotPushedBot&
AdvantageChoice::_Internal::bot_pushed_bot(const AdvantageChoice* msg) {
  return *msg->bot_pushed_bot_;
}
const ::GameEvent_AttackerTouchedOpponentInDefenseArea&
AdvantageChoice::_Internal::attacker_touched_opponent_in_defense_area(const AdvantageChoice* msg) {
  return *msg->attacker_touched_opponent_in_defense_area_;
}
void AdvantageChoice::clear_bot_crash_unique() {
  if (bot_crash_unique_ != nullptr) bot_crash_unique_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AdvantageChoice::clear_bot_pushed_bot() {
  if (bot_pushed_bot_ != nullptr) bot_pushed_bot_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void AdvantageChoice::clear_attacker_touched_opponent_in_defense_area() {
  if (attacker_touched_opponent_in_defense_area_ != nullptr) attacker_touched_opponent_in_defense_area_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AdvantageChoice::AdvantageChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AdvantageChoice)
}
AdvantageChoice::AdvantageChoice(const AdvantageChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bot_crash_unique()) {
    bot_crash_unique_ = new ::GameEvent_BotCrashUnique(*from.bot_crash_unique_);
  } else {
    bot_crash_unique_ = nullptr;
  }
  if (from._internal_has_bot_pushed_bot()) {
    bot_pushed_bot_ = new ::GameEvent_BotPushedBot(*from.bot_pushed_bot_);
  } else {
    bot_pushed_bot_ = nullptr;
  }
  if (from._internal_has_attacker_touched_opponent_in_defense_area()) {
    attacker_touched_opponent_in_defense_area_ = new ::GameEvent_AttackerTouchedOpponentInDefenseArea(*from.attacker_touched_opponent_in_defense_area_);
  } else {
    attacker_touched_opponent_in_defense_area_ = nullptr;
  }
  foul_ = from.foul_;
  // @@protoc_insertion_point(copy_constructor:AdvantageChoice)
}

void AdvantageChoice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvantageChoice_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  ::memset(&bot_crash_unique_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foul_) -
      reinterpret_cast<char*>(&bot_crash_unique_)) + sizeof(foul_));
}

AdvantageChoice::~AdvantageChoice() {
  // @@protoc_insertion_point(destructor:AdvantageChoice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdvantageChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bot_crash_unique_;
  if (this != internal_default_instance()) delete bot_pushed_bot_;
  if (this != internal_default_instance()) delete attacker_touched_opponent_in_defense_area_;
}

void AdvantageChoice::ArenaDtor(void* object) {
  AdvantageChoice* _this = reinterpret_cast< AdvantageChoice* >(object);
  (void)_this;
}
void AdvantageChoice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdvantageChoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvantageChoice& AdvantageChoice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvantageChoice_ssl_5fgame_5fcontroller_5fteam_2eproto.base);
  return *internal_default_instance();
}


void AdvantageChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:AdvantageChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bot_crash_unique_ != nullptr);
      bot_crash_unique_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bot_pushed_bot_ != nullptr);
      bot_pushed_bot_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(attacker_touched_opponent_in_defense_area_ != nullptr);
      attacker_touched_opponent_in_defense_area_->Clear();
    }
  }
  foul_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdvantageChoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .AdvantageChoice.Foul foul = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AdvantageChoice_Foul_IsValid(val))) {
            _internal_set_foul(static_cast<::AdvantageChoice_Foul>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_crash_unique(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_pushed_bot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_touched_opponent_in_defense_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvantageChoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdvantageChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AdvantageChoice.Foul foul = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_foul(), target);
  }

  // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bot_crash_unique(this), target, stream);
  }

  // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bot_pushed_bot(this), target, stream);
  }

  // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::attacker_touched_opponent_in_defense_area(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdvantageChoice)
  return target;
}

size_t AdvantageChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdvantageChoice)
  size_t total_size = 0;

  // required .AdvantageChoice.Foul foul = 1;
  if (_internal_has_foul()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_foul());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .GameEvent.BotCrashUnique bot_crash_unique = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bot_crash_unique_);
    }

    // optional .GameEvent.BotPushedBot bot_pushed_bot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bot_pushed_bot_);
    }

    // optional .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attacker_touched_opponent_in_defense_area_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvantageChoice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AdvantageChoice)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvantageChoice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvantageChoice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AdvantageChoice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AdvantageChoice)
    MergeFrom(*source);
  }
}

void AdvantageChoice::MergeFrom(const AdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdvantageChoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(from._internal_bot_crash_unique());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(from._internal_bot_pushed_bot());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(from._internal_attacker_touched_opponent_in_defense_area());
    }
    if (cached_has_bits & 0x00000008u) {
      foul_ = from.foul_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdvantageChoice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvantageChoice::CopyFrom(const AdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvantageChoice::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_bot_crash_unique()) {
    if (!bot_crash_unique_->IsInitialized()) return false;
  }
  if (_internal_has_bot_pushed_bot()) {
    if (!bot_pushed_bot_->IsInitialized()) return false;
  }
  if (_internal_has_attacker_touched_opponent_in_defense_area()) {
    if (!attacker_touched_opponent_in_defense_area_->IsInitialized()) return false;
  }
  return true;
}

void AdvantageChoice::InternalSwap(AdvantageChoice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdvantageChoice, foul_)
      + sizeof(AdvantageChoice::foul_)
      - PROTOBUF_FIELD_OFFSET(AdvantageChoice, bot_crash_unique_)>(
          reinterpret_cast<char*>(&bot_crash_unique_),
          reinterpret_cast<char*>(&other->bot_crash_unique_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvantageChoice::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TeamRegistration* Arena::CreateMaybeMessage< ::TeamRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeamRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::TeamToController* Arena::CreateMaybeMessage< ::TeamToController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeamToController >(arena);
}
template<> PROTOBUF_NOINLINE ::ControllerToTeam* Arena::CreateMaybeMessage< ::ControllerToTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControllerToTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::AdvantageChoice* Arena::CreateMaybeMessage< ::AdvantageChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AdvantageChoice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
