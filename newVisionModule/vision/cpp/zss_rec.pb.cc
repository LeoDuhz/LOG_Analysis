// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_rec.proto

#include "zss_rec.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_zss_5frec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Balls4Rec_zss_5frec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Msgs_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5frec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MaintainVision_zss_5frec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5frec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RecMessage_zss_5frec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5frec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Robot4Rec_zss_5frec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5frec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectedArea_zss_5frec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5frec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamRobotMsg_zss_5frec_2eproto;
namespace ZSS {
namespace Protocol {
class RecMessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecMessages> _instance;
} _RecMessages_default_instance_;
class RecMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecMessage> _instance;
} _RecMessage_default_instance_;
class SelectedAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectedArea> _instance;
} _SelectedArea_default_instance_;
class MaintainVisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaintainVision> _instance;
} _MaintainVision_default_instance_;
class TeamRobotMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamRobotMsg> _instance;
} _TeamRobotMsg_default_instance_;
class Robot4RecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot4Rec> _instance;
} _Robot4Rec_default_instance_;
class Balls4RecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Balls4Rec> _instance;
} _Balls4Rec_default_instance_;
}  // namespace Protocol
}  // namespace ZSS
static void InitDefaultsscc_info_Balls4Rec_zss_5frec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_Balls4Rec_default_instance_;
    new (ptr) ::ZSS::Protocol::Balls4Rec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::Balls4Rec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Balls4Rec_zss_5frec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Balls4Rec_zss_5frec_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_MaintainVision_zss_5frec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_MaintainVision_default_instance_;
    new (ptr) ::ZSS::Protocol::MaintainVision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::MaintainVision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MaintainVision_zss_5frec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MaintainVision_zss_5frec_2eproto}, {
      &scc_info_TeamRobotMsg_zss_5frec_2eproto.base,
      &scc_info_Balls4Rec_zss_5frec_2eproto.base,}};

static void InitDefaultsscc_info_RecMessage_zss_5frec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_RecMessage_default_instance_;
    new (ptr) ::ZSS::Protocol::RecMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::RecMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RecMessage_zss_5frec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RecMessage_zss_5frec_2eproto}, {
      &scc_info_SelectedArea_zss_5frec_2eproto.base,
      &scc_info_MaintainVision_zss_5frec_2eproto.base,
      &scc_info_Debug_Msgs_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_RecMessages_zss_5frec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_RecMessages_default_instance_;
    new (ptr) ::ZSS::Protocol::RecMessages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::RecMessages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecMessages_zss_5frec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecMessages_zss_5frec_2eproto}, {
      &scc_info_RecMessage_zss_5frec_2eproto.base,}};

static void InitDefaultsscc_info_Robot4Rec_zss_5frec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_Robot4Rec_default_instance_;
    new (ptr) ::ZSS::Protocol::Robot4Rec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::Robot4Rec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Robot4Rec_zss_5frec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Robot4Rec_zss_5frec_2eproto}, {}};

static void InitDefaultsscc_info_SelectedArea_zss_5frec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_SelectedArea_default_instance_;
    new (ptr) ::ZSS::Protocol::SelectedArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::SelectedArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectedArea_zss_5frec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectedArea_zss_5frec_2eproto}, {}};

static void InitDefaultsscc_info_TeamRobotMsg_zss_5frec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::Protocol::_TeamRobotMsg_default_instance_;
    new (ptr) ::ZSS::Protocol::TeamRobotMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::Protocol::TeamRobotMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamRobotMsg_zss_5frec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeamRobotMsg_zss_5frec_2eproto}, {
      &scc_info_Robot4Rec_zss_5frec_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zss_5frec_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zss_5frec_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zss_5frec_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zss_5frec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessages, recmsgs_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessage, ctrlc_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessage, selectedarea_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessage, maintainvision_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessage, debugmsgs_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::RecMessage, athenadebugmsgs_),
  3,
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::SelectedArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::SelectedArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::SelectedArea, maxx_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::SelectedArea, maxy_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::SelectedArea, minx_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::SelectedArea, miny_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MaintainVision, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MaintainVision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MaintainVision, lasttouch_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MaintainVision, lasttouchteam_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MaintainVision, processmsg_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MaintainVision, maintain_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::MaintainVision, balls_),
  1,
  2,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::TeamRobotMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::TeamRobotMsg, robot_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, posx_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, posy_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, angle_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, valid_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, imudir_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, imucleaned_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, battery_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, capacitance_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Robot4Rec, infrared_),
  0,
  1,
  2,
  6,
  3,
  7,
  4,
  5,
  8,
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Balls4Rec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Balls4Rec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Balls4Rec, size_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Balls4Rec, ball_),
  PROTOBUF_FIELD_OFFSET(::ZSS::Protocol::Balls4Rec, valid_),
  0,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ZSS::Protocol::RecMessages)},
  { 6, 16, sizeof(::ZSS::Protocol::RecMessage)},
  { 21, 30, sizeof(::ZSS::Protocol::SelectedArea)},
  { 34, 44, sizeof(::ZSS::Protocol::MaintainVision)},
  { 49, -1, sizeof(::ZSS::Protocol::TeamRobotMsg)},
  { 55, 69, sizeof(::ZSS::Protocol::Robot4Rec)},
  { 78, 86, sizeof(::ZSS::Protocol::Balls4Rec)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_RecMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_RecMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_SelectedArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_MaintainVision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_TeamRobotMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Robot4Rec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::Protocol::_Balls4Rec_default_instance_),
};

const char descriptor_table_protodef_zss_5frec_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rzss_rec.proto\022\014ZSS.Protocol\032\017zss_debug"
  ".proto\"8\n\013RecMessages\022)\n\007recMsgs\030\001 \003(\0132\030"
  ".ZSS.Protocol.RecMessage\"\343\001\n\nRecMessage\022"
  "\r\n\005ctrlC\030\001 \002(\010\0220\n\014selectedArea\030\002 \002(\0132\032.Z"
  "SS.Protocol.SelectedArea\0224\n\016maintainVisi"
  "on\030\003 \002(\0132\034.ZSS.Protocol.MaintainVision\022+"
  "\n\tdebugMsgs\030\004 \003(\0132\030.ZSS.Protocol.Debug_M"
  "sgs\0221\n\017athenaDebugMsgs\030\005 \001(\0132\030.ZSS.Proto"
  "col.Debug_Msgs\"F\n\014SelectedArea\022\014\n\004maxX\030\001"
  " \002(\002\022\014\n\004maxY\030\002 \002(\002\022\014\n\004minX\030\003 \002(\002\022\014\n\004minY"
  "\030\004 \002(\002\"\300\001\n\016MaintainVision\022\021\n\tlastTouch\030\001"
  " \002(\005\022\025\n\rlastTouchTeam\030\002 \002(\005\022.\n\nprocessMs"
  "g\030\003 \003(\0132\032.ZSS.Protocol.TeamRobotMsg\022,\n\010m"
  "aintain\030\004 \003(\0132\032.ZSS.Protocol.TeamRobotMs"
  "g\022&\n\005balls\030\005 \002(\0132\027.ZSS.Protocol.Balls4Re"
  "c\"6\n\014TeamRobotMsg\022&\n\005robot\030\001 \003(\0132\027.ZSS.P"
  "rotocol.Robot4Rec\"\241\001\n\tRobot4Rec\022\014\n\004posX\030"
  "\001 \002(\001\022\014\n\004posY\030\002 \002(\001\022\r\n\005angle\030\003 \002(\001\022\r\n\005va"
  "lid\030\004 \002(\010\022\016\n\006imuDir\030\005 \002(\001\022\022\n\nimucleaned\030"
  "\006 \002(\010\022\017\n\007battery\030\007 \002(\001\022\023\n\013capacitance\030\010 "
  "\002(\001\022\020\n\010infrared\030\t \001(\010\"K\n\tBalls4Rec\022\014\n\004si"
  "ze\030\001 \002(\005\022!\n\004ball\030\002 \003(\0132\023.ZSS.Protocol.Po"
  "int\022\r\n\005valid\030\003 \002(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zss_5frec_2eproto_deps[1] = {
  &::descriptor_table_zss_5fdebug_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zss_5frec_2eproto_sccs[7] = {
  &scc_info_Balls4Rec_zss_5frec_2eproto.base,
  &scc_info_MaintainVision_zss_5frec_2eproto.base,
  &scc_info_RecMessage_zss_5frec_2eproto.base,
  &scc_info_RecMessages_zss_5frec_2eproto.base,
  &scc_info_Robot4Rec_zss_5frec_2eproto.base,
  &scc_info_SelectedArea_zss_5frec_2eproto.base,
  &scc_info_TeamRobotMsg_zss_5frec_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zss_5frec_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5frec_2eproto = {
  false, false, descriptor_table_protodef_zss_5frec_2eproto, "zss_rec.proto", 898,
  &descriptor_table_zss_5frec_2eproto_once, descriptor_table_zss_5frec_2eproto_sccs, descriptor_table_zss_5frec_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_zss_5frec_2eproto::offsets,
  file_level_metadata_zss_5frec_2eproto, 7, file_level_enum_descriptors_zss_5frec_2eproto, file_level_service_descriptors_zss_5frec_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zss_5frec_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zss_5frec_2eproto)), true);
namespace ZSS {
namespace Protocol {

// ===================================================================

void RecMessages::InitAsDefaultInstance() {
}
class RecMessages::_Internal {
 public:
};

RecMessages::RecMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  recmsgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.RecMessages)
}
RecMessages::RecMessages(const RecMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      recmsgs_(from.recmsgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.RecMessages)
}

void RecMessages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecMessages_zss_5frec_2eproto.base);
}

RecMessages::~RecMessages() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.RecMessages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecMessages::ArenaDtor(void* object) {
  RecMessages* _this = reinterpret_cast< RecMessages* >(object);
  (void)_this;
}
void RecMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecMessages& RecMessages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecMessages_zss_5frec_2eproto.base);
  return *internal_default_instance();
}


void RecMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.RecMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recmsgs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recmsgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.RecMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recmsgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_recmsgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.RecMessages)
  return target;
}

size_t RecMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.RecMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.RecMessage recMsgs = 1;
  total_size += 1UL * this->_internal_recmsgs_size();
  for (const auto& msg : this->recmsgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.RecMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const RecMessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.RecMessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.RecMessages)
    MergeFrom(*source);
  }
}

void RecMessages::MergeFrom(const RecMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.RecMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recmsgs_.MergeFrom(from.recmsgs_);
}

void RecMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.RecMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecMessages::CopyFrom(const RecMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.RecMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecMessages::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(recmsgs_)) return false;
  return true;
}

void RecMessages::InternalSwap(RecMessages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recmsgs_.InternalSwap(&other->recmsgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecMessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecMessage::InitAsDefaultInstance() {
  ::ZSS::Protocol::_RecMessage_default_instance_._instance.get_mutable()->selectedarea_ = const_cast< ::ZSS::Protocol::SelectedArea*>(
      ::ZSS::Protocol::SelectedArea::internal_default_instance());
  ::ZSS::Protocol::_RecMessage_default_instance_._instance.get_mutable()->maintainvision_ = const_cast< ::ZSS::Protocol::MaintainVision*>(
      ::ZSS::Protocol::MaintainVision::internal_default_instance());
  ::ZSS::Protocol::_RecMessage_default_instance_._instance.get_mutable()->athenadebugmsgs_ = const_cast< ::ZSS::Protocol::Debug_Msgs*>(
      ::ZSS::Protocol::Debug_Msgs::internal_default_instance());
}
class RecMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RecMessage>()._has_bits_);
  static void set_has_ctrlc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ZSS::Protocol::SelectedArea& selectedarea(const RecMessage* msg);
  static void set_has_selectedarea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ZSS::Protocol::MaintainVision& maintainvision(const RecMessage* msg);
  static void set_has_maintainvision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ZSS::Protocol::Debug_Msgs& athenadebugmsgs(const RecMessage* msg);
  static void set_has_athenadebugmsgs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::ZSS::Protocol::SelectedArea&
RecMessage::_Internal::selectedarea(const RecMessage* msg) {
  return *msg->selectedarea_;
}
const ::ZSS::Protocol::MaintainVision&
RecMessage::_Internal::maintainvision(const RecMessage* msg) {
  return *msg->maintainvision_;
}
const ::ZSS::Protocol::Debug_Msgs&
RecMessage::_Internal::athenadebugmsgs(const RecMessage* msg) {
  return *msg->athenadebugmsgs_;
}
void RecMessage::clear_debugmsgs() {
  debugmsgs_.Clear();
}
void RecMessage::clear_athenadebugmsgs() {
  if (athenadebugmsgs_ != nullptr) athenadebugmsgs_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RecMessage::RecMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  debugmsgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.RecMessage)
}
RecMessage::RecMessage(const RecMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      debugmsgs_(from.debugmsgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selectedarea()) {
    selectedarea_ = new ::ZSS::Protocol::SelectedArea(*from.selectedarea_);
  } else {
    selectedarea_ = nullptr;
  }
  if (from._internal_has_maintainvision()) {
    maintainvision_ = new ::ZSS::Protocol::MaintainVision(*from.maintainvision_);
  } else {
    maintainvision_ = nullptr;
  }
  if (from._internal_has_athenadebugmsgs()) {
    athenadebugmsgs_ = new ::ZSS::Protocol::Debug_Msgs(*from.athenadebugmsgs_);
  } else {
    athenadebugmsgs_ = nullptr;
  }
  ctrlc_ = from.ctrlc_;
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.RecMessage)
}

void RecMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecMessage_zss_5frec_2eproto.base);
  ::memset(&selectedarea_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctrlc_) -
      reinterpret_cast<char*>(&selectedarea_)) + sizeof(ctrlc_));
}

RecMessage::~RecMessage() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.RecMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selectedarea_;
  if (this != internal_default_instance()) delete maintainvision_;
  if (this != internal_default_instance()) delete athenadebugmsgs_;
}

void RecMessage::ArenaDtor(void* object) {
  RecMessage* _this = reinterpret_cast< RecMessage* >(object);
  (void)_this;
}
void RecMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecMessage& RecMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecMessage_zss_5frec_2eproto.base);
  return *internal_default_instance();
}


void RecMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.RecMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debugmsgs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(selectedarea_ != nullptr);
      selectedarea_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(maintainvision_ != nullptr);
      maintainvision_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(athenadebugmsgs_ != nullptr);
      athenadebugmsgs_->Clear();
    }
  }
  ctrlc_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool ctrlC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctrlc(&has_bits);
          ctrlc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ZSS.Protocol.SelectedArea selectedArea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedarea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ZSS.Protocol.MaintainVision maintainVision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_maintainvision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debugmsgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ZSS.Protocol.Debug_Msgs athenaDebugMsgs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_athenadebugmsgs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.RecMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool ctrlC = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ctrlc(), target);
  }

  // required .ZSS.Protocol.SelectedArea selectedArea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selectedarea(this), target, stream);
  }

  // required .ZSS.Protocol.MaintainVision maintainVision = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::maintainvision(this), target, stream);
  }

  // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_debugmsgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_debugmsgs(i), target, stream);
  }

  // optional .ZSS.Protocol.Debug_Msgs athenaDebugMsgs = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::athenadebugmsgs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.RecMessage)
  return target;
}

size_t RecMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.RecMessage)
  size_t total_size = 0;

  if (_internal_has_selectedarea()) {
    // required .ZSS.Protocol.SelectedArea selectedArea = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectedarea_);
  }

  if (_internal_has_maintainvision()) {
    // required .ZSS.Protocol.MaintainVision maintainVision = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maintainvision_);
  }

  if (_internal_has_ctrlc()) {
    // required bool ctrlC = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RecMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.RecMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .ZSS.Protocol.SelectedArea selectedArea = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectedarea_);

    // required .ZSS.Protocol.MaintainVision maintainVision = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maintainvision_);

    // required bool ctrlC = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Debug_Msgs debugMsgs = 4;
  total_size += 1UL * this->_internal_debugmsgs_size();
  for (const auto& msg : this->debugmsgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ZSS.Protocol.Debug_Msgs athenaDebugMsgs = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *athenadebugmsgs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.RecMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RecMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.RecMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.RecMessage)
    MergeFrom(*source);
  }
}

void RecMessage::MergeFrom(const RecMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.RecMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debugmsgs_.MergeFrom(from.debugmsgs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_selectedarea()->::ZSS::Protocol::SelectedArea::MergeFrom(from._internal_selectedarea());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_maintainvision()->::ZSS::Protocol::MaintainVision::MergeFrom(from._internal_maintainvision());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_athenadebugmsgs()->::ZSS::Protocol::Debug_Msgs::MergeFrom(from._internal_athenadebugmsgs());
    }
    if (cached_has_bits & 0x00000008u) {
      ctrlc_ = from.ctrlc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.RecMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecMessage::CopyFrom(const RecMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.RecMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(debugmsgs_)) return false;
  if (_internal_has_selectedarea()) {
    if (!selectedarea_->IsInitialized()) return false;
  }
  if (_internal_has_maintainvision()) {
    if (!maintainvision_->IsInitialized()) return false;
  }
  if (_internal_has_athenadebugmsgs()) {
    if (!athenadebugmsgs_->IsInitialized()) return false;
  }
  return true;
}

void RecMessage::InternalSwap(RecMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  debugmsgs_.InternalSwap(&other->debugmsgs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecMessage, ctrlc_)
      + sizeof(RecMessage::ctrlc_)
      - PROTOBUF_FIELD_OFFSET(RecMessage, selectedarea_)>(
          reinterpret_cast<char*>(&selectedarea_),
          reinterpret_cast<char*>(&other->selectedarea_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectedArea::InitAsDefaultInstance() {
}
class SelectedArea::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectedArea>()._has_bits_);
  static void set_has_maxx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_miny(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

SelectedArea::SelectedArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.SelectedArea)
}
SelectedArea::SelectedArea(const SelectedArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maxx_, &from.maxx_,
    static_cast<size_t>(reinterpret_cast<char*>(&miny_) -
    reinterpret_cast<char*>(&maxx_)) + sizeof(miny_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.SelectedArea)
}

void SelectedArea::SharedCtor() {
  ::memset(&maxx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miny_) -
      reinterpret_cast<char*>(&maxx_)) + sizeof(miny_));
}

SelectedArea::~SelectedArea() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.SelectedArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectedArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectedArea::ArenaDtor(void* object) {
  SelectedArea* _this = reinterpret_cast< SelectedArea* >(object);
  (void)_this;
}
void SelectedArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectedArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectedArea& SelectedArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectedArea_zss_5frec_2eproto.base);
  return *internal_default_instance();
}


void SelectedArea::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.SelectedArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&maxx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&miny_) -
        reinterpret_cast<char*>(&maxx_)) + sizeof(miny_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectedArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float maxX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_maxx(&has_bits);
          maxx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float maxY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_maxy(&has_bits);
          maxy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float minX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_minx(&has_bits);
          minx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float minY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_miny(&has_bits);
          miny_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectedArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.SelectedArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float maxX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_maxx(), target);
  }

  // required float maxY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_maxy(), target);
  }

  // required float minX = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_minx(), target);
  }

  // required float minY = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_miny(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.SelectedArea)
  return target;
}

size_t SelectedArea::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.SelectedArea)
  size_t total_size = 0;

  if (_internal_has_maxx()) {
    // required float maxX = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_maxy()) {
    // required float maxY = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_minx()) {
    // required float minX = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_miny()) {
    // required float minY = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SelectedArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.SelectedArea)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float maxX = 1;
    total_size += 1 + 4;

    // required float maxY = 2;
    total_size += 1 + 4;

    // required float minX = 3;
    total_size += 1 + 4;

    // required float minY = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectedArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.SelectedArea)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectedArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectedArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.SelectedArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.SelectedArea)
    MergeFrom(*source);
  }
}

void SelectedArea::MergeFrom(const SelectedArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.SelectedArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      maxx_ = from.maxx_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxy_ = from.maxy_;
    }
    if (cached_has_bits & 0x00000004u) {
      minx_ = from.minx_;
    }
    if (cached_has_bits & 0x00000008u) {
      miny_ = from.miny_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SelectedArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.SelectedArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectedArea::CopyFrom(const SelectedArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.SelectedArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectedArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SelectedArea::InternalSwap(SelectedArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectedArea, miny_)
      + sizeof(SelectedArea::miny_)
      - PROTOBUF_FIELD_OFFSET(SelectedArea, maxx_)>(
          reinterpret_cast<char*>(&maxx_),
          reinterpret_cast<char*>(&other->maxx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectedArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaintainVision::InitAsDefaultInstance() {
  ::ZSS::Protocol::_MaintainVision_default_instance_._instance.get_mutable()->balls_ = const_cast< ::ZSS::Protocol::Balls4Rec*>(
      ::ZSS::Protocol::Balls4Rec::internal_default_instance());
}
class MaintainVision::_Internal {
 public:
  using HasBits = decltype(std::declval<MaintainVision>()._has_bits_);
  static void set_has_lasttouch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lasttouchteam(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ZSS::Protocol::Balls4Rec& balls(const MaintainVision* msg);
  static void set_has_balls(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::ZSS::Protocol::Balls4Rec&
MaintainVision::_Internal::balls(const MaintainVision* msg) {
  return *msg->balls_;
}
MaintainVision::MaintainVision(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  processmsg_(arena),
  maintain_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.MaintainVision)
}
MaintainVision::MaintainVision(const MaintainVision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      processmsg_(from.processmsg_),
      maintain_(from.maintain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_balls()) {
    balls_ = new ::ZSS::Protocol::Balls4Rec(*from.balls_);
  } else {
    balls_ = nullptr;
  }
  ::memcpy(&lasttouch_, &from.lasttouch_,
    static_cast<size_t>(reinterpret_cast<char*>(&lasttouchteam_) -
    reinterpret_cast<char*>(&lasttouch_)) + sizeof(lasttouchteam_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.MaintainVision)
}

void MaintainVision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MaintainVision_zss_5frec_2eproto.base);
  ::memset(&balls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lasttouchteam_) -
      reinterpret_cast<char*>(&balls_)) + sizeof(lasttouchteam_));
}

MaintainVision::~MaintainVision() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.MaintainVision)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaintainVision::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete balls_;
}

void MaintainVision::ArenaDtor(void* object) {
  MaintainVision* _this = reinterpret_cast< MaintainVision* >(object);
  (void)_this;
}
void MaintainVision::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaintainVision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaintainVision& MaintainVision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaintainVision_zss_5frec_2eproto.base);
  return *internal_default_instance();
}


void MaintainVision::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.MaintainVision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processmsg_.Clear();
  maintain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(balls_ != nullptr);
    balls_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&lasttouch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lasttouchteam_) -
        reinterpret_cast<char*>(&lasttouch_)) + sizeof(lasttouchteam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaintainVision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 lastTouch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lasttouch(&has_bits);
          lasttouch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 lastTouchTeam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lasttouchteam(&has_bits);
          lasttouchteam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maintain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required .ZSS.Protocol.Balls4Rec balls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_balls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaintainVision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.MaintainVision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 lastTouch = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lasttouch(), target);
  }

  // required int32 lastTouchTeam = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lasttouchteam(), target);
  }

  // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_processmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_processmsg(i), target, stream);
  }

  // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_maintain_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_maintain(i), target, stream);
  }

  // required .ZSS.Protocol.Balls4Rec balls = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::balls(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.MaintainVision)
  return target;
}

size_t MaintainVision::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.MaintainVision)
  size_t total_size = 0;

  if (_internal_has_balls()) {
    // required .ZSS.Protocol.Balls4Rec balls = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balls_);
  }

  if (_internal_has_lasttouch()) {
    // required int32 lastTouch = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lasttouch());
  }

  if (_internal_has_lasttouchteam()) {
    // required int32 lastTouchTeam = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lasttouchteam());
  }

  return total_size;
}
size_t MaintainVision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.MaintainVision)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ZSS.Protocol.Balls4Rec balls = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *balls_);

    // required int32 lastTouch = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lasttouch());

    // required int32 lastTouchTeam = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lasttouchteam());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.TeamRobotMsg processMsg = 3;
  total_size += 1UL * this->_internal_processmsg_size();
  for (const auto& msg : this->processmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ZSS.Protocol.TeamRobotMsg maintain = 4;
  total_size += 1UL * this->_internal_maintain_size();
  for (const auto& msg : this->maintain_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaintainVision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.MaintainVision)
  GOOGLE_DCHECK_NE(&from, this);
  const MaintainVision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaintainVision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.MaintainVision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.MaintainVision)
    MergeFrom(*source);
  }
}

void MaintainVision::MergeFrom(const MaintainVision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.MaintainVision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processmsg_.MergeFrom(from.processmsg_);
  maintain_.MergeFrom(from.maintain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_balls()->::ZSS::Protocol::Balls4Rec::MergeFrom(from._internal_balls());
    }
    if (cached_has_bits & 0x00000002u) {
      lasttouch_ = from.lasttouch_;
    }
    if (cached_has_bits & 0x00000004u) {
      lasttouchteam_ = from.lasttouchteam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaintainVision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.MaintainVision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaintainVision::CopyFrom(const MaintainVision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.MaintainVision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaintainVision::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(processmsg_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(maintain_)) return false;
  if (_internal_has_balls()) {
    if (!balls_->IsInitialized()) return false;
  }
  return true;
}

void MaintainVision::InternalSwap(MaintainVision* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  processmsg_.InternalSwap(&other->processmsg_);
  maintain_.InternalSwap(&other->maintain_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaintainVision, lasttouchteam_)
      + sizeof(MaintainVision::lasttouchteam_)
      - PROTOBUF_FIELD_OFFSET(MaintainVision, balls_)>(
          reinterpret_cast<char*>(&balls_),
          reinterpret_cast<char*>(&other->balls_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaintainVision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamRobotMsg::InitAsDefaultInstance() {
}
class TeamRobotMsg::_Internal {
 public:
};

TeamRobotMsg::TeamRobotMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robot_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.TeamRobotMsg)
}
TeamRobotMsg::TeamRobotMsg(const TeamRobotMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      robot_(from.robot_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.TeamRobotMsg)
}

void TeamRobotMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamRobotMsg_zss_5frec_2eproto.base);
}

TeamRobotMsg::~TeamRobotMsg() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.TeamRobotMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeamRobotMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TeamRobotMsg::ArenaDtor(void* object) {
  TeamRobotMsg* _this = reinterpret_cast< TeamRobotMsg* >(object);
  (void)_this;
}
void TeamRobotMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeamRobotMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamRobotMsg& TeamRobotMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamRobotMsg_zss_5frec_2eproto.base);
  return *internal_default_instance();
}


void TeamRobotMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.TeamRobotMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamRobotMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ZSS.Protocol.Robot4Rec robot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamRobotMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.TeamRobotMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot4Rec robot = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_robot(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.TeamRobotMsg)
  return target;
}

size_t TeamRobotMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.TeamRobotMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Robot4Rec robot = 1;
  total_size += 1UL * this->_internal_robot_size();
  for (const auto& msg : this->robot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamRobotMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.TeamRobotMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRobotMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamRobotMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.TeamRobotMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.TeamRobotMsg)
    MergeFrom(*source);
  }
}

void TeamRobotMsg::MergeFrom(const TeamRobotMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.TeamRobotMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_.MergeFrom(from.robot_);
}

void TeamRobotMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.TeamRobotMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRobotMsg::CopyFrom(const TeamRobotMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.TeamRobotMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRobotMsg::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robot_)) return false;
  return true;
}

void TeamRobotMsg::InternalSwap(TeamRobotMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_.InternalSwap(&other->robot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamRobotMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Robot4Rec::InitAsDefaultInstance() {
}
class Robot4Rec::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot4Rec>()._has_bits_);
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_imudir(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_imucleaned(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_capacitance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_infrared(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

Robot4Rec::Robot4Rec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.Robot4Rec)
}
Robot4Rec::Robot4Rec(const Robot4Rec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&infrared_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(infrared_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot4Rec)
}

void Robot4Rec::SharedCtor() {
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&infrared_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(infrared_));
}

Robot4Rec::~Robot4Rec() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot4Rec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot4Rec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robot4Rec::ArenaDtor(void* object) {
  Robot4Rec* _this = reinterpret_cast< Robot4Rec* >(object);
  (void)_this;
}
void Robot4Rec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot4Rec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot4Rec& Robot4Rec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot4Rec_zss_5frec_2eproto.base);
  return *internal_default_instance();
}


void Robot4Rec::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Robot4Rec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&posx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imucleaned_) -
        reinterpret_cast<char*>(&posx_)) + sizeof(imucleaned_));
  }
  infrared_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot4Rec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_posx(&has_bits);
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_posy(&has_bits);
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double imuDir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_imudir(&has_bits);
          imudir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool imucleaned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_imucleaned(&has_bits);
          imucleaned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double battery = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_battery(&has_bits);
          battery_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double capacitance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_capacitance(&has_bits);
          capacitance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool infrared = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_infrared(&has_bits);
          infrared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot4Rec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot4Rec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double posX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_posx(), target);
  }

  // required double posY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_posy(), target);
  }

  // required double angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle(), target);
  }

  // required bool valid = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_valid(), target);
  }

  // required double imuDir = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_imudir(), target);
  }

  // required bool imucleaned = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_imucleaned(), target);
  }

  // required double battery = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_battery(), target);
  }

  // required double capacitance = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_capacitance(), target);
  }

  // optional bool infrared = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_infrared(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot4Rec)
  return target;
}

size_t Robot4Rec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Robot4Rec)
  size_t total_size = 0;

  if (_internal_has_posx()) {
    // required double posX = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_posy()) {
    // required double posY = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_angle()) {
    // required double angle = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_imudir()) {
    // required double imuDir = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_battery()) {
    // required double battery = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_capacitance()) {
    // required double capacitance = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_valid()) {
    // required bool valid = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_imucleaned()) {
    // required bool imucleaned = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Robot4Rec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Robot4Rec)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required double posX = 1;
    total_size += 1 + 8;

    // required double posY = 2;
    total_size += 1 + 8;

    // required double angle = 3;
    total_size += 1 + 8;

    // required double imuDir = 5;
    total_size += 1 + 8;

    // required double battery = 7;
    total_size += 1 + 8;

    // required double capacitance = 8;
    total_size += 1 + 8;

    // required bool valid = 4;
    total_size += 1 + 1;

    // required bool imucleaned = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool infrared = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot4Rec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Robot4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot4Rec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot4Rec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Robot4Rec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Robot4Rec)
    MergeFrom(*source);
  }
}

void Robot4Rec::MergeFrom(const Robot4Rec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Robot4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000002u) {
      posy_ = from.posy_;
    }
    if (cached_has_bits & 0x00000004u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      imudir_ = from.imudir_;
    }
    if (cached_has_bits & 0x00000010u) {
      battery_ = from.battery_;
    }
    if (cached_has_bits & 0x00000020u) {
      capacitance_ = from.capacitance_;
    }
    if (cached_has_bits & 0x00000040u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      imucleaned_ = from.imucleaned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_infrared(from._internal_infrared());
  }
}

void Robot4Rec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Robot4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot4Rec::CopyFrom(const Robot4Rec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Robot4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot4Rec::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Robot4Rec::InternalSwap(Robot4Rec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot4Rec, infrared_)
      + sizeof(Robot4Rec::infrared_)
      - PROTOBUF_FIELD_OFFSET(Robot4Rec, posx_)>(
          reinterpret_cast<char*>(&posx_),
          reinterpret_cast<char*>(&other->posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot4Rec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Balls4Rec::InitAsDefaultInstance() {
}
class Balls4Rec::_Internal {
 public:
  using HasBits = decltype(std::declval<Balls4Rec>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

void Balls4Rec::clear_ball() {
  ball_.Clear();
}
Balls4Rec::Balls4Rec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ball_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.Protocol.Balls4Rec)
}
Balls4Rec::Balls4Rec(const Balls4Rec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ball_(from.ball_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&size_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Balls4Rec)
}

void Balls4Rec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Balls4Rec_zss_5frec_2eproto.base);
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&size_)) + sizeof(valid_));
}

Balls4Rec::~Balls4Rec() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Balls4Rec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Balls4Rec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Balls4Rec::ArenaDtor(void* object) {
  Balls4Rec* _this = reinterpret_cast< Balls4Rec* >(object);
  (void)_this;
}
void Balls4Rec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Balls4Rec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Balls4Rec& Balls4Rec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Balls4Rec_zss_5frec_2eproto.base);
  return *internal_default_instance();
}


void Balls4Rec::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.Protocol.Balls4Rec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ball_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&size_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Balls4Rec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ZSS.Protocol.Point ball = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ball(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Balls4Rec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Balls4Rec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_size(), target);
  }

  // repeated .ZSS.Protocol.Point ball = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ball_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ball(i), target, stream);
  }

  // required bool valid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Balls4Rec)
  return target;
}

size_t Balls4Rec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZSS.Protocol.Balls4Rec)
  size_t total_size = 0;

  if (_internal_has_size()) {
    // required int32 size = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (_internal_has_valid()) {
    // required bool valid = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Balls4Rec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.Protocol.Balls4Rec)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 size = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());

    // required bool valid = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.Protocol.Point ball = 2;
  total_size += 1UL * this->_internal_ball_size();
  for (const auto& msg : this->ball_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Balls4Rec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.Protocol.Balls4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  const Balls4Rec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Balls4Rec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.Protocol.Balls4Rec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.Protocol.Balls4Rec)
    MergeFrom(*source);
  }
}

void Balls4Rec::MergeFrom(const Balls4Rec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.Protocol.Balls4Rec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ball_.MergeFrom(from.ball_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000002u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Balls4Rec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.Protocol.Balls4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balls4Rec::CopyFrom(const Balls4Rec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.Protocol.Balls4Rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balls4Rec::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ball_)) return false;
  return true;
}

void Balls4Rec::InternalSwap(Balls4Rec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ball_.InternalSwap(&other->ball_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Balls4Rec, valid_)
      + sizeof(Balls4Rec::valid_)
      - PROTOBUF_FIELD_OFFSET(Balls4Rec, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Balls4Rec::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::RecMessages* Arena::CreateMaybeMessage< ::ZSS::Protocol::RecMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::RecMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::RecMessage* Arena::CreateMaybeMessage< ::ZSS::Protocol::RecMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::RecMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::SelectedArea* Arena::CreateMaybeMessage< ::ZSS::Protocol::SelectedArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::SelectedArea >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::MaintainVision* Arena::CreateMaybeMessage< ::ZSS::Protocol::MaintainVision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::MaintainVision >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::TeamRobotMsg* Arena::CreateMaybeMessage< ::ZSS::Protocol::TeamRobotMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::TeamRobotMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Robot4Rec* Arena::CreateMaybeMessage< ::ZSS::Protocol::Robot4Rec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::Robot4Rec >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::Protocol::Balls4Rec* Arena::CreateMaybeMessage< ::ZSS::Protocol::Balls4Rec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::Protocol::Balls4Rec >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
