// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_labeler_data.proto

#include "log_labeler_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_log_5flabeler_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LabelerFrame_log_5flabeler_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5freferee_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Referee_ssl_5freferee_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fwrapper_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SSL_WrapperPacket_messages_5frobocup_5fssl_5fwrapper_2eproto;
class LabelerMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelerMetadata> _instance;
} _LabelerMetadata_default_instance_;
class LabelerFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelerFrame> _instance;
  const ::SSL_WrapperPacket* vision_frame_;
  const ::Referee* referee_frame_;
} _LabelerFrame_default_instance_;
class LabelerFrameGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelerFrameGroup> _instance;
} _LabelerFrameGroup_default_instance_;
static void InitDefaultsscc_info_LabelerFrame_log_5flabeler_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelerFrame_default_instance_;
    new (ptr) ::LabelerFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelerFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LabelerFrame_log_5flabeler_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LabelerFrame_log_5flabeler_5fdata_2eproto}, {
      &scc_info_SSL_WrapperPacket_messages_5frobocup_5fssl_5fwrapper_2eproto.base,
      &scc_info_Referee_ssl_5freferee_2eproto.base,}};

static void InitDefaultsscc_info_LabelerFrameGroup_log_5flabeler_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelerFrameGroup_default_instance_;
    new (ptr) ::LabelerFrameGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelerFrameGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelerFrameGroup_log_5flabeler_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelerFrameGroup_log_5flabeler_5fdata_2eproto}, {
      &scc_info_LabelerFrame_log_5flabeler_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_LabelerMetadata_log_5flabeler_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LabelerMetadata_default_instance_;
    new (ptr) ::LabelerMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabelerMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelerMetadata_log_5flabeler_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelerMetadata_log_5flabeler_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_log_5flabeler_5fdata_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_log_5flabeler_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_log_5flabeler_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_log_5flabeler_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelerMetadata, num_cameras_),
  PROTOBUF_FIELD_OFFSET(::LabelerMetadata, message_offsets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelerFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::LabelerFrame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelerFrame, timestamp_),
  offsetof(::LabelerFrameDefaultTypeInternal, vision_frame_),
  offsetof(::LabelerFrameDefaultTypeInternal, referee_frame_),
  PROTOBUF_FIELD_OFFSET(::LabelerFrame, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabelerFrameGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabelerFrameGroup, frames_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LabelerMetadata)},
  { 7, -1, sizeof(::LabelerFrame)},
  { 16, -1, sizeof(::LabelerFrameGroup)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelerMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelerFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LabelerFrameGroup_default_instance_),
};

const char descriptor_table_protodef_log_5flabeler_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026log_labeler_data.proto\032\"messages_roboc"
  "up_ssl_wrapper.proto\032\021ssl_referee.proto\""
  "\?\n\017LabelerMetadata\022\023\n\013num_cameras\030\001 \001(\r\022"
  "\027\n\017message_offsets\030\002 \003(\004\"y\n\014LabelerFrame"
  "\022\021\n\ttimestamp\030\001 \001(\004\022*\n\014vision_frame\030\002 \001("
  "\0132\022.SSL_WrapperPacketH\000\022!\n\rreferee_frame"
  "\030\003 \001(\0132\010.RefereeH\000B\007\n\005frame\"2\n\021LabelerFr"
  "ameGroup\022\035\n\006frames\030\001 \003(\0132\r.LabelerFrameb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_log_5flabeler_5fdata_2eproto_deps[2] = {
  &::descriptor_table_messages_5frobocup_5fssl_5fwrapper_2eproto,
  &::descriptor_table_ssl_5freferee_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_log_5flabeler_5fdata_2eproto_sccs[3] = {
  &scc_info_LabelerFrame_log_5flabeler_5fdata_2eproto.base,
  &scc_info_LabelerFrameGroup_log_5flabeler_5fdata_2eproto.base,
  &scc_info_LabelerMetadata_log_5flabeler_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_log_5flabeler_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_log_5flabeler_5fdata_2eproto = {
  false, false, descriptor_table_protodef_log_5flabeler_5fdata_2eproto, "log_labeler_data.proto", 327,
  &descriptor_table_log_5flabeler_5fdata_2eproto_once, descriptor_table_log_5flabeler_5fdata_2eproto_sccs, descriptor_table_log_5flabeler_5fdata_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_log_5flabeler_5fdata_2eproto::offsets,
  file_level_metadata_log_5flabeler_5fdata_2eproto, 3, file_level_enum_descriptors_log_5flabeler_5fdata_2eproto, file_level_service_descriptors_log_5flabeler_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_log_5flabeler_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_log_5flabeler_5fdata_2eproto)), true);

// ===================================================================

void LabelerMetadata::InitAsDefaultInstance() {
}
class LabelerMetadata::_Internal {
 public:
};

LabelerMetadata::LabelerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_offsets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelerMetadata)
}
LabelerMetadata::LabelerMetadata(const LabelerMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_offsets_(from.message_offsets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_cameras_ = from.num_cameras_;
  // @@protoc_insertion_point(copy_constructor:LabelerMetadata)
}

void LabelerMetadata::SharedCtor() {
  num_cameras_ = 0u;
}

LabelerMetadata::~LabelerMetadata() {
  // @@protoc_insertion_point(destructor:LabelerMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelerMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelerMetadata::ArenaDtor(void* object) {
  LabelerMetadata* _this = reinterpret_cast< LabelerMetadata* >(object);
  (void)_this;
}
void LabelerMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelerMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelerMetadata& LabelerMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelerMetadata_log_5flabeler_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LabelerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelerMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_offsets_.Clear();
  num_cameras_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelerMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_cameras = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_cameras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 message_offsets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_message_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_message_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelerMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelerMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_cameras = 1;
  if (this->num_cameras() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_cameras(), target);
  }

  // repeated uint64 message_offsets = 2;
  {
    int byte_size = _message_offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_message_offsets(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelerMetadata)
  return target;
}

size_t LabelerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelerMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 message_offsets = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->message_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _message_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 num_cameras = 1;
  if (this->num_cameras() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_cameras());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelerMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelerMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelerMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelerMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelerMetadata)
    MergeFrom(*source);
  }
}

void LabelerMetadata::MergeFrom(const LabelerMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelerMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_offsets_.MergeFrom(from.message_offsets_);
  if (from.num_cameras() != 0) {
    _internal_set_num_cameras(from._internal_num_cameras());
  }
}

void LabelerMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelerMetadata::CopyFrom(const LabelerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelerMetadata::IsInitialized() const {
  return true;
}

void LabelerMetadata::InternalSwap(LabelerMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_offsets_.InternalSwap(&other->message_offsets_);
  swap(num_cameras_, other->num_cameras_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelerMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelerFrame::InitAsDefaultInstance() {
  ::_LabelerFrame_default_instance_.vision_frame_ = const_cast< ::SSL_WrapperPacket*>(
      ::SSL_WrapperPacket::internal_default_instance());
  ::_LabelerFrame_default_instance_.referee_frame_ = const_cast< ::Referee*>(
      ::Referee::internal_default_instance());
}
class LabelerFrame::_Internal {
 public:
  static const ::SSL_WrapperPacket& vision_frame(const LabelerFrame* msg);
  static const ::Referee& referee_frame(const LabelerFrame* msg);
};

const ::SSL_WrapperPacket&
LabelerFrame::_Internal::vision_frame(const LabelerFrame* msg) {
  return *msg->frame_.vision_frame_;
}
const ::Referee&
LabelerFrame::_Internal::referee_frame(const LabelerFrame* msg) {
  return *msg->frame_.referee_frame_;
}
void LabelerFrame::set_allocated_vision_frame(::SSL_WrapperPacket* vision_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_frame();
  if (vision_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vision_frame)->GetArena();
    if (message_arena != submessage_arena) {
      vision_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vision_frame, submessage_arena);
    }
    set_has_vision_frame();
    frame_.vision_frame_ = vision_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:LabelerFrame.vision_frame)
}
void LabelerFrame::clear_vision_frame() {
  if (_internal_has_vision_frame()) {
    if (GetArena() == nullptr) {
      delete frame_.vision_frame_;
    }
    clear_has_frame();
  }
}
void LabelerFrame::set_allocated_referee_frame(::Referee* referee_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_frame();
  if (referee_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referee_frame)->GetArena();
    if (message_arena != submessage_arena) {
      referee_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referee_frame, submessage_arena);
    }
    set_has_referee_frame();
    frame_.referee_frame_ = referee_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:LabelerFrame.referee_frame)
}
void LabelerFrame::clear_referee_frame() {
  if (_internal_has_referee_frame()) {
    if (GetArena() == nullptr) {
      delete frame_.referee_frame_;
    }
    clear_has_frame();
  }
}
LabelerFrame::LabelerFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelerFrame)
}
LabelerFrame::LabelerFrame(const LabelerFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  clear_has_frame();
  switch (from.frame_case()) {
    case kVisionFrame: {
      _internal_mutable_vision_frame()->::SSL_WrapperPacket::MergeFrom(from._internal_vision_frame());
      break;
    }
    case kRefereeFrame: {
      _internal_mutable_referee_frame()->::Referee::MergeFrom(from._internal_referee_frame());
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LabelerFrame)
}

void LabelerFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelerFrame_log_5flabeler_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_ULONGLONG(0);
  clear_has_frame();
}

LabelerFrame::~LabelerFrame() {
  // @@protoc_insertion_point(destructor:LabelerFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelerFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_frame()) {
    clear_frame();
  }
}

void LabelerFrame::ArenaDtor(void* object) {
  LabelerFrame* _this = reinterpret_cast< LabelerFrame* >(object);
  (void)_this;
}
void LabelerFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelerFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelerFrame& LabelerFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelerFrame_log_5flabeler_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LabelerFrame::clear_frame() {
// @@protoc_insertion_point(one_of_clear_start:LabelerFrame)
  switch (frame_case()) {
    case kVisionFrame: {
      if (GetArena() == nullptr) {
        delete frame_.vision_frame_;
      }
      break;
    }
    case kRefereeFrame: {
      if (GetArena() == nullptr) {
        delete frame_.referee_frame_;
      }
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FRAME_NOT_SET;
}


void LabelerFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_ULONGLONG(0);
  clear_frame();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelerFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SSL_WrapperPacket vision_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vision_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Referee referee_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_referee_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelerFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelerFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .SSL_WrapperPacket vision_frame = 2;
  if (_internal_has_vision_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vision_frame(this), target, stream);
  }

  // .Referee referee_frame = 3;
  if (_internal_has_referee_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::referee_frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelerFrame)
  return target;
}

size_t LabelerFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelerFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  switch (frame_case()) {
    // .SSL_WrapperPacket vision_frame = 2;
    case kVisionFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_.vision_frame_);
      break;
    }
    // .Referee referee_frame = 3;
    case kRefereeFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_.referee_frame_);
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelerFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelerFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelerFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelerFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelerFrame)
    MergeFrom(*source);
  }
}

void LabelerFrame::MergeFrom(const LabelerFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelerFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.frame_case()) {
    case kVisionFrame: {
      _internal_mutable_vision_frame()->::SSL_WrapperPacket::MergeFrom(from._internal_vision_frame());
      break;
    }
    case kRefereeFrame: {
      _internal_mutable_referee_frame()->::Referee::MergeFrom(from._internal_referee_frame());
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
}

void LabelerFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelerFrame::CopyFrom(const LabelerFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelerFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelerFrame::IsInitialized() const {
  switch (frame_case()) {
    case kVisionFrame: {
      if (has_vision_frame()) {
        if (!this->vision_frame().IsInitialized()) return false;
      }
      break;
    }
    case kRefereeFrame: {
      if (has_referee_frame()) {
        if (!this->referee_frame().IsInitialized()) return false;
      }
      break;
    }
    case FRAME_NOT_SET: {
      break;
    }
  }
  return true;
}

void LabelerFrame::InternalSwap(LabelerFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(frame_, other->frame_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelerFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelerFrameGroup::InitAsDefaultInstance() {
}
class LabelerFrameGroup::_Internal {
 public:
};

LabelerFrameGroup::LabelerFrameGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabelerFrameGroup)
}
LabelerFrameGroup::LabelerFrameGroup(const LabelerFrameGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabelerFrameGroup)
}

void LabelerFrameGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelerFrameGroup_log_5flabeler_5fdata_2eproto.base);
}

LabelerFrameGroup::~LabelerFrameGroup() {
  // @@protoc_insertion_point(destructor:LabelerFrameGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelerFrameGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelerFrameGroup::ArenaDtor(void* object) {
  LabelerFrameGroup* _this = reinterpret_cast< LabelerFrameGroup* >(object);
  (void)_this;
}
void LabelerFrameGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelerFrameGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelerFrameGroup& LabelerFrameGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelerFrameGroup_log_5flabeler_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LabelerFrameGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:LabelerFrameGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelerFrameGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LabelerFrame frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelerFrameGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabelerFrameGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LabelerFrame frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabelerFrameGroup)
  return target;
}

size_t LabelerFrameGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabelerFrameGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LabelerFrame frames = 1;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelerFrameGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabelerFrameGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelerFrameGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelerFrameGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabelerFrameGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabelerFrameGroup)
    MergeFrom(*source);
  }
}

void LabelerFrameGroup::MergeFrom(const LabelerFrameGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabelerFrameGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void LabelerFrameGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabelerFrameGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelerFrameGroup::CopyFrom(const LabelerFrameGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabelerFrameGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelerFrameGroup::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(frames_)) return false;
  return true;
}

void LabelerFrameGroup::InternalSwap(LabelerFrameGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelerFrameGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LabelerMetadata* Arena::CreateMaybeMessage< ::LabelerMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelerFrame* Arena::CreateMaybeMessage< ::LabelerFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelerFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::LabelerFrameGroup* Arena::CreateMaybeMessage< ::LabelerFrameGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabelerFrameGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
