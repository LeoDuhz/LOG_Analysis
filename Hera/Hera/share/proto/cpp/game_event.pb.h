// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_event.proto

#ifndef PROTOBUF_game_5fevent_2eproto__INCLUDED
#define PROTOBUF_game_5fevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fevent_2eproto();
void protobuf_AssignDesc_game_5fevent_2eproto();
void protobuf_ShutdownFile_game_5fevent_2eproto();

class SSL_Referee_Game_Event;
class SSL_Referee_Game_Event_Originator;

enum SSL_Referee_Game_Event_GameEventType {
  SSL_Referee_Game_Event_GameEventType_UNKNOWN = 0,
  SSL_Referee_Game_Event_GameEventType_CUSTOM = 1,
  SSL_Referee_Game_Event_GameEventType_NUMBER_OF_PLAYERS = 2,
  SSL_Referee_Game_Event_GameEventType_BALL_LEFT_FIELD = 3,
  SSL_Referee_Game_Event_GameEventType_GOAL = 4,
  SSL_Referee_Game_Event_GameEventType_KICK_TIMEOUT = 5,
  SSL_Referee_Game_Event_GameEventType_NO_PROGRESS_IN_GAME = 6,
  SSL_Referee_Game_Event_GameEventType_BOT_COLLISION = 7,
  SSL_Referee_Game_Event_GameEventType_MULTIPLE_DEFENDER = 8,
  SSL_Referee_Game_Event_GameEventType_MULTIPLE_DEFENDER_PARTIALLY = 9,
  SSL_Referee_Game_Event_GameEventType_ATTACKER_IN_DEFENSE_AREA = 10,
  SSL_Referee_Game_Event_GameEventType_ICING = 11,
  SSL_Referee_Game_Event_GameEventType_BALL_SPEED = 12,
  SSL_Referee_Game_Event_GameEventType_ROBOT_STOP_SPEED = 13,
  SSL_Referee_Game_Event_GameEventType_BALL_DRIBBLING = 14,
  SSL_Referee_Game_Event_GameEventType_ATTACKER_TOUCH_KEEPER = 15,
  SSL_Referee_Game_Event_GameEventType_DOUBLE_TOUCH = 16,
  SSL_Referee_Game_Event_GameEventType_ATTACKER_TO_DEFENCE_AREA = 17,
  SSL_Referee_Game_Event_GameEventType_DEFENDER_TO_KICK_POINT_DISTANCE = 18,
  SSL_Referee_Game_Event_GameEventType_BALL_HOLDING = 19,
  SSL_Referee_Game_Event_GameEventType_INDIRECT_GOAL = 20,
  SSL_Referee_Game_Event_GameEventType_BALL_PLACEMENT_FAILED = 21,
  SSL_Referee_Game_Event_GameEventType_CHIP_ON_GOAL = 22
};
bool SSL_Referee_Game_Event_GameEventType_IsValid(int value);
const SSL_Referee_Game_Event_GameEventType SSL_Referee_Game_Event_GameEventType_GameEventType_MIN = SSL_Referee_Game_Event_GameEventType_UNKNOWN;
const SSL_Referee_Game_Event_GameEventType SSL_Referee_Game_Event_GameEventType_GameEventType_MAX = SSL_Referee_Game_Event_GameEventType_CHIP_ON_GOAL;
const int SSL_Referee_Game_Event_GameEventType_GameEventType_ARRAYSIZE = SSL_Referee_Game_Event_GameEventType_GameEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSL_Referee_Game_Event_GameEventType_descriptor();
inline const ::std::string& SSL_Referee_Game_Event_GameEventType_Name(SSL_Referee_Game_Event_GameEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSL_Referee_Game_Event_GameEventType_descriptor(), value);
}
inline bool SSL_Referee_Game_Event_GameEventType_Parse(
    const ::std::string& name, SSL_Referee_Game_Event_GameEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSL_Referee_Game_Event_GameEventType>(
    SSL_Referee_Game_Event_GameEventType_descriptor(), name, value);
}
enum SSL_Referee_Game_Event_Team {
  SSL_Referee_Game_Event_Team_TEAM_UNKNOWN = 0,
  SSL_Referee_Game_Event_Team_TEAM_YELLOW = 1,
  SSL_Referee_Game_Event_Team_TEAM_BLUE = 2
};
bool SSL_Referee_Game_Event_Team_IsValid(int value);
const SSL_Referee_Game_Event_Team SSL_Referee_Game_Event_Team_Team_MIN = SSL_Referee_Game_Event_Team_TEAM_UNKNOWN;
const SSL_Referee_Game_Event_Team SSL_Referee_Game_Event_Team_Team_MAX = SSL_Referee_Game_Event_Team_TEAM_BLUE;
const int SSL_Referee_Game_Event_Team_Team_ARRAYSIZE = SSL_Referee_Game_Event_Team_Team_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSL_Referee_Game_Event_Team_descriptor();
inline const ::std::string& SSL_Referee_Game_Event_Team_Name(SSL_Referee_Game_Event_Team value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSL_Referee_Game_Event_Team_descriptor(), value);
}
inline bool SSL_Referee_Game_Event_Team_Parse(
    const ::std::string& name, SSL_Referee_Game_Event_Team* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSL_Referee_Game_Event_Team>(
    SSL_Referee_Game_Event_Team_descriptor(), name, value);
}
// ===================================================================

class SSL_Referee_Game_Event_Originator : public ::google::protobuf::Message {
 public:
  SSL_Referee_Game_Event_Originator();
  virtual ~SSL_Referee_Game_Event_Originator();

  SSL_Referee_Game_Event_Originator(const SSL_Referee_Game_Event_Originator& from);

  inline SSL_Referee_Game_Event_Originator& operator=(const SSL_Referee_Game_Event_Originator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_Referee_Game_Event_Originator& default_instance();

  void Swap(SSL_Referee_Game_Event_Originator* other);

  // implements Message ----------------------------------------------

  SSL_Referee_Game_Event_Originator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_Referee_Game_Event_Originator& from);
  void MergeFrom(const SSL_Referee_Game_Event_Originator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SSL_Referee_Game_Event.Team team = 1;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline ::SSL_Referee_Game_Event_Team team() const;
  inline void set_team(::SSL_Referee_Game_Event_Team value);

  // optional uint32 botId = 2;
  inline bool has_botid() const;
  inline void clear_botid();
  static const int kBotIdFieldNumber = 2;
  inline ::google::protobuf::uint32 botid() const;
  inline void set_botid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SSL_Referee_Game_Event.Originator)
 private:
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_botid();
  inline void clear_has_botid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int team_;
  ::google::protobuf::uint32 botid_;
  friend void  protobuf_AddDesc_game_5fevent_2eproto();
  friend void protobuf_AssignDesc_game_5fevent_2eproto();
  friend void protobuf_ShutdownFile_game_5fevent_2eproto();

  void InitAsDefaultInstance();
  static SSL_Referee_Game_Event_Originator* default_instance_;
};
// -------------------------------------------------------------------

class SSL_Referee_Game_Event : public ::google::protobuf::Message {
 public:
  SSL_Referee_Game_Event();
  virtual ~SSL_Referee_Game_Event();

  SSL_Referee_Game_Event(const SSL_Referee_Game_Event& from);

  inline SSL_Referee_Game_Event& operator=(const SSL_Referee_Game_Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_Referee_Game_Event& default_instance();

  void Swap(SSL_Referee_Game_Event* other);

  // implements Message ----------------------------------------------

  SSL_Referee_Game_Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_Referee_Game_Event& from);
  void MergeFrom(const SSL_Referee_Game_Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SSL_Referee_Game_Event_Originator Originator;

  typedef SSL_Referee_Game_Event_GameEventType GameEventType;
  static const GameEventType UNKNOWN = SSL_Referee_Game_Event_GameEventType_UNKNOWN;
  static const GameEventType CUSTOM = SSL_Referee_Game_Event_GameEventType_CUSTOM;
  static const GameEventType NUMBER_OF_PLAYERS = SSL_Referee_Game_Event_GameEventType_NUMBER_OF_PLAYERS;
  static const GameEventType BALL_LEFT_FIELD = SSL_Referee_Game_Event_GameEventType_BALL_LEFT_FIELD;
  static const GameEventType GOAL = SSL_Referee_Game_Event_GameEventType_GOAL;
  static const GameEventType KICK_TIMEOUT = SSL_Referee_Game_Event_GameEventType_KICK_TIMEOUT;
  static const GameEventType NO_PROGRESS_IN_GAME = SSL_Referee_Game_Event_GameEventType_NO_PROGRESS_IN_GAME;
  static const GameEventType BOT_COLLISION = SSL_Referee_Game_Event_GameEventType_BOT_COLLISION;
  static const GameEventType MULTIPLE_DEFENDER = SSL_Referee_Game_Event_GameEventType_MULTIPLE_DEFENDER;
  static const GameEventType MULTIPLE_DEFENDER_PARTIALLY = SSL_Referee_Game_Event_GameEventType_MULTIPLE_DEFENDER_PARTIALLY;
  static const GameEventType ATTACKER_IN_DEFENSE_AREA = SSL_Referee_Game_Event_GameEventType_ATTACKER_IN_DEFENSE_AREA;
  static const GameEventType ICING = SSL_Referee_Game_Event_GameEventType_ICING;
  static const GameEventType BALL_SPEED = SSL_Referee_Game_Event_GameEventType_BALL_SPEED;
  static const GameEventType ROBOT_STOP_SPEED = SSL_Referee_Game_Event_GameEventType_ROBOT_STOP_SPEED;
  static const GameEventType BALL_DRIBBLING = SSL_Referee_Game_Event_GameEventType_BALL_DRIBBLING;
  static const GameEventType ATTACKER_TOUCH_KEEPER = SSL_Referee_Game_Event_GameEventType_ATTACKER_TOUCH_KEEPER;
  static const GameEventType DOUBLE_TOUCH = SSL_Referee_Game_Event_GameEventType_DOUBLE_TOUCH;
  static const GameEventType ATTACKER_TO_DEFENCE_AREA = SSL_Referee_Game_Event_GameEventType_ATTACKER_TO_DEFENCE_AREA;
  static const GameEventType DEFENDER_TO_KICK_POINT_DISTANCE = SSL_Referee_Game_Event_GameEventType_DEFENDER_TO_KICK_POINT_DISTANCE;
  static const GameEventType BALL_HOLDING = SSL_Referee_Game_Event_GameEventType_BALL_HOLDING;
  static const GameEventType INDIRECT_GOAL = SSL_Referee_Game_Event_GameEventType_INDIRECT_GOAL;
  static const GameEventType BALL_PLACEMENT_FAILED = SSL_Referee_Game_Event_GameEventType_BALL_PLACEMENT_FAILED;
  static const GameEventType CHIP_ON_GOAL = SSL_Referee_Game_Event_GameEventType_CHIP_ON_GOAL;
  static inline bool GameEventType_IsValid(int value) {
    return SSL_Referee_Game_Event_GameEventType_IsValid(value);
  }
  static const GameEventType GameEventType_MIN =
    SSL_Referee_Game_Event_GameEventType_GameEventType_MIN;
  static const GameEventType GameEventType_MAX =
    SSL_Referee_Game_Event_GameEventType_GameEventType_MAX;
  static const int GameEventType_ARRAYSIZE =
    SSL_Referee_Game_Event_GameEventType_GameEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GameEventType_descriptor() {
    return SSL_Referee_Game_Event_GameEventType_descriptor();
  }
  static inline const ::std::string& GameEventType_Name(GameEventType value) {
    return SSL_Referee_Game_Event_GameEventType_Name(value);
  }
  static inline bool GameEventType_Parse(const ::std::string& name,
      GameEventType* value) {
    return SSL_Referee_Game_Event_GameEventType_Parse(name, value);
  }

  typedef SSL_Referee_Game_Event_Team Team;
  static const Team TEAM_UNKNOWN = SSL_Referee_Game_Event_Team_TEAM_UNKNOWN;
  static const Team TEAM_YELLOW = SSL_Referee_Game_Event_Team_TEAM_YELLOW;
  static const Team TEAM_BLUE = SSL_Referee_Game_Event_Team_TEAM_BLUE;
  static inline bool Team_IsValid(int value) {
    return SSL_Referee_Game_Event_Team_IsValid(value);
  }
  static const Team Team_MIN =
    SSL_Referee_Game_Event_Team_Team_MIN;
  static const Team Team_MAX =
    SSL_Referee_Game_Event_Team_Team_MAX;
  static const int Team_ARRAYSIZE =
    SSL_Referee_Game_Event_Team_Team_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Team_descriptor() {
    return SSL_Referee_Game_Event_Team_descriptor();
  }
  static inline const ::std::string& Team_Name(Team value) {
    return SSL_Referee_Game_Event_Team_Name(value);
  }
  static inline bool Team_Parse(const ::std::string& name,
      Team* value) {
    return SSL_Referee_Game_Event_Team_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .SSL_Referee_Game_Event.GameEventType gameEventType = 1;
  inline bool has_gameeventtype() const;
  inline void clear_gameeventtype();
  static const int kGameEventTypeFieldNumber = 1;
  inline ::SSL_Referee_Game_Event_GameEventType gameeventtype() const;
  inline void set_gameeventtype(::SSL_Referee_Game_Event_GameEventType value);

  // optional .SSL_Referee_Game_Event.Originator originator = 2;
  inline bool has_originator() const;
  inline void clear_originator();
  static const int kOriginatorFieldNumber = 2;
  inline const ::SSL_Referee_Game_Event_Originator& originator() const;
  inline ::SSL_Referee_Game_Event_Originator* mutable_originator();
  inline ::SSL_Referee_Game_Event_Originator* release_originator();
  inline void set_allocated_originator(::SSL_Referee_Game_Event_Originator* originator);

  // optional string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:SSL_Referee_Game_Event)
 private:
  inline void set_has_gameeventtype();
  inline void clear_has_gameeventtype();
  inline void set_has_originator();
  inline void clear_has_originator();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SSL_Referee_Game_Event_Originator* originator_;
  ::std::string* message_;
  int gameeventtype_;
  friend void  protobuf_AddDesc_game_5fevent_2eproto();
  friend void protobuf_AssignDesc_game_5fevent_2eproto();
  friend void protobuf_ShutdownFile_game_5fevent_2eproto();

  void InitAsDefaultInstance();
  static SSL_Referee_Game_Event* default_instance_;
};
// ===================================================================


// ===================================================================

// SSL_Referee_Game_Event_Originator

// required .SSL_Referee_Game_Event.Team team = 1;
inline bool SSL_Referee_Game_Event_Originator::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_Referee_Game_Event_Originator::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_Referee_Game_Event_Originator::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_Referee_Game_Event_Originator::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::SSL_Referee_Game_Event_Team SSL_Referee_Game_Event_Originator::team() const {
  // @@protoc_insertion_point(field_get:SSL_Referee_Game_Event.Originator.team)
  return static_cast< ::SSL_Referee_Game_Event_Team >(team_);
}
inline void SSL_Referee_Game_Event_Originator::set_team(::SSL_Referee_Game_Event_Team value) {
  assert(::SSL_Referee_Game_Event_Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee_Game_Event.Originator.team)
}

// optional uint32 botId = 2;
inline bool SSL_Referee_Game_Event_Originator::has_botid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_Referee_Game_Event_Originator::set_has_botid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_Referee_Game_Event_Originator::clear_has_botid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_Referee_Game_Event_Originator::clear_botid() {
  botid_ = 0u;
  clear_has_botid();
}
inline ::google::protobuf::uint32 SSL_Referee_Game_Event_Originator::botid() const {
  // @@protoc_insertion_point(field_get:SSL_Referee_Game_Event.Originator.botId)
  return botid_;
}
inline void SSL_Referee_Game_Event_Originator::set_botid(::google::protobuf::uint32 value) {
  set_has_botid();
  botid_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee_Game_Event.Originator.botId)
}

// -------------------------------------------------------------------

// SSL_Referee_Game_Event

// required .SSL_Referee_Game_Event.GameEventType gameEventType = 1;
inline bool SSL_Referee_Game_Event::has_gameeventtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_Referee_Game_Event::set_has_gameeventtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_Referee_Game_Event::clear_has_gameeventtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_Referee_Game_Event::clear_gameeventtype() {
  gameeventtype_ = 0;
  clear_has_gameeventtype();
}
inline ::SSL_Referee_Game_Event_GameEventType SSL_Referee_Game_Event::gameeventtype() const {
  // @@protoc_insertion_point(field_get:SSL_Referee_Game_Event.gameEventType)
  return static_cast< ::SSL_Referee_Game_Event_GameEventType >(gameeventtype_);
}
inline void SSL_Referee_Game_Event::set_gameeventtype(::SSL_Referee_Game_Event_GameEventType value) {
  assert(::SSL_Referee_Game_Event_GameEventType_IsValid(value));
  set_has_gameeventtype();
  gameeventtype_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee_Game_Event.gameEventType)
}

// optional .SSL_Referee_Game_Event.Originator originator = 2;
inline bool SSL_Referee_Game_Event::has_originator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_Referee_Game_Event::set_has_originator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_Referee_Game_Event::clear_has_originator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_Referee_Game_Event::clear_originator() {
  if (originator_ != NULL) originator_->::SSL_Referee_Game_Event_Originator::Clear();
  clear_has_originator();
}
inline const ::SSL_Referee_Game_Event_Originator& SSL_Referee_Game_Event::originator() const {
  // @@protoc_insertion_point(field_get:SSL_Referee_Game_Event.originator)
  return originator_ != NULL ? *originator_ : *default_instance_->originator_;
}
inline ::SSL_Referee_Game_Event_Originator* SSL_Referee_Game_Event::mutable_originator() {
  set_has_originator();
  if (originator_ == NULL) originator_ = new ::SSL_Referee_Game_Event_Originator;
  // @@protoc_insertion_point(field_mutable:SSL_Referee_Game_Event.originator)
  return originator_;
}
inline ::SSL_Referee_Game_Event_Originator* SSL_Referee_Game_Event::release_originator() {
  clear_has_originator();
  ::SSL_Referee_Game_Event_Originator* temp = originator_;
  originator_ = NULL;
  return temp;
}
inline void SSL_Referee_Game_Event::set_allocated_originator(::SSL_Referee_Game_Event_Originator* originator) {
  delete originator_;
  originator_ = originator;
  if (originator) {
    set_has_originator();
  } else {
    clear_has_originator();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_Referee_Game_Event.originator)
}

// optional string message = 3;
inline bool SSL_Referee_Game_Event::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_Referee_Game_Event::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_Referee_Game_Event::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_Referee_Game_Event::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& SSL_Referee_Game_Event::message() const {
  // @@protoc_insertion_point(field_get:SSL_Referee_Game_Event.message)
  return *message_;
}
inline void SSL_Referee_Game_Event::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:SSL_Referee_Game_Event.message)
}
inline void SSL_Referee_Game_Event::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:SSL_Referee_Game_Event.message)
}
inline void SSL_Referee_Game_Event::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SSL_Referee_Game_Event.message)
}
inline ::std::string* SSL_Referee_Game_Event::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SSL_Referee_Game_Event.message)
  return message_;
}
inline ::std::string* SSL_Referee_Game_Event::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SSL_Referee_Game_Event::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_Referee_Game_Event.message)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SSL_Referee_Game_Event_GameEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_Referee_Game_Event_GameEventType>() {
  return ::SSL_Referee_Game_Event_GameEventType_descriptor();
}
template <> struct is_proto_enum< ::SSL_Referee_Game_Event_Team> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_Referee_Game_Event_Team>() {
  return ::SSL_Referee_Game_Event_Team_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fevent_2eproto__INCLUDED
