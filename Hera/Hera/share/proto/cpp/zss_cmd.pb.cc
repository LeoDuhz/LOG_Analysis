// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zss_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZSS {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* Robots_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robots_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robot_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robots_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robots_Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robot_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_Command_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zss_5fcmd_2eproto() {
  protobuf_AddDesc_zss_5fcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zss_cmd.proto");
  GOOGLE_CHECK(file != NULL);
  Robots_Status_descriptor_ = file->message_type(0);
  static const int Robots_Status_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Status, robots_status_),
  };
  Robots_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robots_Status_descriptor_,
      Robots_Status::default_instance_,
      Robots_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robots_Status));
  Robot_Status_descriptor_ = file->message_type(1);
  static const int Robot_Status_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, infrared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, flat_kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, chip_kick_),
  };
  Robot_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robot_Status_descriptor_,
      Robot_Status::default_instance_,
      Robot_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robot_Status));
  Robots_Command_descriptor_ = file->message_type(2);
  static const int Robots_Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Command, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Command, delay_),
  };
  Robots_Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robots_Command_descriptor_,
      Robots_Command::default_instance_,
      Robots_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robots_Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robots_Command));
  Robot_Command_descriptor_ = file->message_type(3);
  static const int Robot_Command_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, velocity_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, velocity_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, dribbler_spin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, current_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, target_angle_),
  };
  Robot_Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robot_Command_descriptor_,
      Robot_Command::default_instance_,
      Robot_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot_Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robot_Command));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zss_5fcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robots_Status_descriptor_, &Robots_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robot_Status_descriptor_, &Robot_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robots_Command_descriptor_, &Robots_Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robot_Command_descriptor_, &Robot_Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zss_5fcmd_2eproto() {
  delete Robots_Status::default_instance_;
  delete Robots_Status_reflection_;
  delete Robot_Status::default_instance_;
  delete Robot_Status_reflection_;
  delete Robots_Command::default_instance_;
  delete Robots_Command_reflection_;
  delete Robot_Command::default_instance_;
  delete Robot_Command_reflection_;
}

void protobuf_AddDesc_zss_5fcmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rzss_cmd.proto\022\014ZSS.Protocol\"B\n\rRobots_"
    "Status\0221\n\rrobots_status\030\001 \003(\0132\032.ZSS.Prot"
    "ocol.Robot_Status\"X\n\014Robot_Status\022\020\n\010rob"
    "ot_id\030\001 \002(\005\022\020\n\010infrared\030\002 \002(\010\022\021\n\tflat_ki"
    "ck\030\003 \002(\010\022\021\n\tchip_kick\030\004 \002(\010\"M\n\016Robots_Co"
    "mmand\022,\n\007command\030\001 \003(\0132\033.ZSS.Protocol.Ro"
    "bot_Command\022\r\n\005delay\030\002 \001(\005\"\276\001\n\rRobot_Com"
    "mand\022\020\n\010robot_id\030\001 \002(\005\022\022\n\nvelocity_x\030\002 \002"
    "(\002\022\022\n\nvelocity_y\030\003 \002(\002\022\022\n\nvelocity_r\030\004 \002"
    "(\002\022\014\n\004kick\030\005 \002(\010\022\r\n\005power\030\006 \002(\002\022\025\n\rdribb"
    "ler_spin\030\007 \002(\002\022\025\n\rcurrent_angle\030\010 \001(\002\022\024\n"
    "\014target_angle\030\t \001(\002", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zss_cmd.proto", &protobuf_RegisterTypes);
  Robots_Status::default_instance_ = new Robots_Status();
  Robot_Status::default_instance_ = new Robot_Status();
  Robots_Command::default_instance_ = new Robots_Command();
  Robot_Command::default_instance_ = new Robot_Command();
  Robots_Status::default_instance_->InitAsDefaultInstance();
  Robot_Status::default_instance_->InitAsDefaultInstance();
  Robots_Command::default_instance_->InitAsDefaultInstance();
  Robot_Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zss_5fcmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zss_5fcmd_2eproto {
  StaticDescriptorInitializer_zss_5fcmd_2eproto() {
    protobuf_AddDesc_zss_5fcmd_2eproto();
  }
} static_descriptor_initializer_zss_5fcmd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Robots_Status::kRobotsStatusFieldNumber;
#endif  // !_MSC_VER

Robots_Status::Robots_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robots_Status)
}

void Robots_Status::InitAsDefaultInstance() {
}

Robots_Status::Robots_Status(const Robots_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robots_Status)
}

void Robots_Status::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robots_Status::~Robots_Status() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robots_Status)
  SharedDtor();
}

void Robots_Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robots_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robots_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robots_Status_descriptor_;
}

const Robots_Status& Robots_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fcmd_2eproto();
  return *default_instance_;
}

Robots_Status* Robots_Status::default_instance_ = NULL;

Robots_Status* Robots_Status::New() const {
  return new Robots_Status;
}

void Robots_Status::Clear() {
  robots_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robots_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robots_Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
      case 1: {
        if (tag == 10) {
         parse_robots_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_robots_status;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robots_Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robots_Status)
  return false;
#undef DO_
}

void Robots_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robots_Status)
  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  for (int i = 0; i < this->robots_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robots_status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robots_Status)
}

::google::protobuf::uint8* Robots_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robots_Status)
  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  for (int i = 0; i < this->robots_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robots_status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robots_Status)
  return target;
}

int Robots_Status::ByteSize() const {
  int total_size = 0;

  // repeated .ZSS.Protocol.Robot_Status robots_status = 1;
  total_size += 1 * this->robots_status_size();
  for (int i = 0; i < this->robots_status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_status(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robots_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robots_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robots_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robots_Status::MergeFrom(const Robots_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  robots_status_.MergeFrom(from.robots_status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robots_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots_Status::CopyFrom(const Robots_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots_Status::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->robots_status())) return false;
  return true;
}

void Robots_Status::Swap(Robots_Status* other) {
  if (other != this) {
    robots_status_.Swap(&other->robots_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robots_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robots_Status_descriptor_;
  metadata.reflection = Robots_Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Robot_Status::kRobotIdFieldNumber;
const int Robot_Status::kInfraredFieldNumber;
const int Robot_Status::kFlatKickFieldNumber;
const int Robot_Status::kChipKickFieldNumber;
#endif  // !_MSC_VER

Robot_Status::Robot_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robot_Status)
}

void Robot_Status::InitAsDefaultInstance() {
}

Robot_Status::Robot_Status(const Robot_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot_Status)
}

void Robot_Status::SharedCtor() {
  _cached_size_ = 0;
  robot_id_ = 0;
  infrared_ = false;
  flat_kick_ = false;
  chip_kick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot_Status::~Robot_Status() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot_Status)
  SharedDtor();
}

void Robot_Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robot_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_Status_descriptor_;
}

const Robot_Status& Robot_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fcmd_2eproto();
  return *default_instance_;
}

Robot_Status* Robot_Status::default_instance_ = NULL;

Robot_Status* Robot_Status::New() const {
  return new Robot_Status;
}

void Robot_Status::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Robot_Status*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(robot_id_, chip_kick_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robot_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robot_Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 robot_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infrared;
        break;
      }

      // required bool infrared = 2;
      case 2: {
        if (tag == 16) {
         parse_infrared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infrared_)));
          set_has_infrared();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flat_kick;
        break;
      }

      // required bool flat_kick = 3;
      case 3: {
        if (tag == 24) {
         parse_flat_kick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flat_kick_)));
          set_has_flat_kick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chip_kick;
        break;
      }

      // required bool chip_kick = 4;
      case 4: {
        if (tag == 32) {
         parse_chip_kick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chip_kick_)));
          set_has_chip_kick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robot_Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robot_Status)
  return false;
#undef DO_
}

void Robot_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robot_Status)
  // required int32 robot_id = 1;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robot_id(), output);
  }

  // required bool infrared = 2;
  if (has_infrared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->infrared(), output);
  }

  // required bool flat_kick = 3;
  if (has_flat_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flat_kick(), output);
  }

  // required bool chip_kick = 4;
  if (has_chip_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->chip_kick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robot_Status)
}

::google::protobuf::uint8* Robot_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot_Status)
  // required int32 robot_id = 1;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->robot_id(), target);
  }

  // required bool infrared = 2;
  if (has_infrared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->infrared(), target);
  }

  // required bool flat_kick = 3;
  if (has_flat_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flat_kick(), target);
  }

  // required bool chip_kick = 4;
  if (has_chip_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->chip_kick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot_Status)
  return target;
}

int Robot_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 robot_id = 1;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_id());
    }

    // required bool infrared = 2;
    if (has_infrared()) {
      total_size += 1 + 1;
    }

    // required bool flat_kick = 3;
    if (has_flat_kick()) {
      total_size += 1 + 1;
    }

    // required bool chip_kick = 4;
    if (has_chip_kick()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robot_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robot_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robot_Status::MergeFrom(const Robot_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_infrared()) {
      set_infrared(from.infrared());
    }
    if (from.has_flat_kick()) {
      set_flat_kick(from.flat_kick());
    }
    if (from.has_chip_kick()) {
      set_chip_kick(from.chip_kick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robot_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Status::CopyFrom(const Robot_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Robot_Status::Swap(Robot_Status* other) {
  if (other != this) {
    std::swap(robot_id_, other->robot_id_);
    std::swap(infrared_, other->infrared_);
    std::swap(flat_kick_, other->flat_kick_);
    std::swap(chip_kick_, other->chip_kick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robot_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_Status_descriptor_;
  metadata.reflection = Robot_Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Robots_Command::kCommandFieldNumber;
const int Robots_Command::kDelayFieldNumber;
#endif  // !_MSC_VER

Robots_Command::Robots_Command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robots_Command)
}

void Robots_Command::InitAsDefaultInstance() {
}

Robots_Command::Robots_Command(const Robots_Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robots_Command)
}

void Robots_Command::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robots_Command::~Robots_Command() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robots_Command)
  SharedDtor();
}

void Robots_Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robots_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robots_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robots_Command_descriptor_;
}

const Robots_Command& Robots_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fcmd_2eproto();
  return *default_instance_;
}

Robots_Command* Robots_Command::default_instance_ = NULL;

Robots_Command* Robots_Command::New() const {
  return new Robots_Command;
}

void Robots_Command::Clear() {
  delay_ = 0;
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robots_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robots_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZSS.Protocol.Robot_Command command = 1;
      case 1: {
        if (tag == 10) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_command;
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }

      // optional int32 delay = 2;
      case 2: {
        if (tag == 16) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robots_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robots_Command)
  return false;
#undef DO_
}

void Robots_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robots_Command)
  // repeated .ZSS.Protocol.Robot_Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(i), output);
  }

  // optional int32 delay = 2;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robots_Command)
}

::google::protobuf::uint8* Robots_Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robots_Command)
  // repeated .ZSS.Protocol.Robot_Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(i), target);
  }

  // optional int32 delay = 2;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robots_Command)
  return target;
}

int Robots_Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 delay = 2;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

  }
  // repeated .ZSS.Protocol.Robot_Command command = 1;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robots_Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robots_Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robots_Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robots_Command::MergeFrom(const Robots_Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robots_Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots_Command::CopyFrom(const Robots_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots_Command::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->command())) return false;
  return true;
}

void Robots_Command::Swap(Robots_Command* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robots_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robots_Command_descriptor_;
  metadata.reflection = Robots_Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Robot_Command::kRobotIdFieldNumber;
const int Robot_Command::kVelocityXFieldNumber;
const int Robot_Command::kVelocityYFieldNumber;
const int Robot_Command::kVelocityRFieldNumber;
const int Robot_Command::kKickFieldNumber;
const int Robot_Command::kPowerFieldNumber;
const int Robot_Command::kDribblerSpinFieldNumber;
const int Robot_Command::kCurrentAngleFieldNumber;
const int Robot_Command::kTargetAngleFieldNumber;
#endif  // !_MSC_VER

Robot_Command::Robot_Command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZSS.Protocol.Robot_Command)
}

void Robot_Command::InitAsDefaultInstance() {
}

Robot_Command::Robot_Command(const Robot_Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZSS.Protocol.Robot_Command)
}

void Robot_Command::SharedCtor() {
  _cached_size_ = 0;
  robot_id_ = 0;
  velocity_x_ = 0;
  velocity_y_ = 0;
  velocity_r_ = 0;
  kick_ = false;
  power_ = 0;
  dribbler_spin_ = 0;
  current_angle_ = 0;
  target_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot_Command::~Robot_Command() {
  // @@protoc_insertion_point(destructor:ZSS.Protocol.Robot_Command)
  SharedDtor();
}

void Robot_Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robot_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_Command_descriptor_;
}

const Robot_Command& Robot_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zss_5fcmd_2eproto();
  return *default_instance_;
}

Robot_Command* Robot_Command::default_instance_ = NULL;

Robot_Command* Robot_Command::New() const {
  return new Robot_Command;
}

void Robot_Command::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Robot_Command*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(robot_id_, current_angle_);
  }
  target_angle_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robot_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZSS.Protocol.Robot_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 robot_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_velocity_x;
        break;
      }

      // required float velocity_x = 2;
      case 2: {
        if (tag == 21) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_velocity_y;
        break;
      }

      // required float velocity_y = 3;
      case 3: {
        if (tag == 29) {
         parse_velocity_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_velocity_r;
        break;
      }

      // required float velocity_r = 4;
      case 4: {
        if (tag == 37) {
         parse_velocity_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_r_)));
          set_has_velocity_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kick;
        break;
      }

      // required bool kick = 5;
      case 5: {
        if (tag == 40) {
         parse_kick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kick_)));
          set_has_kick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_power;
        break;
      }

      // required float power = 6;
      case 6: {
        if (tag == 53) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_dribbler_spin;
        break;
      }

      // required float dribbler_spin = 7;
      case 7: {
        if (tag == 61) {
         parse_dribbler_spin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dribbler_spin_)));
          set_has_dribbler_spin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_current_angle;
        break;
      }

      // optional float current_angle = 8;
      case 8: {
        if (tag == 69) {
         parse_current_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_angle_)));
          set_has_current_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_target_angle;
        break;
      }

      // optional float target_angle = 9;
      case 9: {
        if (tag == 77) {
         parse_target_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_angle_)));
          set_has_target_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZSS.Protocol.Robot_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZSS.Protocol.Robot_Command)
  return false;
#undef DO_
}

void Robot_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZSS.Protocol.Robot_Command)
  // required int32 robot_id = 1;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robot_id(), output);
  }

  // required float velocity_x = 2;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity_x(), output);
  }

  // required float velocity_y = 3;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->velocity_y(), output);
  }

  // required float velocity_r = 4;
  if (has_velocity_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocity_r(), output);
  }

  // required bool kick = 5;
  if (has_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->kick(), output);
  }

  // required float power = 6;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->power(), output);
  }

  // required float dribbler_spin = 7;
  if (has_dribbler_spin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dribbler_spin(), output);
  }

  // optional float current_angle = 8;
  if (has_current_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->current_angle(), output);
  }

  // optional float target_angle = 9;
  if (has_target_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->target_angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZSS.Protocol.Robot_Command)
}

::google::protobuf::uint8* Robot_Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.Protocol.Robot_Command)
  // required int32 robot_id = 1;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->robot_id(), target);
  }

  // required float velocity_x = 2;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->velocity_x(), target);
  }

  // required float velocity_y = 3;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->velocity_y(), target);
  }

  // required float velocity_r = 4;
  if (has_velocity_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocity_r(), target);
  }

  // required bool kick = 5;
  if (has_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->kick(), target);
  }

  // required float power = 6;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->power(), target);
  }

  // required float dribbler_spin = 7;
  if (has_dribbler_spin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dribbler_spin(), target);
  }

  // optional float current_angle = 8;
  if (has_current_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->current_angle(), target);
  }

  // optional float target_angle = 9;
  if (has_target_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->target_angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.Protocol.Robot_Command)
  return target;
}

int Robot_Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 robot_id = 1;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_id());
    }

    // required float velocity_x = 2;
    if (has_velocity_x()) {
      total_size += 1 + 4;
    }

    // required float velocity_y = 3;
    if (has_velocity_y()) {
      total_size += 1 + 4;
    }

    // required float velocity_r = 4;
    if (has_velocity_r()) {
      total_size += 1 + 4;
    }

    // required bool kick = 5;
    if (has_kick()) {
      total_size += 1 + 1;
    }

    // required float power = 6;
    if (has_power()) {
      total_size += 1 + 4;
    }

    // required float dribbler_spin = 7;
    if (has_dribbler_spin()) {
      total_size += 1 + 4;
    }

    // optional float current_angle = 8;
    if (has_current_angle()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float target_angle = 9;
    if (has_target_angle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot_Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robot_Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robot_Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robot_Command::MergeFrom(const Robot_Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
    if (from.has_velocity_r()) {
      set_velocity_r(from.velocity_r());
    }
    if (from.has_kick()) {
      set_kick(from.kick());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_dribbler_spin()) {
      set_dribbler_spin(from.dribbler_spin());
    }
    if (from.has_current_angle()) {
      set_current_angle(from.current_angle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target_angle()) {
      set_target_angle(from.target_angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robot_Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Command::CopyFrom(const Robot_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Robot_Command::Swap(Robot_Command* other) {
  if (other != this) {
    std::swap(robot_id_, other->robot_id_);
    std::swap(velocity_x_, other->velocity_x_);
    std::swap(velocity_y_, other->velocity_y_);
    std::swap(velocity_r_, other->velocity_r_);
    std::swap(kick_, other->kick_);
    std::swap(power_, other->power_);
    std::swap(dribbler_spin_, other->dribbler_spin_);
    std::swap(current_angle_, other->current_angle_);
    std::swap(target_angle_, other->target_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robot_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_Command_descriptor_;
  metadata.reflection = Robot_Command_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)
