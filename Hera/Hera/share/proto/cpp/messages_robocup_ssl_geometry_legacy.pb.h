// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry_legacy.proto

#ifndef PROTOBUF_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto__INCLUDED
#define PROTOBUF_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "messages_robocup_ssl_geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace RoboCup2014Legacy {
namespace Geometry {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();
void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();
void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();

class SSL_GeometryFieldSize;
class SSL_GeometryData;

// ===================================================================

class SSL_GeometryFieldSize : public ::google::protobuf::Message {
 public:
  SSL_GeometryFieldSize();
  virtual ~SSL_GeometryFieldSize();

  SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from);

  inline SSL_GeometryFieldSize& operator=(const SSL_GeometryFieldSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_GeometryFieldSize& default_instance();

  void Swap(SSL_GeometryFieldSize* other);

  // implements Message ----------------------------------------------

  SSL_GeometryFieldSize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_GeometryFieldSize& from);
  void MergeFrom(const SSL_GeometryFieldSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 line_width = 1;
  inline bool has_line_width() const;
  inline void clear_line_width();
  static const int kLineWidthFieldNumber = 1;
  inline ::google::protobuf::int32 line_width() const;
  inline void set_line_width(::google::protobuf::int32 value);

  // required int32 field_length = 2;
  inline bool has_field_length() const;
  inline void clear_field_length();
  static const int kFieldLengthFieldNumber = 2;
  inline ::google::protobuf::int32 field_length() const;
  inline void set_field_length(::google::protobuf::int32 value);

  // required int32 field_width = 3;
  inline bool has_field_width() const;
  inline void clear_field_width();
  static const int kFieldWidthFieldNumber = 3;
  inline ::google::protobuf::int32 field_width() const;
  inline void set_field_width(::google::protobuf::int32 value);

  // required int32 boundary_width = 4;
  inline bool has_boundary_width() const;
  inline void clear_boundary_width();
  static const int kBoundaryWidthFieldNumber = 4;
  inline ::google::protobuf::int32 boundary_width() const;
  inline void set_boundary_width(::google::protobuf::int32 value);

  // required int32 referee_width = 5;
  inline bool has_referee_width() const;
  inline void clear_referee_width();
  static const int kRefereeWidthFieldNumber = 5;
  inline ::google::protobuf::int32 referee_width() const;
  inline void set_referee_width(::google::protobuf::int32 value);

  // required int32 goal_width = 6;
  inline bool has_goal_width() const;
  inline void clear_goal_width();
  static const int kGoalWidthFieldNumber = 6;
  inline ::google::protobuf::int32 goal_width() const;
  inline void set_goal_width(::google::protobuf::int32 value);

  // required int32 goal_depth = 7;
  inline bool has_goal_depth() const;
  inline void clear_goal_depth();
  static const int kGoalDepthFieldNumber = 7;
  inline ::google::protobuf::int32 goal_depth() const;
  inline void set_goal_depth(::google::protobuf::int32 value);

  // required int32 goal_wall_width = 8;
  inline bool has_goal_wall_width() const;
  inline void clear_goal_wall_width();
  static const int kGoalWallWidthFieldNumber = 8;
  inline ::google::protobuf::int32 goal_wall_width() const;
  inline void set_goal_wall_width(::google::protobuf::int32 value);

  // required int32 center_circle_radius = 9;
  inline bool has_center_circle_radius() const;
  inline void clear_center_circle_radius();
  static const int kCenterCircleRadiusFieldNumber = 9;
  inline ::google::protobuf::int32 center_circle_radius() const;
  inline void set_center_circle_radius(::google::protobuf::int32 value);

  // required int32 defense_radius = 10;
  inline bool has_defense_radius() const;
  inline void clear_defense_radius();
  static const int kDefenseRadiusFieldNumber = 10;
  inline ::google::protobuf::int32 defense_radius() const;
  inline void set_defense_radius(::google::protobuf::int32 value);

  // required int32 defense_stretch = 11;
  inline bool has_defense_stretch() const;
  inline void clear_defense_stretch();
  static const int kDefenseStretchFieldNumber = 11;
  inline ::google::protobuf::int32 defense_stretch() const;
  inline void set_defense_stretch(::google::protobuf::int32 value);

  // required int32 free_kick_from_defense_dist = 12;
  inline bool has_free_kick_from_defense_dist() const;
  inline void clear_free_kick_from_defense_dist();
  static const int kFreeKickFromDefenseDistFieldNumber = 12;
  inline ::google::protobuf::int32 free_kick_from_defense_dist() const;
  inline void set_free_kick_from_defense_dist(::google::protobuf::int32 value);

  // required int32 penalty_spot_from_field_line_dist = 13;
  inline bool has_penalty_spot_from_field_line_dist() const;
  inline void clear_penalty_spot_from_field_line_dist();
  static const int kPenaltySpotFromFieldLineDistFieldNumber = 13;
  inline ::google::protobuf::int32 penalty_spot_from_field_line_dist() const;
  inline void set_penalty_spot_from_field_line_dist(::google::protobuf::int32 value);

  // required int32 penalty_line_from_spot_dist = 14;
  inline bool has_penalty_line_from_spot_dist() const;
  inline void clear_penalty_line_from_spot_dist();
  static const int kPenaltyLineFromSpotDistFieldNumber = 14;
  inline ::google::protobuf::int32 penalty_line_from_spot_dist() const;
  inline void set_penalty_line_from_spot_dist(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
 private:
  inline void set_has_line_width();
  inline void clear_has_line_width();
  inline void set_has_field_length();
  inline void clear_has_field_length();
  inline void set_has_field_width();
  inline void clear_has_field_width();
  inline void set_has_boundary_width();
  inline void clear_has_boundary_width();
  inline void set_has_referee_width();
  inline void clear_has_referee_width();
  inline void set_has_goal_width();
  inline void clear_has_goal_width();
  inline void set_has_goal_depth();
  inline void clear_has_goal_depth();
  inline void set_has_goal_wall_width();
  inline void clear_has_goal_wall_width();
  inline void set_has_center_circle_radius();
  inline void clear_has_center_circle_radius();
  inline void set_has_defense_radius();
  inline void clear_has_defense_radius();
  inline void set_has_defense_stretch();
  inline void clear_has_defense_stretch();
  inline void set_has_free_kick_from_defense_dist();
  inline void clear_has_free_kick_from_defense_dist();
  inline void set_has_penalty_spot_from_field_line_dist();
  inline void clear_has_penalty_spot_from_field_line_dist();
  inline void set_has_penalty_line_from_spot_dist();
  inline void clear_has_penalty_line_from_spot_dist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 line_width_;
  ::google::protobuf::int32 field_length_;
  ::google::protobuf::int32 field_width_;
  ::google::protobuf::int32 boundary_width_;
  ::google::protobuf::int32 referee_width_;
  ::google::protobuf::int32 goal_width_;
  ::google::protobuf::int32 goal_depth_;
  ::google::protobuf::int32 goal_wall_width_;
  ::google::protobuf::int32 center_circle_radius_;
  ::google::protobuf::int32 defense_radius_;
  ::google::protobuf::int32 defense_stretch_;
  ::google::protobuf::int32 free_kick_from_defense_dist_;
  ::google::protobuf::int32 penalty_spot_from_field_line_dist_;
  ::google::protobuf::int32 penalty_line_from_spot_dist_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();

  void InitAsDefaultInstance();
  static SSL_GeometryFieldSize* default_instance_;
};
// -------------------------------------------------------------------

class SSL_GeometryData : public ::google::protobuf::Message {
 public:
  SSL_GeometryData();
  virtual ~SSL_GeometryData();

  SSL_GeometryData(const SSL_GeometryData& from);

  inline SSL_GeometryData& operator=(const SSL_GeometryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_GeometryData& default_instance();

  void Swap(SSL_GeometryData* other);

  // implements Message ----------------------------------------------

  SSL_GeometryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_GeometryData& from);
  void MergeFrom(const SSL_GeometryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize& field() const;
  inline ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* mutable_field();
  inline ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* release_field();
  inline void set_allocated_field(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* field);

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  inline int calib_size() const;
  inline void clear_calib();
  static const int kCalibFieldNumber = 2;
  inline const ::SSL_GeometryCameraCalibration& calib(int index) const;
  inline ::SSL_GeometryCameraCalibration* mutable_calib(int index);
  inline ::SSL_GeometryCameraCalibration* add_calib();
  inline const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
      calib() const;
  inline ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
      mutable_calib();

  // @@protoc_insertion_point(class_scope:RoboCup2014Legacy.Geometry.SSL_GeometryData)
 private:
  inline void set_has_field();
  inline void clear_has_field();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* field_;
  ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration > calib_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto();

  void InitAsDefaultInstance();
  static SSL_GeometryData* default_instance_;
};
// ===================================================================


// ===================================================================

// SSL_GeometryFieldSize

// required int32 line_width = 1;
inline bool SSL_GeometryFieldSize::has_line_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_line_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_GeometryFieldSize::clear_has_line_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_GeometryFieldSize::clear_line_width() {
  line_width_ = 0;
  clear_has_line_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::line_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.line_width)
  return line_width_;
}
inline void SSL_GeometryFieldSize::set_line_width(::google::protobuf::int32 value) {
  set_has_line_width();
  line_width_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.line_width)
}

// required int32 field_length = 2;
inline bool SSL_GeometryFieldSize::has_field_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_field_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_GeometryFieldSize::clear_has_field_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_GeometryFieldSize::clear_field_length() {
  field_length_ = 0;
  clear_has_field_length();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.field_length)
  return field_length_;
}
inline void SSL_GeometryFieldSize::set_field_length(::google::protobuf::int32 value) {
  set_has_field_length();
  field_length_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.field_length)
}

// required int32 field_width = 3;
inline bool SSL_GeometryFieldSize::has_field_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_field_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_GeometryFieldSize::clear_has_field_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_GeometryFieldSize::clear_field_width() {
  field_width_ = 0;
  clear_has_field_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.field_width)
  return field_width_;
}
inline void SSL_GeometryFieldSize::set_field_width(::google::protobuf::int32 value) {
  set_has_field_width();
  field_width_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.field_width)
}

// required int32 boundary_width = 4;
inline bool SSL_GeometryFieldSize::has_boundary_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_boundary_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSL_GeometryFieldSize::clear_has_boundary_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSL_GeometryFieldSize::clear_boundary_width() {
  boundary_width_ = 0;
  clear_has_boundary_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.boundary_width)
  return boundary_width_;
}
inline void SSL_GeometryFieldSize::set_boundary_width(::google::protobuf::int32 value) {
  set_has_boundary_width();
  boundary_width_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.boundary_width)
}

// required int32 referee_width = 5;
inline bool SSL_GeometryFieldSize::has_referee_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_referee_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSL_GeometryFieldSize::clear_has_referee_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSL_GeometryFieldSize::clear_referee_width() {
  referee_width_ = 0;
  clear_has_referee_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::referee_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.referee_width)
  return referee_width_;
}
inline void SSL_GeometryFieldSize::set_referee_width(::google::protobuf::int32 value) {
  set_has_referee_width();
  referee_width_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.referee_width)
}

// required int32 goal_width = 6;
inline bool SSL_GeometryFieldSize::has_goal_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_goal_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SSL_GeometryFieldSize::clear_has_goal_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SSL_GeometryFieldSize::clear_goal_width() {
  goal_width_ = 0;
  clear_has_goal_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_width)
  return goal_width_;
}
inline void SSL_GeometryFieldSize::set_goal_width(::google::protobuf::int32 value) {
  set_has_goal_width();
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_width)
}

// required int32 goal_depth = 7;
inline bool SSL_GeometryFieldSize::has_goal_depth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_goal_depth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SSL_GeometryFieldSize::clear_has_goal_depth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SSL_GeometryFieldSize::clear_goal_depth() {
  goal_depth_ = 0;
  clear_has_goal_depth();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_depth)
  return goal_depth_;
}
inline void SSL_GeometryFieldSize::set_goal_depth(::google::protobuf::int32 value) {
  set_has_goal_depth();
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_depth)
}

// required int32 goal_wall_width = 8;
inline bool SSL_GeometryFieldSize::has_goal_wall_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_goal_wall_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SSL_GeometryFieldSize::clear_has_goal_wall_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SSL_GeometryFieldSize::clear_goal_wall_width() {
  goal_wall_width_ = 0;
  clear_has_goal_wall_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::goal_wall_width() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_wall_width)
  return goal_wall_width_;
}
inline void SSL_GeometryFieldSize::set_goal_wall_width(::google::protobuf::int32 value) {
  set_has_goal_wall_width();
  goal_wall_width_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.goal_wall_width)
}

// required int32 center_circle_radius = 9;
inline bool SSL_GeometryFieldSize::has_center_circle_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_center_circle_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SSL_GeometryFieldSize::clear_has_center_circle_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SSL_GeometryFieldSize::clear_center_circle_radius() {
  center_circle_radius_ = 0;
  clear_has_center_circle_radius();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::center_circle_radius() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.center_circle_radius)
  return center_circle_radius_;
}
inline void SSL_GeometryFieldSize::set_center_circle_radius(::google::protobuf::int32 value) {
  set_has_center_circle_radius();
  center_circle_radius_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.center_circle_radius)
}

// required int32 defense_radius = 10;
inline bool SSL_GeometryFieldSize::has_defense_radius() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_defense_radius() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SSL_GeometryFieldSize::clear_has_defense_radius() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SSL_GeometryFieldSize::clear_defense_radius() {
  defense_radius_ = 0;
  clear_has_defense_radius();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::defense_radius() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.defense_radius)
  return defense_radius_;
}
inline void SSL_GeometryFieldSize::set_defense_radius(::google::protobuf::int32 value) {
  set_has_defense_radius();
  defense_radius_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.defense_radius)
}

// required int32 defense_stretch = 11;
inline bool SSL_GeometryFieldSize::has_defense_stretch() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_defense_stretch() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SSL_GeometryFieldSize::clear_has_defense_stretch() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SSL_GeometryFieldSize::clear_defense_stretch() {
  defense_stretch_ = 0;
  clear_has_defense_stretch();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::defense_stretch() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.defense_stretch)
  return defense_stretch_;
}
inline void SSL_GeometryFieldSize::set_defense_stretch(::google::protobuf::int32 value) {
  set_has_defense_stretch();
  defense_stretch_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.defense_stretch)
}

// required int32 free_kick_from_defense_dist = 12;
inline bool SSL_GeometryFieldSize::has_free_kick_from_defense_dist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_free_kick_from_defense_dist() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SSL_GeometryFieldSize::clear_has_free_kick_from_defense_dist() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SSL_GeometryFieldSize::clear_free_kick_from_defense_dist() {
  free_kick_from_defense_dist_ = 0;
  clear_has_free_kick_from_defense_dist();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::free_kick_from_defense_dist() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.free_kick_from_defense_dist)
  return free_kick_from_defense_dist_;
}
inline void SSL_GeometryFieldSize::set_free_kick_from_defense_dist(::google::protobuf::int32 value) {
  set_has_free_kick_from_defense_dist();
  free_kick_from_defense_dist_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.free_kick_from_defense_dist)
}

// required int32 penalty_spot_from_field_line_dist = 13;
inline bool SSL_GeometryFieldSize::has_penalty_spot_from_field_line_dist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_penalty_spot_from_field_line_dist() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SSL_GeometryFieldSize::clear_has_penalty_spot_from_field_line_dist() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SSL_GeometryFieldSize::clear_penalty_spot_from_field_line_dist() {
  penalty_spot_from_field_line_dist_ = 0;
  clear_has_penalty_spot_from_field_line_dist();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::penalty_spot_from_field_line_dist() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.penalty_spot_from_field_line_dist)
  return penalty_spot_from_field_line_dist_;
}
inline void SSL_GeometryFieldSize::set_penalty_spot_from_field_line_dist(::google::protobuf::int32 value) {
  set_has_penalty_spot_from_field_line_dist();
  penalty_spot_from_field_line_dist_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.penalty_spot_from_field_line_dist)
}

// required int32 penalty_line_from_spot_dist = 14;
inline bool SSL_GeometryFieldSize::has_penalty_line_from_spot_dist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_penalty_line_from_spot_dist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SSL_GeometryFieldSize::clear_has_penalty_line_from_spot_dist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SSL_GeometryFieldSize::clear_penalty_line_from_spot_dist() {
  penalty_line_from_spot_dist_ = 0;
  clear_has_penalty_line_from_spot_dist();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::penalty_line_from_spot_dist() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.penalty_line_from_spot_dist)
  return penalty_line_from_spot_dist_;
}
inline void SSL_GeometryFieldSize::set_penalty_line_from_spot_dist(::google::protobuf::int32 value) {
  set_has_penalty_line_from_spot_dist();
  penalty_line_from_spot_dist_ = value;
  // @@protoc_insertion_point(field_set:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize.penalty_line_from_spot_dist)
}

// -------------------------------------------------------------------

// SSL_GeometryData

// required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
inline bool SSL_GeometryData::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_GeometryData::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_GeometryData::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_GeometryData::clear_field() {
  if (field_ != NULL) field_->::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::Clear();
  clear_has_field();
}
inline const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryData.field)
  return field_ != NULL ? *field_ : *default_instance_->field_;
}
inline ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  set_has_field();
  if (field_ == NULL) field_ = new ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize;
  // @@protoc_insertion_point(field_mutable:RoboCup2014Legacy.Geometry.SSL_GeometryData.field)
  return field_;
}
inline ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  clear_has_field();
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* temp = field_;
  field_ = NULL;
  return temp;
}
inline void SSL_GeometryData::set_allocated_field(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* field) {
  delete field_;
  field_ = field;
  if (field) {
    set_has_field();
  } else {
    clear_has_field();
  }
  // @@protoc_insertion_point(field_set_allocated:RoboCup2014Legacy.Geometry.SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
inline int SSL_GeometryData::calib_size() const {
  return calib_.size();
}
inline void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return calib_.Get(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return calib_.Mutable(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  // @@protoc_insertion_point(field_add:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return calib_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return calib_;
}
inline ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:RoboCup2014Legacy.Geometry.SSL_GeometryData.calib)
  return &calib_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Geometry
}  // namespace RoboCup2014Legacy

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto__INCLUDED
