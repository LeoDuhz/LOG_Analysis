// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_referee.proto

#include "ssl_referee.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5freferee_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_Referee_TeamInfo_ssl_5freferee_2eproto;
class SSL_Referee_TeamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_Referee_TeamInfo> _instance;
} _SSL_Referee_TeamInfo_default_instance_;
class SSL_RefereeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_Referee> _instance;
} _SSL_Referee_default_instance_;
static void InitDefaultsscc_info_SSL_Referee_ssl_5freferee_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_Referee_default_instance_;
    new (ptr) ::SSL_Referee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_Referee::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSL_Referee_ssl_5freferee_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSL_Referee_ssl_5freferee_2eproto}, {
      &scc_info_SSL_Referee_TeamInfo_ssl_5freferee_2eproto.base,}};

static void InitDefaultsscc_info_SSL_Referee_TeamInfo_ssl_5freferee_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_Referee_TeamInfo_default_instance_;
    new (ptr) ::SSL_Referee_TeamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_Referee_TeamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_Referee_TeamInfo_ssl_5freferee_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSL_Referee_TeamInfo_ssl_5freferee_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5freferee_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5freferee_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5freferee_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5freferee_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, name_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, score_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, red_cards_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, yellow_card_times_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, yellow_cards_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, timeouts_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, timeout_time_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee_TeamInfo, goalie_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, packet_timestamp_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, stage_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, stage_time_left_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, command_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, command_counter_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, command_timestamp_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, yellow_),
  PROTOBUF_FIELD_OFFSET(::SSL_Referee, blue_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::SSL_Referee_TeamInfo)},
  { 21, 34, sizeof(::SSL_Referee)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSL_Referee_TeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSL_Referee_default_instance_),
};

const char descriptor_table_protodef_ssl_5freferee_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ssl_referee.proto\"\335\010\n\013SSL_Referee\022\030\n\020p"
  "acket_timestamp\030\001 \002(\004\022!\n\005stage\030\002 \002(\0162\022.S"
  "SL_Referee.Stage\022\027\n\017stage_time_left\030\003 \001("
  "\021\022%\n\007command\030\004 \002(\0162\024.SSL_Referee.Command"
  "\022\027\n\017command_counter\030\005 \002(\r\022\031\n\021command_tim"
  "estamp\030\006 \002(\004\022%\n\006yellow\030\007 \002(\0132\025.SSL_Refer"
  "ee.TeamInfo\022#\n\004blue\030\010 \002(\0132\025.SSL_Referee."
  "TeamInfo\032\247\001\n\010TeamInfo\022\014\n\004name\030\001 \002(\t\022\r\n\005s"
  "core\030\002 \002(\r\022\021\n\tred_cards\030\003 \002(\r\022\035\n\021yellow_"
  "card_times\030\004 \003(\rB\002\020\001\022\024\n\014yellow_cards\030\005 \002"
  "(\r\022\020\n\010timeouts\030\006 \002(\r\022\024\n\014timeout_time\030\007 \002"
  "(\r\022\016\n\006goalie\030\010 \002(\r\"\321\002\n\005Stage\022\031\n\025NORMAL_F"
  "IRST_HALF_PRE\020\000\022\025\n\021NORMAL_FIRST_HALF\020\001\022\024"
  "\n\020NORMAL_HALF_TIME\020\002\022\032\n\026NORMAL_SECOND_HA"
  "LF_PRE\020\003\022\026\n\022NORMAL_SECOND_HALF\020\004\022\024\n\020EXTR"
  "A_TIME_BREAK\020\005\022\030\n\024EXTRA_FIRST_HALF_PRE\020\006"
  "\022\024\n\020EXTRA_FIRST_HALF\020\007\022\023\n\017EXTRA_HALF_TIM"
  "E\020\010\022\031\n\025EXTRA_SECOND_HALF_PRE\020\t\022\025\n\021EXTRA_"
  "SECOND_HALF\020\n\022\032\n\026PENALTY_SHOOTOUT_BREAK\020"
  "\013\022\024\n\020PENALTY_SHOOTOUT\020\014\022\r\n\tPOST_GAME\020\r\"\322"
  "\002\n\007Command\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORMAL"
  "_START\020\002\022\017\n\013FORCE_START\020\003\022\032\n\026PREPARE_KIC"
  "KOFF_YELLOW\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020\005\022"
  "\032\n\026PREPARE_PENALTY_YELLOW\020\006\022\030\n\024PREPARE_P"
  "ENALTY_BLUE\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022\024\n"
  "\020DIRECT_FREE_BLUE\020\t\022\030\n\024INDIRECT_FREE_YEL"
  "LOW\020\n\022\026\n\022INDIRECT_FREE_BLUE\020\013\022\022\n\016TIMEOUT"
  "_YELLOW\020\014\022\020\n\014TIMEOUT_BLUE\020\r\022\017\n\013GOAL_YELL"
  "OW\020\016\022\r\n\tGOAL_BLUE\020\017"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5freferee_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5freferee_2eproto_sccs[2] = {
  &scc_info_SSL_Referee_ssl_5freferee_2eproto.base,
  &scc_info_SSL_Referee_TeamInfo_ssl_5freferee_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5freferee_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5freferee_2eproto = {
  false, false, descriptor_table_protodef_ssl_5freferee_2eproto, "ssl_referee.proto", 1139,
  &descriptor_table_ssl_5freferee_2eproto_once, descriptor_table_ssl_5freferee_2eproto_sccs, descriptor_table_ssl_5freferee_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ssl_5freferee_2eproto::offsets,
  file_level_metadata_ssl_5freferee_2eproto, 2, file_level_enum_descriptors_ssl_5freferee_2eproto, file_level_service_descriptors_ssl_5freferee_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5freferee_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5freferee_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_Referee_Stage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5freferee_2eproto);
  return file_level_enum_descriptors_ssl_5freferee_2eproto[0];
}
bool SSL_Referee_Stage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SSL_Referee_Stage SSL_Referee::NORMAL_FIRST_HALF_PRE;
constexpr SSL_Referee_Stage SSL_Referee::NORMAL_FIRST_HALF;
constexpr SSL_Referee_Stage SSL_Referee::NORMAL_HALF_TIME;
constexpr SSL_Referee_Stage SSL_Referee::NORMAL_SECOND_HALF_PRE;
constexpr SSL_Referee_Stage SSL_Referee::NORMAL_SECOND_HALF;
constexpr SSL_Referee_Stage SSL_Referee::EXTRA_TIME_BREAK;
constexpr SSL_Referee_Stage SSL_Referee::EXTRA_FIRST_HALF_PRE;
constexpr SSL_Referee_Stage SSL_Referee::EXTRA_FIRST_HALF;
constexpr SSL_Referee_Stage SSL_Referee::EXTRA_HALF_TIME;
constexpr SSL_Referee_Stage SSL_Referee::EXTRA_SECOND_HALF_PRE;
constexpr SSL_Referee_Stage SSL_Referee::EXTRA_SECOND_HALF;
constexpr SSL_Referee_Stage SSL_Referee::PENALTY_SHOOTOUT_BREAK;
constexpr SSL_Referee_Stage SSL_Referee::PENALTY_SHOOTOUT;
constexpr SSL_Referee_Stage SSL_Referee::POST_GAME;
constexpr SSL_Referee_Stage SSL_Referee::Stage_MIN;
constexpr SSL_Referee_Stage SSL_Referee::Stage_MAX;
constexpr int SSL_Referee::Stage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_Referee_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5freferee_2eproto);
  return file_level_enum_descriptors_ssl_5freferee_2eproto[1];
}
bool SSL_Referee_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SSL_Referee_Command SSL_Referee::HALT;
constexpr SSL_Referee_Command SSL_Referee::STOP;
constexpr SSL_Referee_Command SSL_Referee::NORMAL_START;
constexpr SSL_Referee_Command SSL_Referee::FORCE_START;
constexpr SSL_Referee_Command SSL_Referee::PREPARE_KICKOFF_YELLOW;
constexpr SSL_Referee_Command SSL_Referee::PREPARE_KICKOFF_BLUE;
constexpr SSL_Referee_Command SSL_Referee::PREPARE_PENALTY_YELLOW;
constexpr SSL_Referee_Command SSL_Referee::PREPARE_PENALTY_BLUE;
constexpr SSL_Referee_Command SSL_Referee::DIRECT_FREE_YELLOW;
constexpr SSL_Referee_Command SSL_Referee::DIRECT_FREE_BLUE;
constexpr SSL_Referee_Command SSL_Referee::INDIRECT_FREE_YELLOW;
constexpr SSL_Referee_Command SSL_Referee::INDIRECT_FREE_BLUE;
constexpr SSL_Referee_Command SSL_Referee::TIMEOUT_YELLOW;
constexpr SSL_Referee_Command SSL_Referee::TIMEOUT_BLUE;
constexpr SSL_Referee_Command SSL_Referee::GOAL_YELLOW;
constexpr SSL_Referee_Command SSL_Referee::GOAL_BLUE;
constexpr SSL_Referee_Command SSL_Referee::Command_MIN;
constexpr SSL_Referee_Command SSL_Referee::Command_MAX;
constexpr int SSL_Referee::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SSL_Referee_TeamInfo::InitAsDefaultInstance() {
}
class SSL_Referee_TeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_Referee_TeamInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_red_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yellow_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeouts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timeout_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_goalie(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

SSL_Referee_TeamInfo::SSL_Referee_TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  yellow_card_times_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_Referee.TeamInfo)
}
SSL_Referee_TeamInfo::SSL_Referee_TeamInfo(const SSL_Referee_TeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      yellow_card_times_(from.yellow_card_times_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&goalie_) -
    reinterpret_cast<char*>(&score_)) + sizeof(goalie_));
  // @@protoc_insertion_point(copy_constructor:SSL_Referee.TeamInfo)
}

void SSL_Referee_TeamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSL_Referee_TeamInfo_ssl_5freferee_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goalie_) -
      reinterpret_cast<char*>(&score_)) + sizeof(goalie_));
}

SSL_Referee_TeamInfo::~SSL_Referee_TeamInfo() {
  // @@protoc_insertion_point(destructor:SSL_Referee.TeamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_Referee_TeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSL_Referee_TeamInfo::ArenaDtor(void* object) {
  SSL_Referee_TeamInfo* _this = reinterpret_cast< SSL_Referee_TeamInfo* >(object);
  (void)_this;
}
void SSL_Referee_TeamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_Referee_TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_Referee_TeamInfo& SSL_Referee_TeamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_Referee_TeamInfo_ssl_5freferee_2eproto.base);
  return *internal_default_instance();
}


void SSL_Referee_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_Referee.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yellow_card_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goalie_) -
        reinterpret_cast<char*>(&score_)) + sizeof(goalie_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_Referee_TeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SSL_Referee.TeamInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 red_cards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_red_cards(&has_bits);
          red_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 yellow_card_times = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_yellow_card_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 yellow_cards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_yellow_cards(&has_bits);
          yellow_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 timeouts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timeouts(&has_bits);
          timeouts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 timeout_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_timeout_time(&has_bits);
          timeout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 goalie = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_goalie(&has_bits);
          goalie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_Referee_TeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_Referee.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SSL_Referee.TeamInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // required uint32 red_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_red_cards(), target);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    int byte_size = _yellow_card_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_yellow_card_times(), byte_size, target);
    }
  }

  // required uint32 yellow_cards = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_yellow_cards(), target);
  }

  // required uint32 timeouts = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeouts(), target);
  }

  // required uint32 timeout_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timeout_time(), target);
  }

  // required uint32 goalie = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_goalie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_Referee.TeamInfo)
  return target;
}

size_t SSL_Referee_TeamInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_Referee.TeamInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_score()) {
    // required uint32 score = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_score());
  }

  if (_internal_has_red_cards()) {
    // required uint32 red_cards = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_red_cards());
  }

  if (_internal_has_yellow_cards()) {
    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yellow_cards());
  }

  if (_internal_has_timeouts()) {
    // required uint32 timeouts = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeouts());
  }

  if (_internal_has_timeout_time()) {
    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_time());
  }

  if (_internal_has_goalie()) {
    // required uint32 goalie = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_goalie());
  }

  return total_size;
}
size_t SSL_Referee_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_Referee.TeamInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 score = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_score());

    // required uint32 red_cards = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_red_cards());

    // required uint32 yellow_cards = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yellow_cards());

    // required uint32 timeouts = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeouts());

    // required uint32 timeout_time = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_time());

    // required uint32 goalie = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_goalie());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->yellow_card_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _yellow_card_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_Referee_TeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_Referee_TeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_Referee_TeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_Referee.TeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_Referee.TeamInfo)
    MergeFrom(*source);
  }
}

void SSL_Referee_TeamInfo::MergeFrom(const SSL_Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yellow_card_times_.MergeFrom(from.yellow_card_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      red_cards_ = from.red_cards_;
    }
    if (cached_has_bits & 0x00000008u) {
      yellow_cards_ = from.yellow_cards_;
    }
    if (cached_has_bits & 0x00000010u) {
      timeouts_ = from.timeouts_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_time_ = from.timeout_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      goalie_ = from.goalie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_Referee_TeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_Referee_TeamInfo::CopyFrom(const SSL_Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_Referee_TeamInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SSL_Referee_TeamInfo::InternalSwap(SSL_Referee_TeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  yellow_card_times_.InternalSwap(&other->yellow_card_times_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_Referee_TeamInfo, goalie_)
      + sizeof(SSL_Referee_TeamInfo::goalie_)
      - PROTOBUF_FIELD_OFFSET(SSL_Referee_TeamInfo, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_Referee_TeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSL_Referee::InitAsDefaultInstance() {
  ::_SSL_Referee_default_instance_._instance.get_mutable()->yellow_ = const_cast< ::SSL_Referee_TeamInfo*>(
      ::SSL_Referee_TeamInfo::internal_default_instance());
  ::_SSL_Referee_default_instance_._instance.get_mutable()->blue_ = const_cast< ::SSL_Referee_TeamInfo*>(
      ::SSL_Referee_TeamInfo::internal_default_instance());
}
class SSL_Referee::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_Referee>()._has_bits_);
  static void set_has_packet_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stage_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_command_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::SSL_Referee_TeamInfo& yellow(const SSL_Referee* msg);
  static void set_has_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SSL_Referee_TeamInfo& blue(const SSL_Referee* msg);
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ef) ^ 0x000000ef) != 0;
  }
};

const ::SSL_Referee_TeamInfo&
SSL_Referee::_Internal::yellow(const SSL_Referee* msg) {
  return *msg->yellow_;
}
const ::SSL_Referee_TeamInfo&
SSL_Referee::_Internal::blue(const SSL_Referee* msg) {
  return *msg->blue_;
}
SSL_Referee::SSL_Referee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_Referee)
}
SSL_Referee::SSL_Referee(const SSL_Referee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_yellow()) {
    yellow_ = new ::SSL_Referee_TeamInfo(*from.yellow_);
  } else {
    yellow_ = nullptr;
  }
  if (from._internal_has_blue()) {
    blue_ = new ::SSL_Referee_TeamInfo(*from.blue_);
  } else {
    blue_ = nullptr;
  }
  ::memcpy(&packet_timestamp_, &from.packet_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_timestamp_) -
    reinterpret_cast<char*>(&packet_timestamp_)) + sizeof(command_timestamp_));
  // @@protoc_insertion_point(copy_constructor:SSL_Referee)
}

void SSL_Referee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSL_Referee_ssl_5freferee_2eproto.base);
  ::memset(&yellow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_timestamp_) -
      reinterpret_cast<char*>(&yellow_)) + sizeof(command_timestamp_));
}

SSL_Referee::~SSL_Referee() {
  // @@protoc_insertion_point(destructor:SSL_Referee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_Referee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete yellow_;
  if (this != internal_default_instance()) delete blue_;
}

void SSL_Referee::ArenaDtor(void* object) {
  SSL_Referee* _this = reinterpret_cast< SSL_Referee* >(object);
  (void)_this;
}
void SSL_Referee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_Referee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_Referee& SSL_Referee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_Referee_ssl_5freferee_2eproto.base);
  return *internal_default_instance();
}


void SSL_Referee::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_Referee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(yellow_ != nullptr);
      yellow_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(blue_ != nullptr);
      blue_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&packet_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_timestamp_) -
        reinterpret_cast<char*>(&packet_timestamp_)) + sizeof(command_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_Referee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 packet_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packet_timestamp(&has_bits);
          packet_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SSL_Referee.Stage stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_Referee_Stage_IsValid(val))) {
            _internal_set_stage(static_cast<::SSL_Referee_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional sint32 stage_time_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stage_time_left(&has_bits);
          stage_time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SSL_Referee.Command command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_Referee_Command_IsValid(val))) {
            _internal_set_command(static_cast<::SSL_Referee_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 command_counter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_command_counter(&has_bits);
          command_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 command_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_command_timestamp(&has_bits);
          command_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SSL_Referee.TeamInfo yellow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SSL_Referee.TeamInfo blue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_blue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_Referee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_Referee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_packet_timestamp(), target);
  }

  // required .SSL_Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stage(), target);
  }

  // optional sint32 stage_time_left = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_stage_time_left(), target);
  }

  // required .SSL_Referee.Command command = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command(), target);
  }

  // required uint32 command_counter = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_command_counter(), target);
  }

  // required uint64 command_timestamp = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_command_timestamp(), target);
  }

  // required .SSL_Referee.TeamInfo yellow = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::yellow(this), target, stream);
  }

  // required .SSL_Referee.TeamInfo blue = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::blue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_Referee)
  return target;
}

size_t SSL_Referee::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_Referee)
  size_t total_size = 0;

  if (_internal_has_yellow()) {
    // required .SSL_Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yellow_);
  }

  if (_internal_has_blue()) {
    // required .SSL_Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blue_);
  }

  if (_internal_has_packet_timestamp()) {
    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_packet_timestamp());
  }

  if (_internal_has_stage()) {
    // required .SSL_Referee.Stage stage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  if (_internal_has_command()) {
    // required .SSL_Referee.Command command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (_internal_has_command_counter()) {
    // required uint32 command_counter = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_counter());
  }

  if (_internal_has_command_timestamp()) {
    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_command_timestamp());
  }

  return total_size;
}
size_t SSL_Referee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_Referee)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ef) ^ 0x000000ef) == 0) {  // All required fields are present.
    // required .SSL_Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yellow_);

    // required .SSL_Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blue_);

    // required uint64 packet_timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_packet_timestamp());

    // required .SSL_Referee.Stage stage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());

    // required .SSL_Referee.Command command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());

    // required uint32 command_counter = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_counter());

    // required uint64 command_timestamp = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_command_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional sint32 stage_time_left = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_stage_time_left());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_Referee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_Referee)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_Referee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_Referee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_Referee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_Referee)
    MergeFrom(*source);
  }
}

void SSL_Referee::MergeFrom(const SSL_Referee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_Referee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_yellow()->::SSL_Referee_TeamInfo::MergeFrom(from._internal_yellow());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_blue()->::SSL_Referee_TeamInfo::MergeFrom(from._internal_blue());
    }
    if (cached_has_bits & 0x00000004u) {
      packet_timestamp_ = from.packet_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00000010u) {
      stage_time_left_ = from.stage_time_left_;
    }
    if (cached_has_bits & 0x00000020u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_counter_ = from.command_counter_;
    }
    if (cached_has_bits & 0x00000080u) {
      command_timestamp_ = from.command_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_Referee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_Referee::CopyFrom(const SSL_Referee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_Referee::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_yellow()) {
    if (!yellow_->IsInitialized()) return false;
  }
  if (_internal_has_blue()) {
    if (!blue_->IsInitialized()) return false;
  }
  return true;
}

void SSL_Referee::InternalSwap(SSL_Referee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_Referee, command_timestamp_)
      + sizeof(SSL_Referee::command_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SSL_Referee, yellow_)>(
          reinterpret_cast<char*>(&yellow_),
          reinterpret_cast<char*>(&other->yellow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_Referee::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSL_Referee_TeamInfo* Arena::CreateMaybeMessage< ::SSL_Referee_TeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_Referee_TeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_Referee* Arena::CreateMaybeMessage< ::SSL_Referee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_Referee >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
