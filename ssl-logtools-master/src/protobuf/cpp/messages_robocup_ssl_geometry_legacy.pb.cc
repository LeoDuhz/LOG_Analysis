// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry_legacy.proto

#include "messages_robocup_ssl_geometry_legacy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_GeometryCameraCalibration_messages_5frobocup_5fssl_5fgeometry_2eproto;
namespace RoboCup2014Legacy {
namespace Geometry {
class SSL_GeometryFieldSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_GeometryFieldSize> _instance;
} _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_GeometryData> _instance;
} _SSL_GeometryData_default_instance_;
}  // namespace Geometry
}  // namespace RoboCup2014Legacy
static void InitDefaultsscc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_;
    new (ptr) ::RoboCup2014Legacy::Geometry::SSL_GeometryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCup2014Legacy::Geometry::SSL_GeometryData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto}, {
      &scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base,
      &scc_info_SSL_GeometryCameraCalibration_messages_5frobocup_5fssl_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCup2014Legacy::Geometry::_SSL_GeometryFieldSize_default_instance_;
    new (ptr) ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, line_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, field_length_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, field_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, boundary_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, referee_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_depth_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, goal_wall_width_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, center_circle_radius_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, defense_radius_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, defense_stretch_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, free_kick_from_defense_dist_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, penalty_spot_from_field_line_dist_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize, penalty_line_from_spot_dist_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, field_),
  PROTOBUF_FIELD_OFFSET(::RoboCup2014Legacy::Geometry::SSL_GeometryData, calib_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize)},
  { 33, 40, sizeof(::RoboCup2014Legacy::Geometry::SSL_GeometryData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCup2014Legacy::Geometry::_SSL_GeometryFieldSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_),
};

const char descriptor_table_protodef_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*messages_robocup_ssl_geometry_legacy.p"
  "roto\022\032RoboCup2014Legacy.Geometry\032#messag"
  "es_robocup_ssl_geometry.proto\"\212\003\n\025SSL_Ge"
  "ometryFieldSize\022\022\n\nline_width\030\001 \002(\005\022\024\n\014f"
  "ield_length\030\002 \002(\005\022\023\n\013field_width\030\003 \002(\005\022\026"
  "\n\016boundary_width\030\004 \002(\005\022\025\n\rreferee_width\030"
  "\005 \002(\005\022\022\n\ngoal_width\030\006 \002(\005\022\022\n\ngoal_depth\030"
  "\007 \002(\005\022\027\n\017goal_wall_width\030\010 \002(\005\022\034\n\024center"
  "_circle_radius\030\t \002(\005\022\026\n\016defense_radius\030\n"
  " \002(\005\022\027\n\017defense_stretch\030\013 \002(\005\022#\n\033free_ki"
  "ck_from_defense_dist\030\014 \002(\005\022)\n!penalty_sp"
  "ot_from_field_line_dist\030\r \002(\005\022#\n\033penalty"
  "_line_from_spot_dist\030\016 \002(\005\"\203\001\n\020SSL_Geome"
  "tryData\022@\n\005field\030\001 \002(\01321.RoboCup2014Lega"
  "cy.Geometry.SSL_GeometryFieldSize\022-\n\005cal"
  "ib\030\002 \003(\0132\036.SSL_GeometryCameraCalibration"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_deps[1] = {
  &::descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_sccs[2] = {
  &scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base,
  &scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = {
  false, false, descriptor_table_protodef_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, "messages_robocup_ssl_geometry_legacy.proto", 640,
  &descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_once, descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_sccs, descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto::offsets,
  file_level_metadata_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, 2, file_level_enum_descriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto, file_level_service_descriptors_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto)), true);
namespace RoboCup2014Legacy {
namespace Geometry {

// ===================================================================

void SSL_GeometryFieldSize::InitAsDefaultInstance() {
}
class SSL_GeometryFieldSize::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_GeometryFieldSize>()._has_bits_);
  static void set_has_line_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boundary_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_referee_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_goal_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_goal_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_goal_wall_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_center_circle_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_defense_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_defense_stretch(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_free_kick_from_defense_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_penalty_spot_from_field_line_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_penalty_line_from_spot_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003fff) ^ 0x00003fff) != 0;
  }
};

SSL_GeometryFieldSize::SSL_GeometryFieldSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_width_, &from.line_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
    reinterpret_cast<char*>(&line_width_)) + sizeof(penalty_line_from_spot_dist_));
  // @@protoc_insertion_point(copy_constructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
}

void SSL_GeometryFieldSize::SharedCtor() {
  ::memset(&line_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
      reinterpret_cast<char*>(&line_width_)) + sizeof(penalty_line_from_spot_dist_));
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_GeometryFieldSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSL_GeometryFieldSize::ArenaDtor(void* object) {
  SSL_GeometryFieldSize* _this = reinterpret_cast< SSL_GeometryFieldSize* >(object);
  (void)_this;
}
void SSL_GeometryFieldSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_GeometryFieldSize& SSL_GeometryFieldSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_GeometryFieldSize_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base);
  return *internal_default_instance();
}


void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&line_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goal_wall_width_) -
        reinterpret_cast<char*>(&line_width_)) + sizeof(goal_wall_width_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&center_circle_radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
        reinterpret_cast<char*>(&center_circle_radius_)) + sizeof(penalty_line_from_spot_dist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryFieldSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 line_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_line_width(&has_bits);
          line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 field_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field_length(&has_bits);
          field_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 field_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_field_width(&has_bits);
          field_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 boundary_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_boundary_width(&has_bits);
          boundary_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 referee_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_referee_width(&has_bits);
          referee_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 goal_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_goal_width(&has_bits);
          goal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 goal_depth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_goal_depth(&has_bits);
          goal_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 goal_wall_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_goal_wall_width(&has_bits);
          goal_wall_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 center_circle_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_center_circle_radius(&has_bits);
          center_circle_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 defense_radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_defense_radius(&has_bits);
          defense_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 defense_stretch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_defense_stretch(&has_bits);
          defense_stretch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 free_kick_from_defense_dist = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_free_kick_from_defense_dist(&has_bits);
          free_kick_from_defense_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 penalty_spot_from_field_line_dist = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_penalty_spot_from_field_line_dist(&has_bits);
          penalty_spot_from_field_line_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 penalty_line_from_spot_dist = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_penalty_line_from_spot_dist(&has_bits);
          penalty_line_from_spot_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_GeometryFieldSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 line_width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_line_width(), target);
  }

  // required int32 field_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_field_length(), target);
  }

  // required int32 field_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_field_width(), target);
  }

  // required int32 boundary_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_boundary_width(), target);
  }

  // required int32 referee_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_referee_width(), target);
  }

  // required int32 goal_width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_goal_width(), target);
  }

  // required int32 goal_depth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_goal_depth(), target);
  }

  // required int32 goal_wall_width = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_goal_wall_width(), target);
  }

  // required int32 center_circle_radius = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_center_circle_radius(), target);
  }

  // required int32 defense_radius = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_defense_radius(), target);
  }

  // required int32 defense_stretch = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_defense_stretch(), target);
  }

  // required int32 free_kick_from_defense_dist = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_free_kick_from_defense_dist(), target);
  }

  // required int32 penalty_spot_from_field_line_dist = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_penalty_spot_from_field_line_dist(), target);
  }

  // required int32 penalty_line_from_spot_dist = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_penalty_line_from_spot_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (_internal_has_line_width()) {
    // required int32 line_width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_width());
  }

  if (_internal_has_field_length()) {
    // required int32 field_length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_length());
  }

  if (_internal_has_field_width()) {
    // required int32 field_width = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_width());
  }

  if (_internal_has_boundary_width()) {
    // required int32 boundary_width = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boundary_width());
  }

  if (_internal_has_referee_width()) {
    // required int32 referee_width = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_referee_width());
  }

  if (_internal_has_goal_width()) {
    // required int32 goal_width = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goal_width());
  }

  if (_internal_has_goal_depth()) {
    // required int32 goal_depth = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goal_depth());
  }

  if (_internal_has_goal_wall_width()) {
    // required int32 goal_wall_width = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goal_wall_width());
  }

  if (_internal_has_center_circle_radius()) {
    // required int32 center_circle_radius = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center_circle_radius());
  }

  if (_internal_has_defense_radius()) {
    // required int32 defense_radius = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_defense_radius());
  }

  if (_internal_has_defense_stretch()) {
    // required int32 defense_stretch = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_defense_stretch());
  }

  if (_internal_has_free_kick_from_defense_dist()) {
    // required int32 free_kick_from_defense_dist = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_kick_from_defense_dist());
  }

  if (_internal_has_penalty_spot_from_field_line_dist()) {
    // required int32 penalty_spot_from_field_line_dist = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_penalty_spot_from_field_line_dist());
  }

  if (_internal_has_penalty_line_from_spot_dist()) {
    // required int32 penalty_line_from_spot_dist = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_penalty_line_from_spot_dist());
  }

  return total_size;
}
size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required int32 line_width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_width());

    // required int32 field_length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_length());

    // required int32 field_width = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_field_width());

    // required int32 boundary_width = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boundary_width());

    // required int32 referee_width = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_referee_width());

    // required int32 goal_width = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goal_width());

    // required int32 goal_depth = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goal_depth());

    // required int32 goal_wall_width = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goal_wall_width());

    // required int32 center_circle_radius = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center_circle_radius());

    // required int32 defense_radius = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_defense_radius());

    // required int32 defense_stretch = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_defense_stretch());

    // required int32 free_kick_from_defense_dist = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_kick_from_defense_dist());

    // required int32 penalty_spot_from_field_line_dist = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_penalty_spot_from_field_line_dist());

    // required int32 penalty_line_from_spot_dist = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_penalty_line_from_spot_dist());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_GeometryFieldSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryFieldSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_GeometryFieldSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
    MergeFrom(*source);
  }
}

void SSL_GeometryFieldSize::MergeFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      line_width_ = from.line_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_length_ = from.field_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      field_width_ = from.field_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      boundary_width_ = from.boundary_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      referee_width_ = from.referee_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      goal_width_ = from.goal_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      goal_depth_ = from.goal_depth_;
    }
    if (cached_has_bits & 0x00000080u) {
      goal_wall_width_ = from.goal_wall_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      center_circle_radius_ = from.center_circle_radius_;
    }
    if (cached_has_bits & 0x00000200u) {
      defense_radius_ = from.defense_radius_;
    }
    if (cached_has_bits & 0x00000400u) {
      defense_stretch_ = from.defense_stretch_;
    }
    if (cached_has_bits & 0x00000800u) {
      free_kick_from_defense_dist_ = from.free_kick_from_defense_dist_;
    }
    if (cached_has_bits & 0x00001000u) {
      penalty_spot_from_field_line_dist_ = from.penalty_spot_from_field_line_dist_;
    }
    if (cached_has_bits & 0x00002000u) {
      penalty_line_from_spot_dist_ = from.penalty_line_from_spot_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_GeometryFieldSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, penalty_line_from_spot_dist_)
      + sizeof(SSL_GeometryFieldSize::penalty_line_from_spot_dist_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, line_width_)>(
          reinterpret_cast<char*>(&line_width_),
          reinterpret_cast<char*>(&other->line_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSL_GeometryData::InitAsDefaultInstance() {
  ::RoboCup2014Legacy::Geometry::_SSL_GeometryData_default_instance_._instance.get_mutable()->field_ = const_cast< ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize*>(
      ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::internal_default_instance());
}
class SSL_GeometryData::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_GeometryData>()._has_bits_);
  static const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize& field(const SSL_GeometryData* msg);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize&
SSL_GeometryData::_Internal::field(const SSL_GeometryData* msg) {
  return *msg->field_;
}
void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
SSL_GeometryData::SSL_GeometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  calib_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      calib_(from.calib_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_field()) {
    field_ = new ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
}

void SSL_GeometryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base);
  field_ = nullptr;
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_GeometryData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete field_;
}

void SSL_GeometryData::ArenaDtor(void* object) {
  SSL_GeometryData* _this = reinterpret_cast< SSL_GeometryData* >(object);
  (void)_this;
}
void SSL_GeometryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_GeometryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_GeometryData& SSL_GeometryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_GeometryData_messages_5frobocup_5fssl_5fgeometry_5flegacy_2eproto.base);
  return *internal_default_instance();
}


void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calib_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(field_ != nullptr);
    field_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calib(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_GeometryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::field(this), target, stream);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_calib_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_calib(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  size_t total_size = 0;

  // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;
  if (_internal_has_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  total_size += 1UL * this->_internal_calib_size();
  for (const auto& msg : this->calib_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_GeometryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_GeometryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCup2014Legacy.Geometry.SSL_GeometryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCup2014Legacy.Geometry.SSL_GeometryData)
    MergeFrom(*source);
  }
}

void SSL_GeometryData::MergeFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calib_.MergeFrom(from.calib_);
  if (from._internal_has_field()) {
    _internal_mutable_field()->::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize::MergeFrom(from._internal_field());
  }
}

void SSL_GeometryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCup2014Legacy.Geometry.SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(calib_)) return false;
  if (_internal_has_field()) {
    if (!field_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  calib_.InternalSwap(&other->calib_);
  swap(field_, other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Geometry
}  // namespace RoboCup2014Legacy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize* Arena::CreateMaybeMessage< ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCup2014Legacy::Geometry::SSL_GeometryFieldSize >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCup2014Legacy::Geometry::SSL_GeometryData* Arena::CreateMaybeMessage< ::RoboCup2014Legacy::Geometry::SSL_GeometryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCup2014Legacy::Geometry::SSL_GeometryData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
