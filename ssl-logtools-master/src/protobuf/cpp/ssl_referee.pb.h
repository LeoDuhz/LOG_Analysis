// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_referee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5freferee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5freferee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_game_event.pb.h"
#include "ssl_game_event_2019.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5freferee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5freferee_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5freferee_2eproto;
class ProposedGameEvent;
class ProposedGameEventDefaultTypeInternal;
extern ProposedGameEventDefaultTypeInternal _ProposedGameEvent_default_instance_;
class Referee;
class RefereeDefaultTypeInternal;
extern RefereeDefaultTypeInternal _Referee_default_instance_;
class Referee_Point;
class Referee_PointDefaultTypeInternal;
extern Referee_PointDefaultTypeInternal _Referee_Point_default_instance_;
class Referee_TeamInfo;
class Referee_TeamInfoDefaultTypeInternal;
extern Referee_TeamInfoDefaultTypeInternal _Referee_TeamInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ProposedGameEvent* Arena::CreateMaybeMessage<::ProposedGameEvent>(Arena*);
template<> ::Referee* Arena::CreateMaybeMessage<::Referee>(Arena*);
template<> ::Referee_Point* Arena::CreateMaybeMessage<::Referee_Point>(Arena*);
template<> ::Referee_TeamInfo* Arena::CreateMaybeMessage<::Referee_TeamInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Referee_Stage : int {
  Referee_Stage_NORMAL_FIRST_HALF_PRE = 0,
  Referee_Stage_NORMAL_FIRST_HALF = 1,
  Referee_Stage_NORMAL_HALF_TIME = 2,
  Referee_Stage_NORMAL_SECOND_HALF_PRE = 3,
  Referee_Stage_NORMAL_SECOND_HALF = 4,
  Referee_Stage_EXTRA_TIME_BREAK = 5,
  Referee_Stage_EXTRA_FIRST_HALF_PRE = 6,
  Referee_Stage_EXTRA_FIRST_HALF = 7,
  Referee_Stage_EXTRA_HALF_TIME = 8,
  Referee_Stage_EXTRA_SECOND_HALF_PRE = 9,
  Referee_Stage_EXTRA_SECOND_HALF = 10,
  Referee_Stage_PENALTY_SHOOTOUT_BREAK = 11,
  Referee_Stage_PENALTY_SHOOTOUT = 12,
  Referee_Stage_POST_GAME = 13
};
bool Referee_Stage_IsValid(int value);
constexpr Referee_Stage Referee_Stage_Stage_MIN = Referee_Stage_NORMAL_FIRST_HALF_PRE;
constexpr Referee_Stage Referee_Stage_Stage_MAX = Referee_Stage_POST_GAME;
constexpr int Referee_Stage_Stage_ARRAYSIZE = Referee_Stage_Stage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Stage_descriptor();
template<typename T>
inline const std::string& Referee_Stage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Referee_Stage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Referee_Stage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Referee_Stage_descriptor(), enum_t_value);
}
inline bool Referee_Stage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Referee_Stage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Referee_Stage>(
    Referee_Stage_descriptor(), name, value);
}
enum Referee_Command : int {
  Referee_Command_HALT = 0,
  Referee_Command_STOP = 1,
  Referee_Command_NORMAL_START = 2,
  Referee_Command_FORCE_START = 3,
  Referee_Command_PREPARE_KICKOFF_YELLOW = 4,
  Referee_Command_PREPARE_KICKOFF_BLUE = 5,
  Referee_Command_PREPARE_PENALTY_YELLOW = 6,
  Referee_Command_PREPARE_PENALTY_BLUE = 7,
  Referee_Command_DIRECT_FREE_YELLOW = 8,
  Referee_Command_DIRECT_FREE_BLUE = 9,
  Referee_Command_INDIRECT_FREE_YELLOW = 10,
  Referee_Command_INDIRECT_FREE_BLUE = 11,
  Referee_Command_TIMEOUT_YELLOW = 12,
  Referee_Command_TIMEOUT_BLUE = 13,
  Referee_Command_GOAL_YELLOW PROTOBUF_DEPRECATED_ENUM = 14,
  Referee_Command_GOAL_BLUE PROTOBUF_DEPRECATED_ENUM = 15,
  Referee_Command_BALL_PLACEMENT_YELLOW = 16,
  Referee_Command_BALL_PLACEMENT_BLUE = 17
};
bool Referee_Command_IsValid(int value);
constexpr Referee_Command Referee_Command_Command_MIN = Referee_Command_HALT;
constexpr Referee_Command Referee_Command_Command_MAX = Referee_Command_BALL_PLACEMENT_BLUE;
constexpr int Referee_Command_Command_ARRAYSIZE = Referee_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Command_descriptor();
template<typename T>
inline const std::string& Referee_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Referee_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Referee_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Referee_Command_descriptor(), enum_t_value);
}
inline bool Referee_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Referee_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Referee_Command>(
    Referee_Command_descriptor(), name, value);
}
// ===================================================================

class Referee_TeamInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Referee.TeamInfo) */ {
 public:
  inline Referee_TeamInfo() : Referee_TeamInfo(nullptr) {}
  virtual ~Referee_TeamInfo();

  Referee_TeamInfo(const Referee_TeamInfo& from);
  Referee_TeamInfo(Referee_TeamInfo&& from) noexcept
    : Referee_TeamInfo() {
    *this = ::std::move(from);
  }

  inline Referee_TeamInfo& operator=(const Referee_TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee_TeamInfo& operator=(Referee_TeamInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Referee_TeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Referee_TeamInfo* internal_default_instance() {
    return reinterpret_cast<const Referee_TeamInfo*>(
               &_Referee_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Referee_TeamInfo& a, Referee_TeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Referee_TeamInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee_TeamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Referee_TeamInfo* New() const final {
    return CreateMaybeMessage<Referee_TeamInfo>(nullptr);
  }

  Referee_TeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Referee_TeamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Referee_TeamInfo& from);
  void MergeFrom(const Referee_TeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Referee_TeamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Referee.TeamInfo";
  }
  protected:
  explicit Referee_TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5freferee_2eproto);
    return ::descriptor_table_ssl_5freferee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYellowCardTimesFieldNumber = 4,
    kNameFieldNumber = 1,
    kScoreFieldNumber = 2,
    kRedCardsFieldNumber = 3,
    kYellowCardsFieldNumber = 5,
    kTimeoutsFieldNumber = 6,
    kTimeoutTimeFieldNumber = 7,
    kGoalkeeperFieldNumber = 8,
    kFoulCounterFieldNumber = 9,
    kBallPlacementFailuresFieldNumber = 10,
    kCanPlaceBallFieldNumber = 12,
    kMaxAllowedBotsFieldNumber = 13,
  };
  // repeated uint32 yellow_card_times = 4 [packed = true];
  int yellow_card_times_size() const;
  private:
  int _internal_yellow_card_times_size() const;
  public:
  void clear_yellow_card_times();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_yellow_card_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_yellow_card_times() const;
  void _internal_add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_yellow_card_times();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 yellow_card_times(int index) const;
  void set_yellow_card_times(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      yellow_card_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_yellow_card_times();

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 red_cards = 3;
  bool has_red_cards() const;
  private:
  bool _internal_has_red_cards() const;
  public:
  void clear_red_cards();
  ::PROTOBUF_NAMESPACE_ID::uint32 red_cards() const;
  void set_red_cards(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_red_cards() const;
  void _internal_set_red_cards(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 yellow_cards = 5;
  bool has_yellow_cards() const;
  private:
  bool _internal_has_yellow_cards() const;
  public:
  void clear_yellow_cards();
  ::PROTOBUF_NAMESPACE_ID::uint32 yellow_cards() const;
  void set_yellow_cards(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_yellow_cards() const;
  void _internal_set_yellow_cards(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 timeouts = 6;
  bool has_timeouts() const;
  private:
  bool _internal_has_timeouts() const;
  public:
  void clear_timeouts();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeouts() const;
  void set_timeouts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeouts() const;
  void _internal_set_timeouts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 timeout_time = 7;
  bool has_timeout_time() const;
  private:
  bool _internal_has_timeout_time() const;
  public:
  void clear_timeout_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_time() const;
  void set_timeout_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout_time() const;
  void _internal_set_timeout_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 goalkeeper = 8;
  bool has_goalkeeper() const;
  private:
  bool _internal_has_goalkeeper() const;
  public:
  void clear_goalkeeper();
  ::PROTOBUF_NAMESPACE_ID::uint32 goalkeeper() const;
  void set_goalkeeper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_goalkeeper() const;
  void _internal_set_goalkeeper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 foul_counter = 9;
  bool has_foul_counter() const;
  private:
  bool _internal_has_foul_counter() const;
  public:
  void clear_foul_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 foul_counter() const;
  void set_foul_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_foul_counter() const;
  void _internal_set_foul_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ball_placement_failures = 10;
  bool has_ball_placement_failures() const;
  private:
  bool _internal_has_ball_placement_failures() const;
  public:
  void clear_ball_placement_failures();
  ::PROTOBUF_NAMESPACE_ID::uint32 ball_placement_failures() const;
  void set_ball_placement_failures(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ball_placement_failures() const;
  void _internal_set_ball_placement_failures(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool can_place_ball = 12;
  bool has_can_place_ball() const;
  private:
  bool _internal_has_can_place_ball() const;
  public:
  void clear_can_place_ball();
  bool can_place_ball() const;
  void set_can_place_ball(bool value);
  private:
  bool _internal_can_place_ball() const;
  void _internal_set_can_place_ball(bool value);
  public:

  // optional uint32 max_allowed_bots = 13;
  bool has_max_allowed_bots() const;
  private:
  bool _internal_has_max_allowed_bots() const;
  public:
  void clear_max_allowed_bots();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_allowed_bots() const;
  void set_max_allowed_bots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_allowed_bots() const;
  void _internal_set_max_allowed_bots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Referee.TeamInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > yellow_card_times_;
  mutable std::atomic<int> _yellow_card_times_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 red_cards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 yellow_cards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeouts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 goalkeeper_;
  ::PROTOBUF_NAMESPACE_ID::uint32 foul_counter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ball_placement_failures_;
  bool can_place_ball_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_allowed_bots_;
  friend struct ::TableStruct_ssl_5freferee_2eproto;
};
// -------------------------------------------------------------------

class Referee_Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Referee.Point) */ {
 public:
  inline Referee_Point() : Referee_Point(nullptr) {}
  virtual ~Referee_Point();

  Referee_Point(const Referee_Point& from);
  Referee_Point(Referee_Point&& from) noexcept
    : Referee_Point() {
    *this = ::std::move(from);
  }

  inline Referee_Point& operator=(const Referee_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee_Point& operator=(Referee_Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Referee_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Referee_Point* internal_default_instance() {
    return reinterpret_cast<const Referee_Point*>(
               &_Referee_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Referee_Point& a, Referee_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Referee_Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Referee_Point* New() const final {
    return CreateMaybeMessage<Referee_Point>(nullptr);
  }

  Referee_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Referee_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Referee_Point& from);
  void MergeFrom(const Referee_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Referee_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Referee.Point";
  }
  protected:
  explicit Referee_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5freferee_2eproto);
    return ::descriptor_table_ssl_5freferee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Referee.Point)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_ssl_5freferee_2eproto;
};
// -------------------------------------------------------------------

class Referee PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Referee) */ {
 public:
  inline Referee() : Referee(nullptr) {}
  virtual ~Referee();

  Referee(const Referee& from);
  Referee(Referee&& from) noexcept
    : Referee() {
    *this = ::std::move(from);
  }

  inline Referee& operator=(const Referee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee& operator=(Referee&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Referee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Referee* internal_default_instance() {
    return reinterpret_cast<const Referee*>(
               &_Referee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Referee& a, Referee& b) {
    a.Swap(&b);
  }
  inline void Swap(Referee* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Referee* New() const final {
    return CreateMaybeMessage<Referee>(nullptr);
  }

  Referee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Referee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Referee& from);
  void MergeFrom(const Referee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Referee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Referee";
  }
  protected:
  explicit Referee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5freferee_2eproto);
    return ::descriptor_table_ssl_5freferee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Referee_TeamInfo TeamInfo;
  typedef Referee_Point Point;

  typedef Referee_Stage Stage;
  static constexpr Stage NORMAL_FIRST_HALF_PRE =
    Referee_Stage_NORMAL_FIRST_HALF_PRE;
  static constexpr Stage NORMAL_FIRST_HALF =
    Referee_Stage_NORMAL_FIRST_HALF;
  static constexpr Stage NORMAL_HALF_TIME =
    Referee_Stage_NORMAL_HALF_TIME;
  static constexpr Stage NORMAL_SECOND_HALF_PRE =
    Referee_Stage_NORMAL_SECOND_HALF_PRE;
  static constexpr Stage NORMAL_SECOND_HALF =
    Referee_Stage_NORMAL_SECOND_HALF;
  static constexpr Stage EXTRA_TIME_BREAK =
    Referee_Stage_EXTRA_TIME_BREAK;
  static constexpr Stage EXTRA_FIRST_HALF_PRE =
    Referee_Stage_EXTRA_FIRST_HALF_PRE;
  static constexpr Stage EXTRA_FIRST_HALF =
    Referee_Stage_EXTRA_FIRST_HALF;
  static constexpr Stage EXTRA_HALF_TIME =
    Referee_Stage_EXTRA_HALF_TIME;
  static constexpr Stage EXTRA_SECOND_HALF_PRE =
    Referee_Stage_EXTRA_SECOND_HALF_PRE;
  static constexpr Stage EXTRA_SECOND_HALF =
    Referee_Stage_EXTRA_SECOND_HALF;
  static constexpr Stage PENALTY_SHOOTOUT_BREAK =
    Referee_Stage_PENALTY_SHOOTOUT_BREAK;
  static constexpr Stage PENALTY_SHOOTOUT =
    Referee_Stage_PENALTY_SHOOTOUT;
  static constexpr Stage POST_GAME =
    Referee_Stage_POST_GAME;
  static inline bool Stage_IsValid(int value) {
    return Referee_Stage_IsValid(value);
  }
  static constexpr Stage Stage_MIN =
    Referee_Stage_Stage_MIN;
  static constexpr Stage Stage_MAX =
    Referee_Stage_Stage_MAX;
  static constexpr int Stage_ARRAYSIZE =
    Referee_Stage_Stage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Stage_descriptor() {
    return Referee_Stage_descriptor();
  }
  template<typename T>
  static inline const std::string& Stage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Stage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Stage_Name.");
    return Referee_Stage_Name(enum_t_value);
  }
  static inline bool Stage_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Stage* value) {
    return Referee_Stage_Parse(name, value);
  }

  typedef Referee_Command Command;
  static constexpr Command HALT =
    Referee_Command_HALT;
  static constexpr Command STOP =
    Referee_Command_STOP;
  static constexpr Command NORMAL_START =
    Referee_Command_NORMAL_START;
  static constexpr Command FORCE_START =
    Referee_Command_FORCE_START;
  static constexpr Command PREPARE_KICKOFF_YELLOW =
    Referee_Command_PREPARE_KICKOFF_YELLOW;
  static constexpr Command PREPARE_KICKOFF_BLUE =
    Referee_Command_PREPARE_KICKOFF_BLUE;
  static constexpr Command PREPARE_PENALTY_YELLOW =
    Referee_Command_PREPARE_PENALTY_YELLOW;
  static constexpr Command PREPARE_PENALTY_BLUE =
    Referee_Command_PREPARE_PENALTY_BLUE;
  static constexpr Command DIRECT_FREE_YELLOW =
    Referee_Command_DIRECT_FREE_YELLOW;
  static constexpr Command DIRECT_FREE_BLUE =
    Referee_Command_DIRECT_FREE_BLUE;
  static constexpr Command INDIRECT_FREE_YELLOW =
    Referee_Command_INDIRECT_FREE_YELLOW;
  static constexpr Command INDIRECT_FREE_BLUE =
    Referee_Command_INDIRECT_FREE_BLUE;
  static constexpr Command TIMEOUT_YELLOW =
    Referee_Command_TIMEOUT_YELLOW;
  static constexpr Command TIMEOUT_BLUE =
    Referee_Command_TIMEOUT_BLUE;
  PROTOBUF_DEPRECATED_ENUM static constexpr Command GOAL_YELLOW =
    Referee_Command_GOAL_YELLOW;
  PROTOBUF_DEPRECATED_ENUM static constexpr Command GOAL_BLUE =
    Referee_Command_GOAL_BLUE;
  static constexpr Command BALL_PLACEMENT_YELLOW =
    Referee_Command_BALL_PLACEMENT_YELLOW;
  static constexpr Command BALL_PLACEMENT_BLUE =
    Referee_Command_BALL_PLACEMENT_BLUE;
  static inline bool Command_IsValid(int value) {
    return Referee_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Referee_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Referee_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Referee_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Referee_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Referee_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return Referee_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGameEventsFieldNumber = 13,
    kProposedGameEventsFieldNumber = 14,
    kYellowFieldNumber = 7,
    kBlueFieldNumber = 8,
    kDesignatedPositionFieldNumber = 9,
    kGameEventFieldNumber = 11,
    kPacketTimestampFieldNumber = 1,
    kStageFieldNumber = 2,
    kStageTimeLeftFieldNumber = 3,
    kCommandFieldNumber = 4,
    kCommandCounterFieldNumber = 5,
    kCommandTimestampFieldNumber = 6,
    kBlueTeamOnPositiveHalfFieldNumber = 10,
    kNextCommandFieldNumber = 12,
    kCurrentActionTimeRemainingFieldNumber = 15,
  };
  // repeated .GameEvent game_events = 13;
  int game_events_size() const;
  private:
  int _internal_game_events_size() const;
  public:
  void clear_game_events();
  ::GameEvent* mutable_game_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >*
      mutable_game_events();
  private:
  const ::GameEvent& _internal_game_events(int index) const;
  ::GameEvent* _internal_add_game_events();
  public:
  const ::GameEvent& game_events(int index) const;
  ::GameEvent* add_game_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >&
      game_events() const;

  // repeated .ProposedGameEvent proposed_game_events = 14;
  int proposed_game_events_size() const;
  private:
  int _internal_proposed_game_events_size() const;
  public:
  void clear_proposed_game_events();
  ::ProposedGameEvent* mutable_proposed_game_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposedGameEvent >*
      mutable_proposed_game_events();
  private:
  const ::ProposedGameEvent& _internal_proposed_game_events(int index) const;
  ::ProposedGameEvent* _internal_add_proposed_game_events();
  public:
  const ::ProposedGameEvent& proposed_game_events(int index) const;
  ::ProposedGameEvent* add_proposed_game_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposedGameEvent >&
      proposed_game_events() const;

  // required .Referee.TeamInfo yellow = 7;
  bool has_yellow() const;
  private:
  bool _internal_has_yellow() const;
  public:
  void clear_yellow();
  const ::Referee_TeamInfo& yellow() const;
  ::Referee_TeamInfo* release_yellow();
  ::Referee_TeamInfo* mutable_yellow();
  void set_allocated_yellow(::Referee_TeamInfo* yellow);
  private:
  const ::Referee_TeamInfo& _internal_yellow() const;
  ::Referee_TeamInfo* _internal_mutable_yellow();
  public:
  void unsafe_arena_set_allocated_yellow(
      ::Referee_TeamInfo* yellow);
  ::Referee_TeamInfo* unsafe_arena_release_yellow();

  // required .Referee.TeamInfo blue = 8;
  bool has_blue() const;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  const ::Referee_TeamInfo& blue() const;
  ::Referee_TeamInfo* release_blue();
  ::Referee_TeamInfo* mutable_blue();
  void set_allocated_blue(::Referee_TeamInfo* blue);
  private:
  const ::Referee_TeamInfo& _internal_blue() const;
  ::Referee_TeamInfo* _internal_mutable_blue();
  public:
  void unsafe_arena_set_allocated_blue(
      ::Referee_TeamInfo* blue);
  ::Referee_TeamInfo* unsafe_arena_release_blue();

  // optional .Referee.Point designated_position = 9;
  bool has_designated_position() const;
  private:
  bool _internal_has_designated_position() const;
  public:
  void clear_designated_position();
  const ::Referee_Point& designated_position() const;
  ::Referee_Point* release_designated_position();
  ::Referee_Point* mutable_designated_position();
  void set_allocated_designated_position(::Referee_Point* designated_position);
  private:
  const ::Referee_Point& _internal_designated_position() const;
  ::Referee_Point* _internal_mutable_designated_position();
  public:
  void unsafe_arena_set_allocated_designated_position(
      ::Referee_Point* designated_position);
  ::Referee_Point* unsafe_arena_release_designated_position();

  // optional .Game_Event game_event = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  PROTOBUF_DEPRECATED void clear_game_event();
  PROTOBUF_DEPRECATED const ::Game_Event& game_event() const;
  PROTOBUF_DEPRECATED ::Game_Event* release_game_event();
  PROTOBUF_DEPRECATED ::Game_Event* mutable_game_event();
  PROTOBUF_DEPRECATED void set_allocated_game_event(::Game_Event* game_event);
  private:
  const ::Game_Event& _internal_game_event() const;
  ::Game_Event* _internal_mutable_game_event();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_game_event(
      ::Game_Event* game_event);
  PROTOBUF_DEPRECATED ::Game_Event* unsafe_arena_release_game_event();

  // required uint64 packet_timestamp = 1;
  bool has_packet_timestamp() const;
  private:
  bool _internal_has_packet_timestamp() const;
  public:
  void clear_packet_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 packet_timestamp() const;
  void set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_packet_timestamp() const;
  void _internal_set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .Referee.Stage stage = 2;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  ::Referee_Stage stage() const;
  void set_stage(::Referee_Stage value);
  private:
  ::Referee_Stage _internal_stage() const;
  void _internal_set_stage(::Referee_Stage value);
  public:

  // optional sint32 stage_time_left = 3;
  bool has_stage_time_left() const;
  private:
  bool _internal_has_stage_time_left() const;
  public:
  void clear_stage_time_left();
  ::PROTOBUF_NAMESPACE_ID::int32 stage_time_left() const;
  void set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage_time_left() const;
  void _internal_set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .Referee.Command command = 4;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::Referee_Command command() const;
  void set_command(::Referee_Command value);
  private:
  ::Referee_Command _internal_command() const;
  void _internal_set_command(::Referee_Command value);
  public:

  // required uint32 command_counter = 5;
  bool has_command_counter() const;
  private:
  bool _internal_has_command_counter() const;
  public:
  void clear_command_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 command_counter() const;
  void set_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command_counter() const;
  void _internal_set_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 command_timestamp = 6;
  bool has_command_timestamp() const;
  private:
  bool _internal_has_command_timestamp() const;
  public:
  void clear_command_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 command_timestamp() const;
  void set_command_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_command_timestamp() const;
  void _internal_set_command_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool blue_team_on_positive_half = 10;
  bool has_blue_team_on_positive_half() const;
  private:
  bool _internal_has_blue_team_on_positive_half() const;
  public:
  void clear_blue_team_on_positive_half();
  bool blue_team_on_positive_half() const;
  void set_blue_team_on_positive_half(bool value);
  private:
  bool _internal_blue_team_on_positive_half() const;
  void _internal_set_blue_team_on_positive_half(bool value);
  public:

  // optional .Referee.Command next_command = 12;
  bool has_next_command() const;
  private:
  bool _internal_has_next_command() const;
  public:
  void clear_next_command();
  ::Referee_Command next_command() const;
  void set_next_command(::Referee_Command value);
  private:
  ::Referee_Command _internal_next_command() const;
  void _internal_set_next_command(::Referee_Command value);
  public:

  // optional int32 current_action_time_remaining = 15;
  bool has_current_action_time_remaining() const;
  private:
  bool _internal_has_current_action_time_remaining() const;
  public:
  void clear_current_action_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 current_action_time_remaining() const;
  void set_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_action_time_remaining() const;
  void _internal_set_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Referee)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent > game_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposedGameEvent > proposed_game_events_;
  ::Referee_TeamInfo* yellow_;
  ::Referee_TeamInfo* blue_;
  ::Referee_Point* designated_position_;
  ::Game_Event* game_event_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packet_timestamp_;
  int stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_time_left_;
  int command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_counter_;
  ::PROTOBUF_NAMESPACE_ID::uint64 command_timestamp_;
  bool blue_team_on_positive_half_;
  int next_command_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_action_time_remaining_;
  friend struct ::TableStruct_ssl_5freferee_2eproto;
};
// -------------------------------------------------------------------

class ProposedGameEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProposedGameEvent) */ {
 public:
  inline ProposedGameEvent() : ProposedGameEvent(nullptr) {}
  virtual ~ProposedGameEvent();

  ProposedGameEvent(const ProposedGameEvent& from);
  ProposedGameEvent(ProposedGameEvent&& from) noexcept
    : ProposedGameEvent() {
    *this = ::std::move(from);
  }

  inline ProposedGameEvent& operator=(const ProposedGameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposedGameEvent& operator=(ProposedGameEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposedGameEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposedGameEvent* internal_default_instance() {
    return reinterpret_cast<const ProposedGameEvent*>(
               &_ProposedGameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProposedGameEvent& a, ProposedGameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposedGameEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposedGameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposedGameEvent* New() const final {
    return CreateMaybeMessage<ProposedGameEvent>(nullptr);
  }

  ProposedGameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposedGameEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposedGameEvent& from);
  void MergeFrom(const ProposedGameEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposedGameEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProposedGameEvent";
  }
  protected:
  explicit ProposedGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5freferee_2eproto);
    return ::descriptor_table_ssl_5freferee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposerIdFieldNumber = 2,
    kGameEventFieldNumber = 3,
    kValidUntilFieldNumber = 1,
  };
  // required string proposer_id = 2;
  bool has_proposer_id() const;
  private:
  bool _internal_has_proposer_id() const;
  public:
  void clear_proposer_id();
  const std::string& proposer_id() const;
  void set_proposer_id(const std::string& value);
  void set_proposer_id(std::string&& value);
  void set_proposer_id(const char* value);
  void set_proposer_id(const char* value, size_t size);
  std::string* mutable_proposer_id();
  std::string* release_proposer_id();
  void set_allocated_proposer_id(std::string* proposer_id);
  private:
  const std::string& _internal_proposer_id() const;
  void _internal_set_proposer_id(const std::string& value);
  std::string* _internal_mutable_proposer_id();
  public:

  // required .GameEvent game_event = 3;
  bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  void clear_game_event();
  const ::GameEvent& game_event() const;
  ::GameEvent* release_game_event();
  ::GameEvent* mutable_game_event();
  void set_allocated_game_event(::GameEvent* game_event);
  private:
  const ::GameEvent& _internal_game_event() const;
  ::GameEvent* _internal_mutable_game_event();
  public:
  void unsafe_arena_set_allocated_game_event(
      ::GameEvent* game_event);
  ::GameEvent* unsafe_arena_release_game_event();

  // required uint64 valid_until = 1;
  bool has_valid_until() const;
  private:
  bool _internal_has_valid_until() const;
  public:
  void clear_valid_until();
  ::PROTOBUF_NAMESPACE_ID::uint64 valid_until() const;
  void set_valid_until(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_valid_until() const;
  void _internal_set_valid_until(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ProposedGameEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_id_;
  ::GameEvent* game_event_;
  ::PROTOBUF_NAMESPACE_ID::uint64 valid_until_;
  friend struct ::TableStruct_ssl_5freferee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Referee_TeamInfo

// required string name = 1;
inline bool Referee_TeamInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_name() const {
  return _internal_has_name();
}
inline void Referee_TeamInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Referee_TeamInfo::name() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.name)
  return _internal_name();
}
inline void Referee_TeamInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.name)
}
inline std::string* Referee_TeamInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Referee.TeamInfo.name)
  return _internal_mutable_name();
}
inline const std::string& Referee_TeamInfo::_internal_name() const {
  return name_.Get();
}
inline void Referee_TeamInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Referee_TeamInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Referee.TeamInfo.name)
}
inline void Referee_TeamInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Referee.TeamInfo.name)
}
inline void Referee_TeamInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Referee.TeamInfo.name)
}
inline std::string* Referee_TeamInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Referee_TeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:Referee.TeamInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Referee_TeamInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Referee.TeamInfo.name)
}

// required uint32 score = 2;
inline bool Referee_TeamInfo::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_score() const {
  return _internal_has_score();
}
inline void Referee_TeamInfo::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::score() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.score)
  return _internal_score();
}
inline void Referee_TeamInfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void Referee_TeamInfo::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.score)
}

// required uint32 red_cards = 3;
inline bool Referee_TeamInfo::_internal_has_red_cards() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_red_cards() const {
  return _internal_has_red_cards();
}
inline void Referee_TeamInfo::clear_red_cards() {
  red_cards_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_red_cards() const {
  return red_cards_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::red_cards() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.red_cards)
  return _internal_red_cards();
}
inline void Referee_TeamInfo::_internal_set_red_cards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  red_cards_ = value;
}
inline void Referee_TeamInfo::set_red_cards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_red_cards(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.red_cards)
}

// repeated uint32 yellow_card_times = 4 [packed = true];
inline int Referee_TeamInfo::_internal_yellow_card_times_size() const {
  return yellow_card_times_.size();
}
inline int Referee_TeamInfo::yellow_card_times_size() const {
  return _internal_yellow_card_times_size();
}
inline void Referee_TeamInfo::clear_yellow_card_times() {
  yellow_card_times_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_yellow_card_times(int index) const {
  return yellow_card_times_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::yellow_card_times(int index) const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.yellow_card_times)
  return _internal_yellow_card_times(index);
}
inline void Referee_TeamInfo::set_yellow_card_times(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  yellow_card_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.yellow_card_times)
}
inline void Referee_TeamInfo::_internal_add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  yellow_card_times_.Add(value);
}
inline void Referee_TeamInfo::add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_yellow_card_times(value);
  // @@protoc_insertion_point(field_add:Referee.TeamInfo.yellow_card_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Referee_TeamInfo::_internal_yellow_card_times() const {
  return yellow_card_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Referee_TeamInfo::yellow_card_times() const {
  // @@protoc_insertion_point(field_list:Referee.TeamInfo.yellow_card_times)
  return _internal_yellow_card_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Referee_TeamInfo::_internal_mutable_yellow_card_times() {
  return &yellow_card_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Referee_TeamInfo::mutable_yellow_card_times() {
  // @@protoc_insertion_point(field_mutable_list:Referee.TeamInfo.yellow_card_times)
  return _internal_mutable_yellow_card_times();
}

// required uint32 yellow_cards = 5;
inline bool Referee_TeamInfo::_internal_has_yellow_cards() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_yellow_cards() const {
  return _internal_has_yellow_cards();
}
inline void Referee_TeamInfo::clear_yellow_cards() {
  yellow_cards_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_yellow_cards() const {
  return yellow_cards_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::yellow_cards() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.yellow_cards)
  return _internal_yellow_cards();
}
inline void Referee_TeamInfo::_internal_set_yellow_cards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  yellow_cards_ = value;
}
inline void Referee_TeamInfo::set_yellow_cards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_yellow_cards(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.yellow_cards)
}

// required uint32 timeouts = 6;
inline bool Referee_TeamInfo::_internal_has_timeouts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_timeouts() const {
  return _internal_has_timeouts();
}
inline void Referee_TeamInfo::clear_timeouts() {
  timeouts_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_timeouts() const {
  return timeouts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::timeouts() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.timeouts)
  return _internal_timeouts();
}
inline void Referee_TeamInfo::_internal_set_timeouts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  timeouts_ = value;
}
inline void Referee_TeamInfo::set_timeouts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeouts(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.timeouts)
}

// required uint32 timeout_time = 7;
inline bool Referee_TeamInfo::_internal_has_timeout_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_timeout_time() const {
  return _internal_has_timeout_time();
}
inline void Referee_TeamInfo::clear_timeout_time() {
  timeout_time_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_timeout_time() const {
  return timeout_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::timeout_time() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.timeout_time)
  return _internal_timeout_time();
}
inline void Referee_TeamInfo::_internal_set_timeout_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  timeout_time_ = value;
}
inline void Referee_TeamInfo::set_timeout_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout_time(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.timeout_time)
}

// required uint32 goalkeeper = 8;
inline bool Referee_TeamInfo::_internal_has_goalkeeper() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_goalkeeper() const {
  return _internal_has_goalkeeper();
}
inline void Referee_TeamInfo::clear_goalkeeper() {
  goalkeeper_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_goalkeeper() const {
  return goalkeeper_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::goalkeeper() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.goalkeeper)
  return _internal_goalkeeper();
}
inline void Referee_TeamInfo::_internal_set_goalkeeper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  goalkeeper_ = value;
}
inline void Referee_TeamInfo::set_goalkeeper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_goalkeeper(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.goalkeeper)
}

// optional uint32 foul_counter = 9;
inline bool Referee_TeamInfo::_internal_has_foul_counter() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_foul_counter() const {
  return _internal_has_foul_counter();
}
inline void Referee_TeamInfo::clear_foul_counter() {
  foul_counter_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_foul_counter() const {
  return foul_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::foul_counter() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.foul_counter)
  return _internal_foul_counter();
}
inline void Referee_TeamInfo::_internal_set_foul_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  foul_counter_ = value;
}
inline void Referee_TeamInfo::set_foul_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_foul_counter(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.foul_counter)
}

// optional uint32 ball_placement_failures = 10;
inline bool Referee_TeamInfo::_internal_has_ball_placement_failures() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_ball_placement_failures() const {
  return _internal_has_ball_placement_failures();
}
inline void Referee_TeamInfo::clear_ball_placement_failures() {
  ball_placement_failures_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_ball_placement_failures() const {
  return ball_placement_failures_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::ball_placement_failures() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.ball_placement_failures)
  return _internal_ball_placement_failures();
}
inline void Referee_TeamInfo::_internal_set_ball_placement_failures(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  ball_placement_failures_ = value;
}
inline void Referee_TeamInfo::set_ball_placement_failures(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ball_placement_failures(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.ball_placement_failures)
}

// optional bool can_place_ball = 12;
inline bool Referee_TeamInfo::_internal_has_can_place_ball() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_can_place_ball() const {
  return _internal_has_can_place_ball();
}
inline void Referee_TeamInfo::clear_can_place_ball() {
  can_place_ball_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Referee_TeamInfo::_internal_can_place_ball() const {
  return can_place_ball_;
}
inline bool Referee_TeamInfo::can_place_ball() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.can_place_ball)
  return _internal_can_place_ball();
}
inline void Referee_TeamInfo::_internal_set_can_place_ball(bool value) {
  _has_bits_[0] |= 0x00000200u;
  can_place_ball_ = value;
}
inline void Referee_TeamInfo::set_can_place_ball(bool value) {
  _internal_set_can_place_ball(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.can_place_ball)
}

// optional uint32 max_allowed_bots = 13;
inline bool Referee_TeamInfo::_internal_has_max_allowed_bots() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_max_allowed_bots() const {
  return _internal_has_max_allowed_bots();
}
inline void Referee_TeamInfo::clear_max_allowed_bots() {
  max_allowed_bots_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::_internal_max_allowed_bots() const {
  return max_allowed_bots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee_TeamInfo::max_allowed_bots() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.max_allowed_bots)
  return _internal_max_allowed_bots();
}
inline void Referee_TeamInfo::_internal_set_max_allowed_bots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  max_allowed_bots_ = value;
}
inline void Referee_TeamInfo::set_max_allowed_bots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_allowed_bots(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.max_allowed_bots)
}

// -------------------------------------------------------------------

// Referee_Point

// required float x = 1;
inline bool Referee_Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Referee_Point::has_x() const {
  return _internal_has_x();
}
inline void Referee_Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Referee_Point::_internal_x() const {
  return x_;
}
inline float Referee_Point::x() const {
  // @@protoc_insertion_point(field_get:Referee.Point.x)
  return _internal_x();
}
inline void Referee_Point::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Referee_Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Referee.Point.x)
}

// required float y = 2;
inline bool Referee_Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Referee_Point::has_y() const {
  return _internal_has_y();
}
inline void Referee_Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Referee_Point::_internal_y() const {
  return y_;
}
inline float Referee_Point::y() const {
  // @@protoc_insertion_point(field_get:Referee.Point.y)
  return _internal_y();
}
inline void Referee_Point::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Referee_Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Referee.Point.y)
}

// -------------------------------------------------------------------

// Referee

// required uint64 packet_timestamp = 1;
inline bool Referee::_internal_has_packet_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Referee::has_packet_timestamp() const {
  return _internal_has_packet_timestamp();
}
inline void Referee::clear_packet_timestamp() {
  packet_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Referee::_internal_packet_timestamp() const {
  return packet_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Referee::packet_timestamp() const {
  // @@protoc_insertion_point(field_get:Referee.packet_timestamp)
  return _internal_packet_timestamp();
}
inline void Referee::_internal_set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  packet_timestamp_ = value;
}
inline void Referee::set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_packet_timestamp(value);
  // @@protoc_insertion_point(field_set:Referee.packet_timestamp)
}

// required .Referee.Stage stage = 2;
inline bool Referee::_internal_has_stage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Referee::has_stage() const {
  return _internal_has_stage();
}
inline void Referee::clear_stage() {
  stage_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::Referee_Stage Referee::_internal_stage() const {
  return static_cast< ::Referee_Stage >(stage_);
}
inline ::Referee_Stage Referee::stage() const {
  // @@protoc_insertion_point(field_get:Referee.stage)
  return _internal_stage();
}
inline void Referee::_internal_set_stage(::Referee_Stage value) {
  assert(::Referee_Stage_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  stage_ = value;
}
inline void Referee::set_stage(::Referee_Stage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:Referee.stage)
}

// optional sint32 stage_time_left = 3;
inline bool Referee::_internal_has_stage_time_left() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Referee::has_stage_time_left() const {
  return _internal_has_stage_time_left();
}
inline void Referee::clear_stage_time_left() {
  stage_time_left_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Referee::_internal_stage_time_left() const {
  return stage_time_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Referee::stage_time_left() const {
  // @@protoc_insertion_point(field_get:Referee.stage_time_left)
  return _internal_stage_time_left();
}
inline void Referee::_internal_set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  stage_time_left_ = value;
}
inline void Referee::set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage_time_left(value);
  // @@protoc_insertion_point(field_set:Referee.stage_time_left)
}

// required .Referee.Command command = 4;
inline bool Referee::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Referee::has_command() const {
  return _internal_has_command();
}
inline void Referee::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::Referee_Command Referee::_internal_command() const {
  return static_cast< ::Referee_Command >(command_);
}
inline ::Referee_Command Referee::command() const {
  // @@protoc_insertion_point(field_get:Referee.command)
  return _internal_command();
}
inline void Referee::_internal_set_command(::Referee_Command value) {
  assert(::Referee_Command_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  command_ = value;
}
inline void Referee::set_command(::Referee_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:Referee.command)
}

// required uint32 command_counter = 5;
inline bool Referee::_internal_has_command_counter() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Referee::has_command_counter() const {
  return _internal_has_command_counter();
}
inline void Referee::clear_command_counter() {
  command_counter_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee::_internal_command_counter() const {
  return command_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Referee::command_counter() const {
  // @@protoc_insertion_point(field_get:Referee.command_counter)
  return _internal_command_counter();
}
inline void Referee::_internal_set_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  command_counter_ = value;
}
inline void Referee::set_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command_counter(value);
  // @@protoc_insertion_point(field_set:Referee.command_counter)
}

// required uint64 command_timestamp = 6;
inline bool Referee::_internal_has_command_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Referee::has_command_timestamp() const {
  return _internal_has_command_timestamp();
}
inline void Referee::clear_command_timestamp() {
  command_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Referee::_internal_command_timestamp() const {
  return command_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Referee::command_timestamp() const {
  // @@protoc_insertion_point(field_get:Referee.command_timestamp)
  return _internal_command_timestamp();
}
inline void Referee::_internal_set_command_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  command_timestamp_ = value;
}
inline void Referee::set_command_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_command_timestamp(value);
  // @@protoc_insertion_point(field_set:Referee.command_timestamp)
}

// required .Referee.TeamInfo yellow = 7;
inline bool Referee::_internal_has_yellow() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || yellow_ != nullptr);
  return value;
}
inline bool Referee::has_yellow() const {
  return _internal_has_yellow();
}
inline void Referee::clear_yellow() {
  if (yellow_ != nullptr) yellow_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Referee_TeamInfo& Referee::_internal_yellow() const {
  const ::Referee_TeamInfo* p = yellow_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Referee_TeamInfo*>(
      &::_Referee_TeamInfo_default_instance_);
}
inline const ::Referee_TeamInfo& Referee::yellow() const {
  // @@protoc_insertion_point(field_get:Referee.yellow)
  return _internal_yellow();
}
inline void Referee::unsafe_arena_set_allocated_yellow(
    ::Referee_TeamInfo* yellow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(yellow_);
  }
  yellow_ = yellow;
  if (yellow) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.yellow)
}
inline ::Referee_TeamInfo* Referee::release_yellow() {
  _has_bits_[0] &= ~0x00000001u;
  ::Referee_TeamInfo* temp = yellow_;
  yellow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Referee_TeamInfo* Referee::unsafe_arena_release_yellow() {
  // @@protoc_insertion_point(field_release:Referee.yellow)
  _has_bits_[0] &= ~0x00000001u;
  ::Referee_TeamInfo* temp = yellow_;
  yellow_ = nullptr;
  return temp;
}
inline ::Referee_TeamInfo* Referee::_internal_mutable_yellow() {
  _has_bits_[0] |= 0x00000001u;
  if (yellow_ == nullptr) {
    auto* p = CreateMaybeMessage<::Referee_TeamInfo>(GetArena());
    yellow_ = p;
  }
  return yellow_;
}
inline ::Referee_TeamInfo* Referee::mutable_yellow() {
  // @@protoc_insertion_point(field_mutable:Referee.yellow)
  return _internal_mutable_yellow();
}
inline void Referee::set_allocated_yellow(::Referee_TeamInfo* yellow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete yellow_;
  }
  if (yellow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(yellow);
    if (message_arena != submessage_arena) {
      yellow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yellow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  yellow_ = yellow;
  // @@protoc_insertion_point(field_set_allocated:Referee.yellow)
}

// required .Referee.TeamInfo blue = 8;
inline bool Referee::_internal_has_blue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || blue_ != nullptr);
  return value;
}
inline bool Referee::has_blue() const {
  return _internal_has_blue();
}
inline void Referee::clear_blue() {
  if (blue_ != nullptr) blue_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Referee_TeamInfo& Referee::_internal_blue() const {
  const ::Referee_TeamInfo* p = blue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Referee_TeamInfo*>(
      &::_Referee_TeamInfo_default_instance_);
}
inline const ::Referee_TeamInfo& Referee::blue() const {
  // @@protoc_insertion_point(field_get:Referee.blue)
  return _internal_blue();
}
inline void Referee::unsafe_arena_set_allocated_blue(
    ::Referee_TeamInfo* blue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blue_);
  }
  blue_ = blue;
  if (blue) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.blue)
}
inline ::Referee_TeamInfo* Referee::release_blue() {
  _has_bits_[0] &= ~0x00000002u;
  ::Referee_TeamInfo* temp = blue_;
  blue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Referee_TeamInfo* Referee::unsafe_arena_release_blue() {
  // @@protoc_insertion_point(field_release:Referee.blue)
  _has_bits_[0] &= ~0x00000002u;
  ::Referee_TeamInfo* temp = blue_;
  blue_ = nullptr;
  return temp;
}
inline ::Referee_TeamInfo* Referee::_internal_mutable_blue() {
  _has_bits_[0] |= 0x00000002u;
  if (blue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Referee_TeamInfo>(GetArena());
    blue_ = p;
  }
  return blue_;
}
inline ::Referee_TeamInfo* Referee::mutable_blue() {
  // @@protoc_insertion_point(field_mutable:Referee.blue)
  return _internal_mutable_blue();
}
inline void Referee::set_allocated_blue(::Referee_TeamInfo* blue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete blue_;
  }
  if (blue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(blue);
    if (message_arena != submessage_arena) {
      blue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  blue_ = blue;
  // @@protoc_insertion_point(field_set_allocated:Referee.blue)
}

// optional .Referee.Point designated_position = 9;
inline bool Referee::_internal_has_designated_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || designated_position_ != nullptr);
  return value;
}
inline bool Referee::has_designated_position() const {
  return _internal_has_designated_position();
}
inline void Referee::clear_designated_position() {
  if (designated_position_ != nullptr) designated_position_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Referee_Point& Referee::_internal_designated_position() const {
  const ::Referee_Point* p = designated_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Referee_Point*>(
      &::_Referee_Point_default_instance_);
}
inline const ::Referee_Point& Referee::designated_position() const {
  // @@protoc_insertion_point(field_get:Referee.designated_position)
  return _internal_designated_position();
}
inline void Referee::unsafe_arena_set_allocated_designated_position(
    ::Referee_Point* designated_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_position_);
  }
  designated_position_ = designated_position;
  if (designated_position) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.designated_position)
}
inline ::Referee_Point* Referee::release_designated_position() {
  _has_bits_[0] &= ~0x00000004u;
  ::Referee_Point* temp = designated_position_;
  designated_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Referee_Point* Referee::unsafe_arena_release_designated_position() {
  // @@protoc_insertion_point(field_release:Referee.designated_position)
  _has_bits_[0] &= ~0x00000004u;
  ::Referee_Point* temp = designated_position_;
  designated_position_ = nullptr;
  return temp;
}
inline ::Referee_Point* Referee::_internal_mutable_designated_position() {
  _has_bits_[0] |= 0x00000004u;
  if (designated_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Referee_Point>(GetArena());
    designated_position_ = p;
  }
  return designated_position_;
}
inline ::Referee_Point* Referee::mutable_designated_position() {
  // @@protoc_insertion_point(field_mutable:Referee.designated_position)
  return _internal_mutable_designated_position();
}
inline void Referee::set_allocated_designated_position(::Referee_Point* designated_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete designated_position_;
  }
  if (designated_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(designated_position);
    if (message_arena != submessage_arena) {
      designated_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, designated_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  designated_position_ = designated_position;
  // @@protoc_insertion_point(field_set_allocated:Referee.designated_position)
}

// optional bool blue_team_on_positive_half = 10;
inline bool Referee::_internal_has_blue_team_on_positive_half() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Referee::has_blue_team_on_positive_half() const {
  return _internal_has_blue_team_on_positive_half();
}
inline void Referee::clear_blue_team_on_positive_half() {
  blue_team_on_positive_half_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Referee::_internal_blue_team_on_positive_half() const {
  return blue_team_on_positive_half_;
}
inline bool Referee::blue_team_on_positive_half() const {
  // @@protoc_insertion_point(field_get:Referee.blue_team_on_positive_half)
  return _internal_blue_team_on_positive_half();
}
inline void Referee::_internal_set_blue_team_on_positive_half(bool value) {
  _has_bits_[0] |= 0x00000400u;
  blue_team_on_positive_half_ = value;
}
inline void Referee::set_blue_team_on_positive_half(bool value) {
  _internal_set_blue_team_on_positive_half(value);
  // @@protoc_insertion_point(field_set:Referee.blue_team_on_positive_half)
}

// optional .Game_Event game_event = 11 [deprecated = true];
inline bool Referee::_internal_has_game_event() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || game_event_ != nullptr);
  return value;
}
inline bool Referee::has_game_event() const {
  return _internal_has_game_event();
}
inline const ::Game_Event& Referee::_internal_game_event() const {
  const ::Game_Event* p = game_event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Game_Event*>(
      &::_Game_Event_default_instance_);
}
inline const ::Game_Event& Referee::game_event() const {
  // @@protoc_insertion_point(field_get:Referee.game_event)
  return _internal_game_event();
}
inline void Referee::unsafe_arena_set_allocated_game_event(
    ::Game_Event* game_event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  game_event_ = game_event;
  if (game_event) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.game_event)
}
inline ::Game_Event* Referee::release_game_event() {
  _has_bits_[0] &= ~0x00000008u;
  ::Game_Event* temp = game_event_;
  game_event_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Game_Event* Referee::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_release:Referee.game_event)
  _has_bits_[0] &= ~0x00000008u;
  ::Game_Event* temp = game_event_;
  game_event_ = nullptr;
  return temp;
}
inline ::Game_Event* Referee::_internal_mutable_game_event() {
  _has_bits_[0] |= 0x00000008u;
  if (game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::Game_Event>(GetArena());
    game_event_ = p;
  }
  return game_event_;
}
inline ::Game_Event* Referee::mutable_game_event() {
  // @@protoc_insertion_point(field_mutable:Referee.game_event)
  return _internal_mutable_game_event();
}
inline void Referee::set_allocated_game_event(::Game_Event* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event)->GetArena();
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:Referee.game_event)
}

// optional .Referee.Command next_command = 12;
inline bool Referee::_internal_has_next_command() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Referee::has_next_command() const {
  return _internal_has_next_command();
}
inline void Referee::clear_next_command() {
  next_command_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::Referee_Command Referee::_internal_next_command() const {
  return static_cast< ::Referee_Command >(next_command_);
}
inline ::Referee_Command Referee::next_command() const {
  // @@protoc_insertion_point(field_get:Referee.next_command)
  return _internal_next_command();
}
inline void Referee::_internal_set_next_command(::Referee_Command value) {
  assert(::Referee_Command_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  next_command_ = value;
}
inline void Referee::set_next_command(::Referee_Command value) {
  _internal_set_next_command(value);
  // @@protoc_insertion_point(field_set:Referee.next_command)
}

// repeated .GameEvent game_events = 13;
inline int Referee::_internal_game_events_size() const {
  return game_events_.size();
}
inline int Referee::game_events_size() const {
  return _internal_game_events_size();
}
inline ::GameEvent* Referee::mutable_game_events(int index) {
  // @@protoc_insertion_point(field_mutable:Referee.game_events)
  return game_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >*
Referee::mutable_game_events() {
  // @@protoc_insertion_point(field_mutable_list:Referee.game_events)
  return &game_events_;
}
inline const ::GameEvent& Referee::_internal_game_events(int index) const {
  return game_events_.Get(index);
}
inline const ::GameEvent& Referee::game_events(int index) const {
  // @@protoc_insertion_point(field_get:Referee.game_events)
  return _internal_game_events(index);
}
inline ::GameEvent* Referee::_internal_add_game_events() {
  return game_events_.Add();
}
inline ::GameEvent* Referee::add_game_events() {
  // @@protoc_insertion_point(field_add:Referee.game_events)
  return _internal_add_game_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >&
Referee::game_events() const {
  // @@protoc_insertion_point(field_list:Referee.game_events)
  return game_events_;
}

// repeated .ProposedGameEvent proposed_game_events = 14;
inline int Referee::_internal_proposed_game_events_size() const {
  return proposed_game_events_.size();
}
inline int Referee::proposed_game_events_size() const {
  return _internal_proposed_game_events_size();
}
inline void Referee::clear_proposed_game_events() {
  proposed_game_events_.Clear();
}
inline ::ProposedGameEvent* Referee::mutable_proposed_game_events(int index) {
  // @@protoc_insertion_point(field_mutable:Referee.proposed_game_events)
  return proposed_game_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposedGameEvent >*
Referee::mutable_proposed_game_events() {
  // @@protoc_insertion_point(field_mutable_list:Referee.proposed_game_events)
  return &proposed_game_events_;
}
inline const ::ProposedGameEvent& Referee::_internal_proposed_game_events(int index) const {
  return proposed_game_events_.Get(index);
}
inline const ::ProposedGameEvent& Referee::proposed_game_events(int index) const {
  // @@protoc_insertion_point(field_get:Referee.proposed_game_events)
  return _internal_proposed_game_events(index);
}
inline ::ProposedGameEvent* Referee::_internal_add_proposed_game_events() {
  return proposed_game_events_.Add();
}
inline ::ProposedGameEvent* Referee::add_proposed_game_events() {
  // @@protoc_insertion_point(field_add:Referee.proposed_game_events)
  return _internal_add_proposed_game_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposedGameEvent >&
Referee::proposed_game_events() const {
  // @@protoc_insertion_point(field_list:Referee.proposed_game_events)
  return proposed_game_events_;
}

// optional int32 current_action_time_remaining = 15;
inline bool Referee::_internal_has_current_action_time_remaining() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Referee::has_current_action_time_remaining() const {
  return _internal_has_current_action_time_remaining();
}
inline void Referee::clear_current_action_time_remaining() {
  current_action_time_remaining_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Referee::_internal_current_action_time_remaining() const {
  return current_action_time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Referee::current_action_time_remaining() const {
  // @@protoc_insertion_point(field_get:Referee.current_action_time_remaining)
  return _internal_current_action_time_remaining();
}
inline void Referee::_internal_set_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  current_action_time_remaining_ = value;
}
inline void Referee::set_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_action_time_remaining(value);
  // @@protoc_insertion_point(field_set:Referee.current_action_time_remaining)
}

// -------------------------------------------------------------------

// ProposedGameEvent

// required uint64 valid_until = 1;
inline bool ProposedGameEvent::_internal_has_valid_until() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProposedGameEvent::has_valid_until() const {
  return _internal_has_valid_until();
}
inline void ProposedGameEvent::clear_valid_until() {
  valid_until_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProposedGameEvent::_internal_valid_until() const {
  return valid_until_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProposedGameEvent::valid_until() const {
  // @@protoc_insertion_point(field_get:ProposedGameEvent.valid_until)
  return _internal_valid_until();
}
inline void ProposedGameEvent::_internal_set_valid_until(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  valid_until_ = value;
}
inline void ProposedGameEvent::set_valid_until(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_valid_until(value);
  // @@protoc_insertion_point(field_set:ProposedGameEvent.valid_until)
}

// required string proposer_id = 2;
inline bool ProposedGameEvent::_internal_has_proposer_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProposedGameEvent::has_proposer_id() const {
  return _internal_has_proposer_id();
}
inline void ProposedGameEvent::clear_proposer_id() {
  proposer_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProposedGameEvent::proposer_id() const {
  // @@protoc_insertion_point(field_get:ProposedGameEvent.proposer_id)
  return _internal_proposer_id();
}
inline void ProposedGameEvent::set_proposer_id(const std::string& value) {
  _internal_set_proposer_id(value);
  // @@protoc_insertion_point(field_set:ProposedGameEvent.proposer_id)
}
inline std::string* ProposedGameEvent::mutable_proposer_id() {
  // @@protoc_insertion_point(field_mutable:ProposedGameEvent.proposer_id)
  return _internal_mutable_proposer_id();
}
inline const std::string& ProposedGameEvent::_internal_proposer_id() const {
  return proposer_id_.Get();
}
inline void ProposedGameEvent::_internal_set_proposer_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  proposer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposedGameEvent::set_proposer_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  proposer_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProposedGameEvent.proposer_id)
}
inline void ProposedGameEvent::set_proposer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  proposer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProposedGameEvent.proposer_id)
}
inline void ProposedGameEvent::set_proposer_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  proposer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProposedGameEvent.proposer_id)
}
inline std::string* ProposedGameEvent::_internal_mutable_proposer_id() {
  _has_bits_[0] |= 0x00000001u;
  return proposer_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposedGameEvent::release_proposer_id() {
  // @@protoc_insertion_point(field_release:ProposedGameEvent.proposer_id)
  if (!_internal_has_proposer_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return proposer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposedGameEvent::set_allocated_proposer_id(std::string* proposer_id) {
  if (proposer_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  proposer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProposedGameEvent.proposer_id)
}

// required .GameEvent game_event = 3;
inline bool ProposedGameEvent::_internal_has_game_event() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_event_ != nullptr);
  return value;
}
inline bool ProposedGameEvent::has_game_event() const {
  return _internal_has_game_event();
}
inline const ::GameEvent& ProposedGameEvent::_internal_game_event() const {
  const ::GameEvent* p = game_event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GameEvent*>(
      &::_GameEvent_default_instance_);
}
inline const ::GameEvent& ProposedGameEvent::game_event() const {
  // @@protoc_insertion_point(field_get:ProposedGameEvent.game_event)
  return _internal_game_event();
}
inline void ProposedGameEvent::unsafe_arena_set_allocated_game_event(
    ::GameEvent* game_event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  game_event_ = game_event;
  if (game_event) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProposedGameEvent.game_event)
}
inline ::GameEvent* ProposedGameEvent::release_game_event() {
  _has_bits_[0] &= ~0x00000002u;
  ::GameEvent* temp = game_event_;
  game_event_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GameEvent* ProposedGameEvent::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_release:ProposedGameEvent.game_event)
  _has_bits_[0] &= ~0x00000002u;
  ::GameEvent* temp = game_event_;
  game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* ProposedGameEvent::_internal_mutable_game_event() {
  _has_bits_[0] |= 0x00000002u;
  if (game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArena());
    game_event_ = p;
  }
  return game_event_;
}
inline ::GameEvent* ProposedGameEvent::mutable_game_event() {
  // @@protoc_insertion_point(field_mutable:ProposedGameEvent.game_event)
  return _internal_mutable_game_event();
}
inline void ProposedGameEvent::set_allocated_game_event(::GameEvent* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event)->GetArena();
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:ProposedGameEvent.game_event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Referee_Stage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Referee_Stage>() {
  return ::Referee_Stage_descriptor();
}
template <> struct is_proto_enum< ::Referee_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Referee_Command>() {
  return ::Referee_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5freferee_2eproto
