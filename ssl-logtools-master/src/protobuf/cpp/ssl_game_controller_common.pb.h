// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_game_controller_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgame_5fcontroller_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgame_5fcontroller_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto;
class BallSpeedMeasurement;
class BallSpeedMeasurementDefaultTypeInternal;
extern BallSpeedMeasurementDefaultTypeInternal _BallSpeedMeasurement_default_instance_;
class BotId;
class BotIdDefaultTypeInternal;
extern BotIdDefaultTypeInternal _BotId_default_instance_;
class ControllerReply;
class ControllerReplyDefaultTypeInternal;
extern ControllerReplyDefaultTypeInternal _ControllerReply_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BallSpeedMeasurement* Arena::CreateMaybeMessage<::BallSpeedMeasurement>(Arena*);
template<> ::BotId* Arena::CreateMaybeMessage<::BotId>(Arena*);
template<> ::ControllerReply* Arena::CreateMaybeMessage<::ControllerReply>(Arena*);
template<> ::Location* Arena::CreateMaybeMessage<::Location>(Arena*);
template<> ::Signature* Arena::CreateMaybeMessage<::Signature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ControllerReply_StatusCode : int {
  ControllerReply_StatusCode_UNKNOWN_STATUS_CODE = 0,
  ControllerReply_StatusCode_OK = 1,
  ControllerReply_StatusCode_REJECTED = 2
};
bool ControllerReply_StatusCode_IsValid(int value);
constexpr ControllerReply_StatusCode ControllerReply_StatusCode_StatusCode_MIN = ControllerReply_StatusCode_UNKNOWN_STATUS_CODE;
constexpr ControllerReply_StatusCode ControllerReply_StatusCode_StatusCode_MAX = ControllerReply_StatusCode_REJECTED;
constexpr int ControllerReply_StatusCode_StatusCode_ARRAYSIZE = ControllerReply_StatusCode_StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControllerReply_StatusCode_descriptor();
template<typename T>
inline const std::string& ControllerReply_StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControllerReply_StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControllerReply_StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControllerReply_StatusCode_descriptor(), enum_t_value);
}
inline bool ControllerReply_StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControllerReply_StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControllerReply_StatusCode>(
    ControllerReply_StatusCode_descriptor(), name, value);
}
enum ControllerReply_Verification : int {
  ControllerReply_Verification_UNKNOWN_VERIFICATION = 0,
  ControllerReply_Verification_VERIFIED = 1,
  ControllerReply_Verification_UNVERIFIED = 2
};
bool ControllerReply_Verification_IsValid(int value);
constexpr ControllerReply_Verification ControllerReply_Verification_Verification_MIN = ControllerReply_Verification_UNKNOWN_VERIFICATION;
constexpr ControllerReply_Verification ControllerReply_Verification_Verification_MAX = ControllerReply_Verification_UNVERIFIED;
constexpr int ControllerReply_Verification_Verification_ARRAYSIZE = ControllerReply_Verification_Verification_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControllerReply_Verification_descriptor();
template<typename T>
inline const std::string& ControllerReply_Verification_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControllerReply_Verification>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControllerReply_Verification_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControllerReply_Verification_descriptor(), enum_t_value);
}
inline bool ControllerReply_Verification_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControllerReply_Verification* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControllerReply_Verification>(
    ControllerReply_Verification_descriptor(), name, value);
}
enum Team : int {
  UNKNOWN = 0,
  YELLOW = 1,
  BLUE = 2
};
bool Team_IsValid(int value);
constexpr Team Team_MIN = UNKNOWN;
constexpr Team Team_MAX = BLUE;
constexpr int Team_ARRAYSIZE = Team_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Team_descriptor();
template<typename T>
inline const std::string& Team_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Team>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Team_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Team_descriptor(), enum_t_value);
}
inline bool Team_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Team* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Team>(
    Team_descriptor(), name, value);
}
// ===================================================================

class BotId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BotId) */ {
 public:
  inline BotId() : BotId(nullptr) {}
  virtual ~BotId();

  BotId(const BotId& from);
  BotId(BotId&& from) noexcept
    : BotId() {
    *this = ::std::move(from);
  }

  inline BotId& operator=(const BotId& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotId& operator=(BotId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BotId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BotId* internal_default_instance() {
    return reinterpret_cast<const BotId*>(
               &_BotId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BotId& a, BotId& b) {
    a.Swap(&b);
  }
  inline void Swap(BotId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotId* New() const final {
    return CreateMaybeMessage<BotId>(nullptr);
  }

  BotId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotId& from);
  void MergeFrom(const BotId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BotId";
  }
  protected:
  explicit BotId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .Team team = 2;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::Team team() const;
  void set_team(::Team value);
  private:
  ::Team _internal_team() const;
  void _internal_set_team(::Team value);
  public:

  // @@protoc_insertion_point(class_scope:BotId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int team_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Location)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ControllerReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerReply) */ {
 public:
  inline ControllerReply() : ControllerReply(nullptr) {}
  virtual ~ControllerReply();

  ControllerReply(const ControllerReply& from);
  ControllerReply(ControllerReply&& from) noexcept
    : ControllerReply() {
    *this = ::std::move(from);
  }

  inline ControllerReply& operator=(const ControllerReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerReply& operator=(ControllerReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControllerReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerReply* internal_default_instance() {
    return reinterpret_cast<const ControllerReply*>(
               &_ControllerReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerReply& a, ControllerReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerReply* New() const final {
    return CreateMaybeMessage<ControllerReply>(nullptr);
  }

  ControllerReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControllerReply& from);
  void MergeFrom(const ControllerReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerReply";
  }
  protected:
  explicit ControllerReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ControllerReply_StatusCode StatusCode;
  static constexpr StatusCode UNKNOWN_STATUS_CODE =
    ControllerReply_StatusCode_UNKNOWN_STATUS_CODE;
  static constexpr StatusCode OK =
    ControllerReply_StatusCode_OK;
  static constexpr StatusCode REJECTED =
    ControllerReply_StatusCode_REJECTED;
  static inline bool StatusCode_IsValid(int value) {
    return ControllerReply_StatusCode_IsValid(value);
  }
  static constexpr StatusCode StatusCode_MIN =
    ControllerReply_StatusCode_StatusCode_MIN;
  static constexpr StatusCode StatusCode_MAX =
    ControllerReply_StatusCode_StatusCode_MAX;
  static constexpr int StatusCode_ARRAYSIZE =
    ControllerReply_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusCode_descriptor() {
    return ControllerReply_StatusCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusCode_Name.");
    return ControllerReply_StatusCode_Name(enum_t_value);
  }
  static inline bool StatusCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StatusCode* value) {
    return ControllerReply_StatusCode_Parse(name, value);
  }

  typedef ControllerReply_Verification Verification;
  static constexpr Verification UNKNOWN_VERIFICATION =
    ControllerReply_Verification_UNKNOWN_VERIFICATION;
  static constexpr Verification VERIFIED =
    ControllerReply_Verification_VERIFIED;
  static constexpr Verification UNVERIFIED =
    ControllerReply_Verification_UNVERIFIED;
  static inline bool Verification_IsValid(int value) {
    return ControllerReply_Verification_IsValid(value);
  }
  static constexpr Verification Verification_MIN =
    ControllerReply_Verification_Verification_MIN;
  static constexpr Verification Verification_MAX =
    ControllerReply_Verification_Verification_MAX;
  static constexpr int Verification_ARRAYSIZE =
    ControllerReply_Verification_Verification_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Verification_descriptor() {
    return ControllerReply_Verification_descriptor();
  }
  template<typename T>
  static inline const std::string& Verification_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Verification>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Verification_Name.");
    return ControllerReply_Verification_Name(enum_t_value);
  }
  static inline bool Verification_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Verification* value) {
    return ControllerReply_Verification_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kNextTokenFieldNumber = 3,
    kStatusCodeFieldNumber = 1,
    kVerificationFieldNumber = 4,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // optional string next_token = 3;
  bool has_next_token() const;
  private:
  bool _internal_has_next_token() const;
  public:
  void clear_next_token();
  const std::string& next_token() const;
  void set_next_token(const std::string& value);
  void set_next_token(std::string&& value);
  void set_next_token(const char* value);
  void set_next_token(const char* value, size_t size);
  std::string* mutable_next_token();
  std::string* release_next_token();
  void set_allocated_next_token(std::string* next_token);
  private:
  const std::string& _internal_next_token() const;
  void _internal_set_next_token(const std::string& value);
  std::string* _internal_mutable_next_token();
  public:

  // optional .ControllerReply.StatusCode status_code = 1;
  bool has_status_code() const;
  private:
  bool _internal_has_status_code() const;
  public:
  void clear_status_code();
  ::ControllerReply_StatusCode status_code() const;
  void set_status_code(::ControllerReply_StatusCode value);
  private:
  ::ControllerReply_StatusCode _internal_status_code() const;
  void _internal_set_status_code(::ControllerReply_StatusCode value);
  public:

  // optional .ControllerReply.Verification verification = 4;
  bool has_verification() const;
  private:
  bool _internal_has_verification() const;
  public:
  void clear_verification();
  ::ControllerReply_Verification verification() const;
  void set_verification(::ControllerReply_Verification value);
  private:
  ::ControllerReply_Verification _internal_verification() const;
  void _internal_set_verification(::ControllerReply_Verification value);
  public:

  // @@protoc_insertion_point(class_scope:ControllerReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_token_;
  int status_code_;
  int verification_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Signature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  virtual ~Signature();

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(nullptr);
  }

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPkcs1V15FieldNumber = 2,
  };
  // required string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // required bytes pkcs1v15 = 2;
  bool has_pkcs1v15() const;
  private:
  bool _internal_has_pkcs1v15() const;
  public:
  void clear_pkcs1v15();
  const std::string& pkcs1v15() const;
  void set_pkcs1v15(const std::string& value);
  void set_pkcs1v15(std::string&& value);
  void set_pkcs1v15(const char* value);
  void set_pkcs1v15(const void* value, size_t size);
  std::string* mutable_pkcs1v15();
  std::string* release_pkcs1v15();
  void set_allocated_pkcs1v15(std::string* pkcs1v15);
  private:
  const std::string& _internal_pkcs1v15() const;
  void _internal_set_pkcs1v15(const std::string& value);
  std::string* _internal_mutable_pkcs1v15();
  public:

  // @@protoc_insertion_point(class_scope:Signature)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pkcs1v15_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class BallSpeedMeasurement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BallSpeedMeasurement) */ {
 public:
  inline BallSpeedMeasurement() : BallSpeedMeasurement(nullptr) {}
  virtual ~BallSpeedMeasurement();

  BallSpeedMeasurement(const BallSpeedMeasurement& from);
  BallSpeedMeasurement(BallSpeedMeasurement&& from) noexcept
    : BallSpeedMeasurement() {
    *this = ::std::move(from);
  }

  inline BallSpeedMeasurement& operator=(const BallSpeedMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline BallSpeedMeasurement& operator=(BallSpeedMeasurement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BallSpeedMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallSpeedMeasurement* internal_default_instance() {
    return reinterpret_cast<const BallSpeedMeasurement*>(
               &_BallSpeedMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BallSpeedMeasurement& a, BallSpeedMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(BallSpeedMeasurement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BallSpeedMeasurement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BallSpeedMeasurement* New() const final {
    return CreateMaybeMessage<BallSpeedMeasurement>(nullptr);
  }

  BallSpeedMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BallSpeedMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BallSpeedMeasurement& from);
  void MergeFrom(const BallSpeedMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallSpeedMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BallSpeedMeasurement";
  }
  protected:
  explicit BallSpeedMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto);
    return ::descriptor_table_ssl_5fgame_5fcontroller_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kBallSpeedFieldNumber = 2,
    kInitialBallSpeedFieldNumber = 3,
  };
  // required uint64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required float ball_speed = 2;
  bool has_ball_speed() const;
  private:
  bool _internal_has_ball_speed() const;
  public:
  void clear_ball_speed();
  float ball_speed() const;
  void set_ball_speed(float value);
  private:
  float _internal_ball_speed() const;
  void _internal_set_ball_speed(float value);
  public:

  // optional float initial_ball_speed = 3;
  bool has_initial_ball_speed() const;
  private:
  bool _internal_has_initial_ball_speed() const;
  public:
  void clear_initial_ball_speed();
  float initial_ball_speed() const;
  void set_initial_ball_speed(float value);
  private:
  float _internal_initial_ball_speed() const;
  void _internal_set_initial_ball_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:BallSpeedMeasurement)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  float ball_speed_;
  float initial_ball_speed_;
  friend struct ::TableStruct_ssl_5fgame_5fcontroller_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BotId

// optional int32 id = 1;
inline bool BotId::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BotId::has_id() const {
  return _internal_has_id();
}
inline void BotId::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BotId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BotId::id() const {
  // @@protoc_insertion_point(field_get:BotId.id)
  return _internal_id();
}
inline void BotId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void BotId::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BotId.id)
}

// optional .Team team = 2;
inline bool BotId::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BotId::has_team() const {
  return _internal_has_team();
}
inline void BotId::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Team BotId::_internal_team() const {
  return static_cast< ::Team >(team_);
}
inline ::Team BotId::team() const {
  // @@protoc_insertion_point(field_get:BotId.team)
  return _internal_team();
}
inline void BotId::_internal_set_team(::Team value) {
  assert(::Team_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  team_ = value;
}
inline void BotId::set_team(::Team value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:BotId.team)
}

// -------------------------------------------------------------------

// Location

// required float x = 1;
inline bool Location::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Location::has_x() const {
  return _internal_has_x();
}
inline void Location::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Location::_internal_x() const {
  return x_;
}
inline float Location::x() const {
  // @@protoc_insertion_point(field_get:Location.x)
  return _internal_x();
}
inline void Location::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Location::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Location.x)
}

// required float y = 2;
inline bool Location::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Location::has_y() const {
  return _internal_has_y();
}
inline void Location::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Location::_internal_y() const {
  return y_;
}
inline float Location::y() const {
  // @@protoc_insertion_point(field_get:Location.y)
  return _internal_y();
}
inline void Location::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Location::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Location.y)
}

// -------------------------------------------------------------------

// ControllerReply

// optional .ControllerReply.StatusCode status_code = 1;
inline bool ControllerReply::_internal_has_status_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControllerReply::has_status_code() const {
  return _internal_has_status_code();
}
inline void ControllerReply::clear_status_code() {
  status_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ControllerReply_StatusCode ControllerReply::_internal_status_code() const {
  return static_cast< ::ControllerReply_StatusCode >(status_code_);
}
inline ::ControllerReply_StatusCode ControllerReply::status_code() const {
  // @@protoc_insertion_point(field_get:ControllerReply.status_code)
  return _internal_status_code();
}
inline void ControllerReply::_internal_set_status_code(::ControllerReply_StatusCode value) {
  assert(::ControllerReply_StatusCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_code_ = value;
}
inline void ControllerReply::set_status_code(::ControllerReply_StatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:ControllerReply.status_code)
}

// optional string reason = 2;
inline bool ControllerReply::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerReply::has_reason() const {
  return _internal_has_reason();
}
inline void ControllerReply::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControllerReply::reason() const {
  // @@protoc_insertion_point(field_get:ControllerReply.reason)
  return _internal_reason();
}
inline void ControllerReply::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:ControllerReply.reason)
}
inline std::string* ControllerReply::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:ControllerReply.reason)
  return _internal_mutable_reason();
}
inline const std::string& ControllerReply::_internal_reason() const {
  return reason_.Get();
}
inline void ControllerReply::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ControllerReply::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ControllerReply.reason)
}
inline void ControllerReply::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ControllerReply.reason)
}
inline void ControllerReply::set_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ControllerReply.reason)
}
inline std::string* ControllerReply::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ControllerReply::release_reason() {
  // @@protoc_insertion_point(field_release:ControllerReply.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ControllerReply::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ControllerReply.reason)
}

// optional string next_token = 3;
inline bool ControllerReply::_internal_has_next_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControllerReply::has_next_token() const {
  return _internal_has_next_token();
}
inline void ControllerReply::clear_next_token() {
  next_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ControllerReply::next_token() const {
  // @@protoc_insertion_point(field_get:ControllerReply.next_token)
  return _internal_next_token();
}
inline void ControllerReply::set_next_token(const std::string& value) {
  _internal_set_next_token(value);
  // @@protoc_insertion_point(field_set:ControllerReply.next_token)
}
inline std::string* ControllerReply::mutable_next_token() {
  // @@protoc_insertion_point(field_mutable:ControllerReply.next_token)
  return _internal_mutable_next_token();
}
inline const std::string& ControllerReply::_internal_next_token() const {
  return next_token_.Get();
}
inline void ControllerReply::_internal_set_next_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  next_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ControllerReply::set_next_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  next_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ControllerReply.next_token)
}
inline void ControllerReply::set_next_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  next_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ControllerReply.next_token)
}
inline void ControllerReply::set_next_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  next_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ControllerReply.next_token)
}
inline std::string* ControllerReply::_internal_mutable_next_token() {
  _has_bits_[0] |= 0x00000002u;
  return next_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ControllerReply::release_next_token() {
  // @@protoc_insertion_point(field_release:ControllerReply.next_token)
  if (!_internal_has_next_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return next_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ControllerReply::set_allocated_next_token(std::string* next_token) {
  if (next_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  next_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ControllerReply.next_token)
}

// optional .ControllerReply.Verification verification = 4;
inline bool ControllerReply::_internal_has_verification() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControllerReply::has_verification() const {
  return _internal_has_verification();
}
inline void ControllerReply::clear_verification() {
  verification_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ControllerReply_Verification ControllerReply::_internal_verification() const {
  return static_cast< ::ControllerReply_Verification >(verification_);
}
inline ::ControllerReply_Verification ControllerReply::verification() const {
  // @@protoc_insertion_point(field_get:ControllerReply.verification)
  return _internal_verification();
}
inline void ControllerReply::_internal_set_verification(::ControllerReply_Verification value) {
  assert(::ControllerReply_Verification_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  verification_ = value;
}
inline void ControllerReply::set_verification(::ControllerReply_Verification value) {
  _internal_set_verification(value);
  // @@protoc_insertion_point(field_set:ControllerReply.verification)
}

// -------------------------------------------------------------------

// Signature

// required string token = 1;
inline bool Signature::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Signature::has_token() const {
  return _internal_has_token();
}
inline void Signature::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Signature::token() const {
  // @@protoc_insertion_point(field_get:Signature.token)
  return _internal_token();
}
inline void Signature::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:Signature.token)
}
inline std::string* Signature::mutable_token() {
  // @@protoc_insertion_point(field_mutable:Signature.token)
  return _internal_mutable_token();
}
inline const std::string& Signature::_internal_token() const {
  return token_.Get();
}
inline void Signature::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Signature::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Signature.token)
}
inline void Signature::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Signature.token)
}
inline void Signature::set_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Signature.token)
}
inline std::string* Signature::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Signature::release_token() {
  // @@protoc_insertion_point(field_release:Signature.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Signature.token)
}

// required bytes pkcs1v15 = 2;
inline bool Signature::_internal_has_pkcs1v15() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Signature::has_pkcs1v15() const {
  return _internal_has_pkcs1v15();
}
inline void Signature::clear_pkcs1v15() {
  pkcs1v15_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Signature::pkcs1v15() const {
  // @@protoc_insertion_point(field_get:Signature.pkcs1v15)
  return _internal_pkcs1v15();
}
inline void Signature::set_pkcs1v15(const std::string& value) {
  _internal_set_pkcs1v15(value);
  // @@protoc_insertion_point(field_set:Signature.pkcs1v15)
}
inline std::string* Signature::mutable_pkcs1v15() {
  // @@protoc_insertion_point(field_mutable:Signature.pkcs1v15)
  return _internal_mutable_pkcs1v15();
}
inline const std::string& Signature::_internal_pkcs1v15() const {
  return pkcs1v15_.Get();
}
inline void Signature::_internal_set_pkcs1v15(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pkcs1v15_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Signature::set_pkcs1v15(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pkcs1v15_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Signature.pkcs1v15)
}
inline void Signature::set_pkcs1v15(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pkcs1v15_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Signature.pkcs1v15)
}
inline void Signature::set_pkcs1v15(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pkcs1v15_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Signature.pkcs1v15)
}
inline std::string* Signature::_internal_mutable_pkcs1v15() {
  _has_bits_[0] |= 0x00000002u;
  return pkcs1v15_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Signature::release_pkcs1v15() {
  // @@protoc_insertion_point(field_release:Signature.pkcs1v15)
  if (!_internal_has_pkcs1v15()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pkcs1v15_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_pkcs1v15(std::string* pkcs1v15) {
  if (pkcs1v15 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pkcs1v15_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pkcs1v15,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Signature.pkcs1v15)
}

// -------------------------------------------------------------------

// BallSpeedMeasurement

// required uint64 timestamp = 1;
inline bool BallSpeedMeasurement::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BallSpeedMeasurement::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void BallSpeedMeasurement::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BallSpeedMeasurement::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BallSpeedMeasurement::timestamp() const {
  // @@protoc_insertion_point(field_get:BallSpeedMeasurement.timestamp)
  return _internal_timestamp();
}
inline void BallSpeedMeasurement::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void BallSpeedMeasurement::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:BallSpeedMeasurement.timestamp)
}

// required float ball_speed = 2;
inline bool BallSpeedMeasurement::_internal_has_ball_speed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BallSpeedMeasurement::has_ball_speed() const {
  return _internal_has_ball_speed();
}
inline void BallSpeedMeasurement::clear_ball_speed() {
  ball_speed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float BallSpeedMeasurement::_internal_ball_speed() const {
  return ball_speed_;
}
inline float BallSpeedMeasurement::ball_speed() const {
  // @@protoc_insertion_point(field_get:BallSpeedMeasurement.ball_speed)
  return _internal_ball_speed();
}
inline void BallSpeedMeasurement::_internal_set_ball_speed(float value) {
  _has_bits_[0] |= 0x00000002u;
  ball_speed_ = value;
}
inline void BallSpeedMeasurement::set_ball_speed(float value) {
  _internal_set_ball_speed(value);
  // @@protoc_insertion_point(field_set:BallSpeedMeasurement.ball_speed)
}

// optional float initial_ball_speed = 3;
inline bool BallSpeedMeasurement::_internal_has_initial_ball_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BallSpeedMeasurement::has_initial_ball_speed() const {
  return _internal_has_initial_ball_speed();
}
inline void BallSpeedMeasurement::clear_initial_ball_speed() {
  initial_ball_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float BallSpeedMeasurement::_internal_initial_ball_speed() const {
  return initial_ball_speed_;
}
inline float BallSpeedMeasurement::initial_ball_speed() const {
  // @@protoc_insertion_point(field_get:BallSpeedMeasurement.initial_ball_speed)
  return _internal_initial_ball_speed();
}
inline void BallSpeedMeasurement::_internal_set_initial_ball_speed(float value) {
  _has_bits_[0] |= 0x00000004u;
  initial_ball_speed_ = value;
}
inline void BallSpeedMeasurement::set_initial_ball_speed(float value) {
  _internal_set_initial_ball_speed(value);
  // @@protoc_insertion_point(field_set:BallSpeedMeasurement.initial_ball_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ControllerReply_StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControllerReply_StatusCode>() {
  return ::ControllerReply_StatusCode_descriptor();
}
template <> struct is_proto_enum< ::ControllerReply_Verification> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControllerReply_Verification>() {
  return ::ControllerReply_Verification_descriptor();
}
template <> struct is_proto_enum< ::Team> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team>() {
  return ::Team_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fgame_5fcontroller_5fcommon_2eproto
